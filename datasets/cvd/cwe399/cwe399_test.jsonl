{"idx":17508,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17509,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17510,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17511,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17512,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17513,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17514,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17515,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17516,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17517,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17518,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17519,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17520,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17521,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17522,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17523,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17524,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17525,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17526,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17527,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17528,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17529,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17530,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17531,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17532,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17533,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17534,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17535,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17536,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17537,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17538,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17539,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17540,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17541,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17542,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17543,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17544,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17545,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17546,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17547,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17548,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17549,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17550,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17551,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17552,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17553,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17554,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17555,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17556,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17557,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17558,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17559,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17560,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17561,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17562,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17563,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17564,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17565,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17566,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17567,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17568,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17569,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17570,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17571,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17572,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17573,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17574,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17575,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17576,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17577,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17578,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17579,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17580,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17581,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17582,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17583,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17584,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17585,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17586,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17587,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17588,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17589,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17590,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17591,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17592,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17593,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17594,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17595,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17596,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17597,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17598,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17599,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17600,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17601,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17602,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17603,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17604,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17605,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17606,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17607,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17608,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17609,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17610,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17611,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17612,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17613,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17614,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17615,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17616,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17617,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17618,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17619,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17620,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17621,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17622,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17623,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17624,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17625,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17626,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17627,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17628,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17629,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17630,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17631,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17632,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17633,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17634,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17635,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17636,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17637,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17638,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17639,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17640,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17641,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17642,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17643,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17644,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17645,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17646,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17647,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17648,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17649,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17650,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17651,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17652,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17653,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17654,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17655,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17656,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17657,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17658,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17659,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17660,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17661,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17662,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17663,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17664,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17665,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17666,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17667,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17668,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17669,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17670,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17671,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17672,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17673,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17674,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17675,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17676,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17677,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17678,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17679,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17680,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17681,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17682,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17683,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17684,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17685,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17686,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17687,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17688,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17689,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17690,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17691,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17692,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17693,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17694,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17695,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17696,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17697,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17698,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17699,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17700,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17701,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17702,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17703,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17704,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17705,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17706,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17707,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17708,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17709,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17710,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17711,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17712,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17713,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17714,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17715,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17716,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17717,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17718,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17719,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17720,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17721,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17722,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17723,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17724,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17725,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17726,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17727,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17728,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17729,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17730,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17731,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17732,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17733,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17734,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17735,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17736,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17737,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17738,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17739,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17740,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17741,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17742,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17743,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17744,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17745,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17746,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17747,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17748,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17749,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17750,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17751,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17752,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17753,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17754,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17755,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17756,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17757,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17758,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17759,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17760,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17761,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17762,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17763,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17764,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17765,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17766,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17767,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17768,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17769,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17770,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17771,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17772,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17773,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17774,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17775,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17776,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17777,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17778,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17779,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17780,"code":"data = 20;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17781,"code":"data = 20;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17782,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17783,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17784,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G1Sink;\n(*goodB2G1Sink)(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17785,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17786,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G1Sink(dataArray);\nstatic void goodB2G1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17787,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17788,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSink;\n(*badSink)(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17789,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17790,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink(dataArray);\nstatic void badSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17791,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17792,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G2Sink;\n(*goodB2G2Sink)(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17793,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17794,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G2Sink(dataArray);\nstatic void goodB2G2Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17795,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17796,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2B2Sink;\n(*goodG2BSink)(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17797,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17798,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nstatic void goodG2BSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17799,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17800,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G2Sink;\n(*goodB2G2Sink)(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17801,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17802,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G2Sink(dataArray);\nstatic void goodB2G2Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17803,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17804,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G1Sink;\n(*goodB2G1Sink)(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17805,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17806,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G1Sink(dataArray);\nstatic void goodB2G1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17807,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17808,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2BSink;\n(*goodG2BSink)(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17809,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17810,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nstatic void goodG2BSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17811,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17812,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSink;\n(*badSink)(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17813,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17814,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink(dataArray);\nstatic void badSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17815,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17816,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2B1Sink;\n(*badSink)(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17817,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17818,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2B1Sink(dataArray);\nstatic void goodG2B1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17819,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17820,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G2Sink;\n(*goodB2G2Sink)(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17821,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17822,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G2Sink(dataArray);\nstatic void goodB2G2Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17823,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17824,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G1Sink;\n(*goodB2G1Sink)(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17825,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17826,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G1Sink(dataArray);\nstatic void goodB2G1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17827,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17828,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G1Sink;\n(*goodB2G1Sink)(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17829,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17830,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G1Sink(dataArray);\nstatic void goodB2G1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17831,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17832,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2G2Sink;\n(*goodB2G2Sink)(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17833,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17834,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2G2Sink(dataArray);\nstatic void goodB2G2Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17835,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17836,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2B1Sink;\n(*goodG2B1Sink)(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17837,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17838,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2B1Sink(dataArray);\nstatic void goodG2B1Sink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17839,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17840,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17841,"code":"data = rand();\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17842,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17843,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17844,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17845,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17846,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17847,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17848,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17849,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17850,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17851,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17852,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17853,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17854,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17855,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17856,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17857,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17858,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17859,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17860,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17861,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17862,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17863,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17864,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17865,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17866,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17867,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17868,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17869,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17870,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17871,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17872,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17873,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17874,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17875,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17876,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17877,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17878,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17879,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17880,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17881,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17882,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17883,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17884,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17885,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17886,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17887,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17888,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17889,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17890,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17891,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17892,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17893,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17894,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17895,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17896,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17897,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17898,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17899,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17900,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17901,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17902,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17903,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17904,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17905,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17906,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17907,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17908,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17909,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17910,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17911,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17912,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17913,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17914,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17915,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17916,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17917,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17918,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17919,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17920,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSink;\n(*badSink)(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17921,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nHELLO_STRING_len = wsclen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17922,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink(dataArray);\nstatic void badSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17923,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17924,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2BSink;\n(*goodG2BSink)(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17925,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17926,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nstatic void goodG2BSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17927,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17928,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17929,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17930,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nstatic void goodB2GSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17931,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17932,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17933,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17934,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nstatic void goodB2GSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17935,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17936,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodG2BSink;\n(*goodG2BSink)(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17937,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17938,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nstatic void goodG2BSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17939,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17940,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodB2GSource;\ndata = (*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17941,"code":"data = 0;\ndata = goodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17942,"code":"data = 0;\ndata = goodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17943,"code":"data = 0;\ndata = badSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17944,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = badSource;\ndata = (*badSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17945,"code":"data = 0;\ndata = badSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17946,"code":"data = 0;\ndata = badSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17947,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17948,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodG2BSource;\ndata = (*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17949,"code":"data = 0;\ndata = goodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17950,"code":"data = 0;\ndata = goodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17951,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17952,"code":"data = 0;\ndata = goodG2BSource(data);\nsize_t (*funcPtr)(size_t) = goodG2BSource;\n(*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17953,"code":"data = 0;\ndata = goodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17954,"code":"data = 0;\ndata = goodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17955,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17956,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodB2GSource;\ndata = (*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17957,"code":"data = 0;\ndata = goodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17958,"code":"data = 0;\ndata = goodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17959,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17960,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodG2BSource;\n(*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17961,"code":"data = 0;\ngoodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17962,"code":"data = 0;\ngoodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17963,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17964,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodB2GSource;\n(*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17965,"code":"data = 0;\ngoodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17966,"code":"data = 0;\ngoodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17967,"code":"data = 0;\nbadSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17968,"code":"data = 0;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17969,"code":"data = 0;\nbadSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17970,"code":"data = 0;\nbadSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink(dataArray);\nstatic void badSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17971,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17972,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodB2GSource;\n(*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17973,"code":"data = 0;\ngoodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17974,"code":"data = 0;\ngoodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17975,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17976,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodG2BSource;\n(*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17977,"code":"data = 0;\ngoodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17978,"code":"data = 0;\ngoodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nstatic void badSource(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17979,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17980,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17981,"code":"void (*funcPtr) (size_t *) = goodG2BSink;\ndata = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nstatic void goodG2BSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17982,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17983,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17984,"code":"void (*funcPtr) (size_t *) = goodB2GSink;\ndata = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nstatic void goodB2GSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17985,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17986,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nstatic void badSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17987,"code":"void (*funcPtr) (size_t *) = badSink;\ndata = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nstatic void badSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17988,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17989,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17990,"code":"void (*funcPtr) (size_t *) = goodB2GSink;\ndata = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nstatic void goodB2GSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17991,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17992,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING);\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17993,"code":"void (*funcPtr) (size_t *) = goodG2BSink;\ndata = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nstatic void goodSink(size_t * dataArray)\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17994,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17995,"code":"size_t data = goodB2GData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17996,"code":"size_t data = goodB2GData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17997,"code":"size_t data = goodB2GData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":17998,"code":"size_t data = badData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":17999,"code":"size_t data = badData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18000,"code":"size_t data = badData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18001,"code":"size_t data = badData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18002,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18003,"code":"size_t data = goodG2BData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18004,"code":"size_t data = goodG2BData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18005,"code":"size_t data = goodG2BData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18006,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18007,"code":"size_t data = goodB2GData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18008,"code":"size_t data = goodB2GData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18009,"code":"size_t data = goodB2GData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18010,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18011,"code":"size_t data = goodG2BData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18012,"code":"size_t data = goodG2BData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18013,"code":"size_t data = goodG2BData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18014,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18015,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18016,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18017,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18018,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18019,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18020,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18021,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18022,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18023,"code":"data = rand();\nvoid (*funcPtr)(size_t) = badSink;\n(*goodB2GSink)(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18024,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18025,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink(dataArray);\nvoid badSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18026,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18027,"code":"data = rand();\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18028,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18029,"code":"data = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18030,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18031,"code":"data = 20;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18032,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18033,"code":"data = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18034,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18035,"code":"data = rand();\ngoodB2GSink_b(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_c;\n(*goodB2GSink_c)(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18036,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18037,"code":"data = rand();\ngoodB2GSink_b(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_c(dataArray);\nvoid goodB2GSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18038,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18039,"code":"data = 20;\ngoodG2BSink_b(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_c;\n(*goodB2GSink_c)(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18040,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18041,"code":"data = 20;\ngoodG2BSink_b(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_c(dataArray);\nvoid goodB2GSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18042,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nvoid badSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18043,"code":"data = rand();\nbadSink_b(data);\nvoid (*funcPtr)(size_t) = badSink_c;\n(*badSink_c)(data);\nvoid badSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18044,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nvoid badSink_c(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18045,"code":"data = rand();\nbadSink_b(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink_c(dataArray);\nvoid goodB2GSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18046,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18047,"code":"data = rand();\ngoodB2GSink_b(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_c;\n(*goodB2GSink_c)(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18048,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18049,"code":"data = rand();\ngoodB2GSink_b(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_c(dataArray);\nvoid goodB2GSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18050,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18051,"code":"data = 20;\ngoodG2BSink_b(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_c;\n(*goodB2GSink_c)(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18052,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18053,"code":"data = 20;\ngoodG2BSink_b(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_c(dataArray);\nvoid goodB2GSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18054,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18055,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_d;\n(*goodB2GSink_d)(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18056,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18057,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_d(dataArray);\nvoid goodB2GSink_d(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18058,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18059,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_d;\n(*goodB2GSink_d)(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18060,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18061,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_d(dataArray);\nvoid goodB2GSink_d(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18062,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nvoid badSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18063,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nvoid (*funcPtr)(size_t) = badSink_d;\n(*badSink_d)(data);\nvoid badSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18064,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nvoid badSink_d(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18065,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink_d(dataArray);\nvoid badSink_d(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18066,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18067,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_d;\n(*goodB2GSink_d)(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18068,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18069,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_d(dataArray);\nvoid goodB2GSink_d(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18070,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18071,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_d;\n(*goodB2GSink_d)(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18072,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18073,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_d(dataArray);\nvoid goodB2GSink_d(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18074,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18075,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_e;\n(*goodB2GSink_e)(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18076,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18077,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_e(dataArray);\nvoid goodB2GSink_e(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18078,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18079,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_e;\n(*goodB2GSink)(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18080,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18081,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_e(dataArray);\nvoid goodB2GSink_e(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18082,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nbadSink_e(data);\nvoid badSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18083,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nvoid (*funcPtr)(size_t) = badSink_e;\n(*badSink_e)(data);\nvoid badSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18084,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nbadSink_e(data);\nvoid badSink_e(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18085,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSink_e(dataArray);\nvoid badSink_e(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18086,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18087,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_e;\n(*goodB2GSink_e)(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18088,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18089,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_e(dataArray);\nvoid goodB2GSink_e(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18090,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18091,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid (*funcPtr)(size_t) = goodB2GSink_e;\n(*goodB2GSink_e)(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18092,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18093,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink_e(dataArray);\nvoid goodB2GSink_e(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18094,"code":"data = 0;\ndata = badSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18095,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = badSource;\ndata = (*badSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18096,"code":"data = 0;\ndata = badSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18097,"code":"data = 0;\ndata = badSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18098,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18099,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodG2BSource;\ndata = (*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18100,"code":"data = 0;\ndata = goodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18101,"code":"data = 0;\ndata = goodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18102,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18103,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodB2GSource;\ndata = (*goodB2GSink)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18104,"code":"data = 0;\ndata = goodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18105,"code":"data = 0;\ndata = goodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18106,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18107,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodG2BSource;\ndata = (*goodB2GSink)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18108,"code":"data = 0;\ndata = goodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18109,"code":"data = 0;\ndata = goodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18110,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18111,"code":"data = 0;\nsize_t (*funcPtr)(size_t) = goodB2GSource;\ndata = (*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18112,"code":"data = 0;\ndata = goodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18113,"code":"data = 0;\ndata = goodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18114,"code":"data = 0;\nbadSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18115,"code":"data = 0;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18116,"code":"data = 0;\nbadSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18117,"code":"data = 0;\nbadSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18118,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18119,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodG2BSource;\n(*goodG2BSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18120,"code":"data = 0;\ngoodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18121,"code":"data = 0;\ngoodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18122,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18123,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodB2GSource;\n(*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18124,"code":"data = 0;\ngoodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18125,"code":"data = 0;\ngoodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18126,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18127,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodG2BSource;\n(*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18128,"code":"data = 0;\ngoodG2BSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18129,"code":"data = 0;\ngoodG2BSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18130,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18131,"code":"data = 0;\nvoid (*funcPtr)(size_t) = goodB2GSource;\n(*goodB2GSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18132,"code":"data = 0;\ngoodB2GSource(data);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18133,"code":"data = 0;\ngoodB2GSource(data);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18134,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18135,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18136,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18137,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18138,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18139,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nvoid (*funcPtr)(size_t) = goodSource;\n(*goodSource)(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18140,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18141,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18142,"code":"data = rand();\nbadSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18143,"code":"data = rand();\nbadSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nvoid (*funcPtr)(size_t) = goodSource;\n(*goodSource)(data);\nvoid goodSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18144,"code":"data = rand();\nbadSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18145,"code":"data = rand();\nbadSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18146,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18147,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nvoid (*funcPtr)(size_t) = goodSource;\n(*goodSource)(data);\nvoid goodSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18148,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18149,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18150,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18151,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nvoid (*funcPtr)(size_t) = goodSource;\n(*goodSource)(data);\nvoid goodSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18152,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18153,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18154,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18155,"code":"data = rand();\nvoid (*funcPtr)(void *) = goodB2GSink;\n(*goodB2GSink)(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18156,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18157,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18158,"code":"data = rand();\nbadSink(&data);\nvoid badSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18159,"code":"data = rand();\nvoid (*funcPtr)(void *) = badSink;\n(*goodB2GSink)(data);\nvoid badSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18160,"code":"data = rand();\nbadSink(&data);\nvoid badSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18161,"code":"data = rand();\nbadSink(&data);\nvoid badSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18162,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18163,"code":"data = 20;\nvoid (*funcPtr)(void *) = goodG2Bink;\n(*goodG2BSink)(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18164,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18165,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18166,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18167,"code":"data = rand();\nvoid (*funcPtr)(void) = goodB2GSink;\n(*goodB2GSink)(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18168,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18169,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18170,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18171,"code":"data = 20;\nvoid (*funcPtr)(void *) = goodB2GSink;\n(*goodB2GSink)(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18172,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18173,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodSource(dataArray);\nvoid goodSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18174,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18175,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18176,"code":"size_t data;\nvoid (*funcPtr) (size_t *) = goodB2GSink;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18177,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18178,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nvoid badSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18179,"code":"void (*funcPtr) (size_t *) = badSink;\ndata = rand();\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray)\nvoid badSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18180,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18181,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18182,"code":"size_t data;\nvoid (*funcPtr) (size_t *) = goodG2BSink;\ndata = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nvoid goodG2BSink_c(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18183,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18184,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18185,"code":"size_t data;\nvoid (*funcPtr) (size_t *) = goodG2BSink;\ndata = 20;\nsize_t * dataArray[5];\ndataArray[2] = data;\nfuncPtr(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18186,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18187,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18188,"code":"size_t data;\nvoid (*funcPtr) (size_t *) = goodB2GSink;\nsize_t * dataArray[5];\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18189,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18190,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18191,"code":"data = 20;\ndataArray[2] = data;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18192,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18193,"code":"data = rand();\ndataArray[2] = data;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18194,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18195,"code":"data = rand();\ndataArray[2] = data;\nbadSink(dataArray);\nvoid badSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18196,"code":"data = rand();\ndataArray[2] = data;\nbadSink(dataArray);\nvoid badSink(size_t dataArray[])\nsize_t data = dataArray[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18197,"code":"data = rand();\ndataArray[2] = data\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataArray);\nvoid badSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18198,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18199,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18200,"code":"data = 20;\ndataArray[2] = data;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataArray);\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18201,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18202,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18203,"code":"data = rand();\ndataArray[2] = data;\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18204,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18205,"code":"data = rand();\nmyStruct.structFirst = data;\nvoid (*funcPtr)(structType) = goodB2GSink;\n(*goodB2GSink)(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18206,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18207,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18208,"code":"data = 20;\nmyStruct.structFirst = data;\nvoid (*funcPtr)(structType) = goodG2BSink;\n(*goodG2BSink)(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18209,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18210,"code":"data = rand();\nmyStruct.structFirst = data;\nbadSink(myStruct);\nvoid badSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18211,"code":"data = rand();\nmyStruct.structFirst = data;\nvoid (*funcPtr)(structType) = goodB2GSink;\n(*goodB2GSink)(myStruct);\nvoid badSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18212,"code":"data = rand();\nmyStruct.structFirst = data;\nbadSink(myStruct);\nvoid badSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18213,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18214,"code":"data = 20;\nmyStruct.structFirst = data;\nvoid (*funcPtr)(structType) = goodB2GSink;\n(*goodB2GSink)(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18215,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18216,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18217,"code":"data = rand();\nmyStruct.structFirst = data;\nvoid (*funcPtr)(structType) = goodB2GSink;\n(*goodB2GSink)(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18218,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18219,"code":"size_t data = badData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18220,"code":"size_t data = badData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18221,"code":"size_t data = badData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18222,"code":"size_t data = badData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18223,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18224,"code":"size_t data = goodG2BData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18225,"code":"size_t data = goodG2BData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18226,"code":"size_t data = goodG2BData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18227,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18228,"code":"size_t data = goodB2GData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18229,"code":"size_t data = goodB2GData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18230,"code":"size_t data = goodB2GData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18231,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18232,"code":"size_t data = goodB2GData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18233,"code":"size_t data = goodB2GData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18234,"code":"size_t data = goodB2GData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18235,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18236,"code":"size_t data = goodG2BData;\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18237,"code":"size_t data = goodG2BData;\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18238,"code":"size_t data = goodG2BData;\nsize_t * dataArray[5];\ndataArray[2] = data;\nbadSource(dataArray);\nvoid badSource(size_t * dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18239,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nbadSink(dataVector);\nvoid badSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18240,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nbadSink(dataVector);\nvoid badSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18241,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nbadSink(dataVector);\nvoid badSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRNG_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18242,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18243,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nvoid (*funcPtr)(size_t) = badSource;\n(*badSource)(data);\nvoid badSource(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18244,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18245,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18246,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nvoid (*funcPtr)(vector<size_t>)= goodG2BSink;\n(*goodG2BSink)(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18247,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18248,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18249,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nvoid (*funcPtr)(vector<size_t>) = goodB2GSink;\n(*goodB2GSink)(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18250,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18251,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18252,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nvoid (*funcPtr)(vector<size_t>) = goodG2BSink;\n(*goodG2BSink)(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18253,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18254,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nbadSink(dataList);\nvoid badSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18255,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nvoid (*funcPtr)(list<size_t>) = badSink;\n(*badSink)(dataList);\nvoid badSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18256,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nbadSink(dataList);\nvoid badSink(list<size_t> dataList)\nsize_t data = dataList.back();\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18257,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18258,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nvoid (*funcPtr)(size_t) = goodB2GSink;\n(*goodB2GSink)(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18259,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18260,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18261,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nvoid (*funcPtr)(list<size_t>) = goodG2BSink;\n(*goodG2BSink)(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18262,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18263,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18264,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nvoid (*funcPtr)(list<size_t>) = goodB2GSink;\n(*goodB2GSink)(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18265,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18266,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18267,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nvoid (*funcPtr)(list<size_t>) = goodG2BSink;\n(*goodG2BSink)(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18268,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18269,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nbadSink(dataMap);\nvoid badSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18270,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nvoid (*funcPtr)(map<int,size_t>) = badSink;\n(*badSink)(dataMap);\nvoid badSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18271,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nbadSink(dataMap);\nvoid badSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18272,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18273,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nvoid (*funcPtr)(map<int,size_t>) = goodB2GSink;\n(*goodB2GSink)(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18274,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18275,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18276,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nvoid (*funcPtr)(map<int,size_t) = goodG2BSink;\n(*goodG2BSink)(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18277,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18278,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18279,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nvoid (*funcPtr)(map<int,size_t>) = goodB2GSink;\n(*goodB2GSink)(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18280,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18281,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18282,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nvoid (*funcPtr)(map<int,size_t>) = goodG2BSink;\n(*goodG2BSink)(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18283,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nHELLO_STRING_len = wcslen(HELLO_STRING)\nif (data > HELLO_STRING_len)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18284,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18285,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18286,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING) ;\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18287,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18288,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18289,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18290,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18291,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18292,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18293,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18294,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18295,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18296,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18297,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18298,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18299,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18300,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18301,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18302,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18303,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18304,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18305,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18306,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18307,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18308,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18309,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18310,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18311,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18312,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18313,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18314,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18315,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18316,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18317,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18318,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18319,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18320,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18321,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18322,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18323,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18324,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18325,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18326,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18327,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18328,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18329,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18330,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18331,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18332,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18333,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18334,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18335,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18336,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18337,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18338,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18339,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18340,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18341,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18342,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18343,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18344,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18345,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18346,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18347,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18348,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18349,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18350,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18351,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18352,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18353,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18354,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18355,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18356,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18357,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18358,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18359,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18360,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18361,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18362,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18363,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18364,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18365,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18366,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18367,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18368,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18369,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18370,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18371,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18372,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18373,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18374,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18375,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18376,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18377,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18378,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18379,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18380,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18381,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18382,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18383,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18384,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18385,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18386,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18387,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18388,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18389,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18390,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18391,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18392,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18393,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18394,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18395,"code":"data = rand();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18396,"code":"data = 20;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18397,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18398,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18399,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18400,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18401,"code":"data = rand();\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18402,"code":"data = rand();\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18403,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18404,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18405,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18406,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18407,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18408,"code":"data = rand();\ngoodB2G1Sink(data);\nvoid goodB2G1Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18409,"code":"data = rand();\ngoodB2G2Sink(data);\nvoid goodB2G2Sink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18410,"code":"data = 20;\ngoodG2B1Sink(data);\nvoid goodG2B1Sink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18411,"code":"data = rand();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18412,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18413,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18414,"code":"data = 20;\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18415,"code":"data = rand();\nsize_t dataCopy = data;\nsize_t data = dataCopy;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18416,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18417,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18418,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18419,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18420,"code":"size_t data;\nsize_t *dataPtr2 = &data;\nsize_t data = *dataPtr2;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18421,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18422,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18423,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18424,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18425,"code":"size_t data;\nsize_t &dataRef = data;\nsize_t data = dataRef;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18426,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18427,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18428,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18429,"code":"data = rand();\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18430,"code":"data = 20;\nmyUnion.unionFirst = data;\nsize_t data = myUnion.unionSecond;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18431,"code":"data = rand();\nbadSink(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18432,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18433,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18434,"code":"data = rand();\ngoodB2GSink(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18435,"code":"data = 20;\ngoodG2BSink(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18436,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18437,"code":"data = 0;\ndata = badSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18438,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18439,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18440,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18441,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18442,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18443,"code":"data = 0;\nbadSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18444,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18445,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18446,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18447,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18448,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nstatic void badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18449,"code":"void (*funcPtr) (size_t) = goodB2GSink;\ndata = rand();\nfuncPtr(data);\nstatic void goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18450,"code":"void (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nstatic void goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18451,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18452,"code":"size_t data = badData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18453,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18454,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18455,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18456,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18457,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18458,"code":"data = rand();\nbadSink(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18459,"code":"data = rand();\ngoodB2GSink(data);\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18460,"code":"data = 20;\ngoodG2BSink(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18461,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18462,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18463,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nvoid badSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18464,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\nvoid goodB2GSink_c(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18465,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\nvoid goodG2BSink_c(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18466,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18467,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18468,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nvoid badSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18469,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\nvoid goodB2GSink_d(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18470,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\nvoid goodG2BSink_d(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18471,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18472,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18473,"code":"data = rand();\nbadSink_b(data);\nbadSink_c(data);\nbadSink_d(data);\nbadSink_e(data);\nvoid badSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18474,"code":"data = rand();\ngoodB2GSink_b(data);\ngoodB2GSink_c(data);\ngoodB2GSink_d(data);\ngoodB2GSink_e(data);\nvoid goodB2GSink_e(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18475,"code":"data = 20;\ngoodG2BSink_b(data);\ngoodG2BSink_c(data);\ngoodG2BSink_d(data);\ngoodG2BSink_e(data);\nvoid goodG2BSink_e(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18476,"code":"data = 0;\ndata = badSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18477,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18478,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18479,"code":"data = 0;\ndata = goodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18480,"code":"data = 0;\ndata = goodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18481,"code":"data = 0;\nbadSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18482,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18483,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18484,"code":"data = 0;\ngoodG2BSource(data);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18485,"code":"data = 0;\ngoodB2GSource(data);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18486,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18487,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18488,"code":"data = rand();\nbadSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18489,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18490,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(size_t * dataPtr)\nsize_t data = *dataPtr;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18491,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18492,"code":"data = rand();\nbadSink(&data);\nvoid badSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18493,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18494,"code":"data = rand();\ngoodB2GSink(&data);\nvoid goodB2GSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18495,"code":"data = 20;\ngoodG2BSink(&data);\nvoid goodG2BSink(void * dataVoidPtr)\nsize_t * dataPtr = (size_t *)dataVoidPtr;\nsize_t data = (*dataPtr);\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18496,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18497,"code":"void (*funcPtr) (size_t) = badSink;\ndata = rand();\nfuncPtr(data);\nvoid badSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18498,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18499,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodG2BSink;\ndata = 20;\nfuncPtr(data);\nvoid goodG2BSink(size_t data)\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18500,"code":"size_t data;\nvoid (*funcPtr) (size_t) = goodB2GSink;\nvoid goodB2GSink(size_t data)\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18501,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18502,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18503,"code":"data = rand();\ndataArray[2] = data;\nbadSink(dataArray);\nvoid badSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18504,"code":"data = 20;\ndataArray[2] = data;\ngoodG2BSink(dataArray);\nvoid goodG2BSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18505,"code":"data = rand();\ndataArray[2] = data;\ngoodB2GSink(dataArray);\nvoid goodB2GSink(size_t dataArray[])\nsize_t data = dataArray[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18506,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18507,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18508,"code":"data = rand();\nmyStruct.structFirst = data;\nbadSink(myStruct);\nvoid badSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18509,"code":"data = 20;\nmyStruct.structFirst = data;\ngoodG2BSink(myStruct);\nvoid goodG2BSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18510,"code":"data = rand();\nmyStruct.structFirst = data;\ngoodB2GSink(myStruct);\nvoid goodB2GSink(structType myStruct)\nsize_t data = myStruct.structFirst;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18511,"code":"size_t data = badData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18512,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18513,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18514,"code":"size_t data = goodB2GData;\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18515,"code":"size_t data = goodG2BData;\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18516,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\nbadSink(dataVector);\nvoid badSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18517,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18518,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18519,"code":"data = rand();\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodB2GSink(dataVector);\nvoid goodB2GSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18520,"code":"data = 20;\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ndataVector.insert(dataVector.end(), 1, data);\ngoodG2BSink(dataVector);\nvoid goodG2BSink(vector<size_t> dataVector)\nsize_t data = dataVector[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18521,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\nbadSink(dataList);\nvoid badSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18522,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18523,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18524,"code":"data = rand();\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodB2GSink(dataList);\nvoid goodB2GSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18525,"code":"data = 20;\ndataList.push_back(data);\ndataList.push_back(data);\ndataList.push_back(data);\ngoodG2BSink(dataList);\nvoid goodG2BSink(list<size_t> dataList)\nsize_t data = dataList.back();\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18526,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\nbadSink(dataMap);\nvoid badSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":1}
{"idx":18527,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18528,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18529,"code":"data = rand();\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodB2GSink(dataMap);\nvoid goodB2GSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING) && data < 100)\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18530,"code":"data = 20;\ndataMap[0] = data;\ndataMap[1] = data;\ndataMap[2] = data;\ngoodG2BSink(dataMap);\nvoid goodG2BSink(map<int, size_t> dataMap)\nsize_t data = dataMap[2];\nif (data > wcslen(HELLO_STRING))\nmyString = new wchar_t[data];\nwcscpy(myString, HELLO_STRING);\nprintWLine(myString);\ndelete [] myString;\n \n","target":0}
{"idx":18531,"code":"snprintf(tmp, CONTROL2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\nast_log(LOG_NOTICE, \"Asked to indicate '%s' condition on channel %s, but session does not exist.\\n\", control2str(ind), ast->name);\nast_verb(3, \"Asked to indicate '%s' condition on channel %s\\n\", control2str(ind), ast->name);\n \n","target":0}
{"idx":18532,"code":"snprintf(tmp, CALLSTATE2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\nast_verb(3, \"Transmitting CALL_STATE_MESSAGE to %s - line %d, callid %d, state %s\\n\", d->name, buttonInstance, callid, callstate2str(state));\n \n","target":0}
{"idx":18533,"code":"snprintf(tmp, MESSAGE2STR_BUFSIZE, \"UNKNOWN_MESSAGE-%d\", type);\nreturn tmp;\nSKINNY_DEVONLY(if (skinnydebug>1) ast_verb(4, \"Transmitting %s to %s\\n\", message2str(req->e), s->device->name);)\nast_verb(4, \"Received %s from %s\\n\", message2str(req->e), s->device->name);\n \n","target":0}
{"idx":18534,"code":"snprintf(tmp, DEVICE2STR_BUFSIZE, \"UNKNOWN-%d\", type);\nreturn tmp;\ndevice2str(d->type),\nast_cli(fd, \"%-20s %-16s %-15s %-15s %c %2d\\n\",\ndevice2str(d->type),\nastman_append(s,\nast_cli(fd, \"Device Type: %s\\n\", device2str(d->type));\nastman_append(s, \"DeviceType: %s\\r\\n\", device2str(d->type));\n \n","target":0}
{"idx":18535,"code":"snprintf(tmp, SUBSTATE2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\n \n","target":0}
{"idx":18536,"code":"AST_LIST_LOCK(&sessions);\nwhile((s = AST_LIST_REMOVE_HEAD(&sessions, list))) {\nclose(s->fd);\npthread_cancel(s->t);\npthread_kill(s->t, SIGURG);\npthread_join(s->t, NULL);\nfree(s);\n \n","target":0}
{"idx":18537,"code":"while ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nfree(a);\n \n","target":0}
{"idx":18538,"code":"while ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nwhile ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd->container);\n \n","target":0}
{"idx":18539,"code":"while ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd->container);\nfree(sd);\n \n","target":0}
{"idx":18540,"code":"while ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nfree(a);\n \n","target":0}
{"idx":18541,"code":"while ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd);\n \n","target":0}
{"idx":18542,"code":"snprintf(vms->introfn, sizeof(vms->introfn), \"%sintro\", vms->fn);\nsave_body(body, vms, \"2\", attachedfilefmt, 0);\nif (save_body(body, vms, \"3\", attachedfilefmt, 1)) {\n*vms->introfn = '\\0';\nstatic int save_body(BODY *body, struct vm_state *vms, char *section, char *format, int is_intro);\n \n","target":0}
{"idx":18543,"code":"snprintf(tmp[i].txtfile, sizeof(tmp[i].txtfile), \"%s.txt\", tmp[i].file);\nmake_file(tmp[i].file, sizeof(tmp[i].file), tmp[i].dir, 0);\nsnprintf(syscmd, sizeof(syscmd), \"cp \\\"%s\/sounds\/en\/%s.gsm\\\" \\\"%s\/%s\/%s\/%s\/msg0000.gsm\\\"\", ast_config_AST_DATA_DIR, origweasels,\nif ((txt = fopen(tmp[i].txtfile, \"w+\"))) {\nfprintf(txt, \"; just a stub\\n[message]\\nflag=%s\\n\", strcmp(folders[i], \"Urgent\") ? \"\" : \"Urgent\");\nfclose(txt);\nast_test_status_update(test, \"Unable to write message file '%s'\\n\", tmp[i].txtfile);\nSTORE(tmp[i].dir, testmailbox, testcontext, 0, chan, vmu, \"gsm\", 600, &vms, strcmp(folders[i], \"Urgent\") ? \"\" : \"Urgent\");\ndelete_file(dir, msgnum);\nSTORE(tmp[i].dir, testmailbox, testcontext, 0, chan, vmu, \"gsm\", 600, &vms, strcmp(folders[i], \"Urgent\") ? \"\" : \"Urgent\");\ncreate_dirpath(tmp[i].dir, sizeof(tmp[i].dir), testcontext, testmailbox, folders[i]);\nmake_dir(dest, len, context, ext, folder);\nreturn snprintf(dest, len, \"%s%s\/%s\/%s\", VM_SPOOL_DIR, context, ext, folder);\nmake_dir(dest, len, context, ext, folder);\nDELETE(tmp[i].dir, 0, tmp[i].file, vmu);\nDISPOSE(tmp[i].dir, 0);\nsnprintf(syscmd, sizeof(syscmd), \"rm -rf \\\"%s%s\/%s\\\"\", VM_SPOOL_DIR, testcontext, testmailbox);\nfclose(file);\n \n","target":0}
{"idx":18544,"code":"int new, old;\ninboxcount(vmu->mailbox, &new, &old);\nnew, old, vmu->imapuser\nastman_append(s,\nstatic int inboxcount(const char *mailbox, int *newmsgs, int *oldmsgs)\nint res = inboxcount2(mailbox, &urgentmsgs, newmsgs, oldmsgs);\nstatic int inboxcount2(const char *mailbox_context, int *urgentmsgs, int *newmsgs, int *oldmsgs)\nif (newmsgs)\n*newmsgs = 0;\nif (inboxcount2(cur, urgentmsgs ? &tmpurgent : NULL, newmsgs ? &tmpnew : NULL, oldmsgs ? &tmpold : NULL))\nif (newmsgs)\n*newmsgs += tmpnew;\nif (newmsgs) {\nif ((*newmsgs = __messagecount(context, mailboxnc, vmu->imapfolder)) < 0) {\nif (newmsgs) {\n*newmsgs += urgentmsgs;\ninboxcount(vmu->mailbox, &new, &old);\n \n","target":0}
{"idx":18545,"code":"snprintf(txt, txtsize, \"%s.txt\", file);\nunlink(txt);\n \n","target":0}
{"idx":18546,"code":"sprintf(new, \"%s%s\", newpassword, value);\nast_variable_update(cat, vmu->mailbox, new, NULL, 0);\n \n","target":0}
{"idx":18547,"code":"sprintf(new, \"%s\", newpassword);\nast_variable_update(cat, vmu->mailbox, new, NULL, 0);\n \n","target":0}
{"idx":18548,"code":"sprintf(new, \"%s\", newpassword);\nast_variable_update(cat, \"vmsecret\", new, NULL, 0);\n \n","target":0}
{"idx":18549,"code":"sprintf(requeststr + (x << 1), \"%2.2x\", digest[x]);\nfor (x=0;x<16;x++)\nif (!strcasecmp(requeststr, md5secret))\nast_log(LOG_NOTICE, \"Host %s failed MD5 authentication for '%s' (%s != %s)\\n\", ast_inet_ntoa(sin->sin_addr), p->name, requeststr, md5secret);\n \n","target":0}
{"idx":18550,"code":"int validated = (new > NEW_ALLOW) ? 1 : 0;\nif (!(callno_entry = get_unused_callno(0, validated))) {\nstatic struct callno_entry *get_unused_callno(int trunk, int validated);\n \n","target":0}
{"idx":18551,"code":"struct sockaddr_in new;\nmemmove(&new, ies->apparent_addr, sizeof(new));\nif (!newcall || !new.sin_addr.s_addr || !new.sin_port) {\nmemcpy(&pvt->transfer, &new, sizeof(pvt->transfer));\ninet_aton(newip, &pvt->transfer.sin_addr);\n \n","target":0}
{"idx":18552,"code":"snprintf(s2, strlen(s) + 100, \"\/var\/tmp\/%s-%ld\", last, (unsigned long)ast_random());\nfd = open(s2, O_RDWR | O_CREAT | O_EXCL, AST_FILE_MODE);\nif (fd < 0) {\nast_log(LOG_WARNING, \"Cannot open '%s' for writing: %s\\n\", s2, strerror(errno));\nunlink(s2);\nclose(fd);\nres = write(fd, buf, chunk);\nif (res != chunk) {\nast_log(LOG_WARNING, \"Only write %d of %d bytes of data :(: %s\\n\", res, chunk, strerror(errno));\nclose(fd);\nlseek(fd, 0, SEEK_SET);\nif ((res = read(fd, &fwh2, sizeof(fwh2))) != sizeof(fwh2)) {\nclose(fd);\nclose(fd);\nclose(fd);\nclose(fd);\nfwh = (struct ast_iax2_firmware_header*)mmap(NULL, stbuf.st_size, PROT_READ, MAP_PRIVATE, fd, 0);\nif (fwh == MAP_FAILED) {\nclose(fd);\nMD5Update(&md5, fwh->data, ntohl(fwh->datalen));\nif (memcmp(sum, fwh->chksum, sizeof(sum))) {\nmunmap((void*)fwh, stbuf.st_size);\nclose(fd);\nif (!strcmp((char *)cur->fwh->devname, (char *)fwh->devname)) {\nif (cur->dead || (ntohs(cur->fwh->version) < ntohs(fwh->version)))\nmunmap((void*)fwh, stbuf.st_size);\nclose(fd);\ncur->fwh = fwh;\ncur->fd = fd;\n \n","target":0}
{"idx":18553,"code":"struct signaling_queue_entry *new;\nfree_signaling_queue_entry(new);\nAST_LIST_INSERT_TAIL(&pvt->signaling_queue, new, next);\nAST_LIST_INSERT_TAIL(varlist, newvar, entries);\nstatic void free_signaling_queue_entry(struct signaling_queue_entry *s)\nast_free(s);\nast_free(varlist);\nast_free(prev);\n \n","target":0}
{"idx":18554,"code":"sprintf(digres + (x << 1),  \"%2.2x\", digest[x]);\nfor (x=0;x<16;x++)\niax_ie_append_str(ied, IAX_IE_MD5_RESULT, digres);\n \n","target":0}
{"idx":18555,"code":"IAX_DEBUGDIGEST(\"Sending\", key);\n \n","target":0}
{"idx":18556,"code":"int new, old;\nast_app_inboxcount(p->mailbox, &new, &old);\nmsgcount = (old << 8) | new;\niax_ie_append_short(&ied, IAX_IE_MSGCOUNT, msgcount);\n \n","target":0}
{"idx":18557,"code":"sprintf(requeststr + (x << 1), \"%2.2x\", digest[x]);\nfor (x=0;x<16;x++)\nif (!strcasecmp(requeststr, md5secret)) {\n \n","target":0}
{"idx":18558,"code":"snprintf(tmp, CONTROL2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\nast_log(LOG_NOTICE, \"Asked to indicate '%s' condition on channel %s, but session does not exist.\\n\", control2str(ind), ast->name);\nast_verb(3, \"Asked to indicate '%s' condition on channel %s\\n\", control2str(ind), ast->name);\n \n","target":0}
{"idx":18559,"code":"snprintf(tmp, CALLSTATE2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\nast_verb(3, \"Transmitting CALL_STATE_MESSAGE to %s - line %d, callid %d, state %s\\n\", d->name, buttonInstance, callid, callstate2str(state));\n \n","target":0}
{"idx":18560,"code":"snprintf(tmp, MESSAGE2STR_BUFSIZE, \"UNKNOWN_MESSAGE-%d\", type);\nreturn tmp;\nSKINNY_DEVONLY(if (skinnydebug>1) ast_verb(4, \"Transmitting %s to %s\\n\", message2str(req->e), s->device->name);)\nast_verb(4, \"Received %s from %s\\n\", message2str(req->e), s->device->name);\n \n","target":0}
{"idx":18561,"code":"snprintf(tmp, DEVICE2STR_BUFSIZE, \"UNKNOWN-%d\", type);\nreturn tmp;\ndevice2str(d->type),\nast_cli(fd, \"%-20s %-16s %-15s %-15s %c %2d\\n\",\ndevice2str(d->type),\nastman_append(s,\nast_cli(fd, \"Device Type: %s\\n\", device2str(d->type));\nastman_append(s, \"DeviceType: %s\\r\\n\", device2str(d->type));\n \n","target":0}
{"idx":18562,"code":"snprintf(tmp, SUBSTATE2STR_BUFSIZE, \"UNKNOWN-%d\", ind);\nreturn tmp;\n \n","target":0}
{"idx":18563,"code":"AST_LIST_LOCK(&sessions);\nwhile((s = AST_LIST_REMOVE_HEAD(&sessions, list))) {\nclose(s->fd);\npthread_cancel(s->t);\npthread_kill(s->t, SIGURG);\npthread_join(s->t, NULL);\nfree(s);\n \n","target":0}
{"idx":18564,"code":"while ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nfree(a);\n \n","target":0}
{"idx":18565,"code":"while ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nwhile ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd->container);\n \n","target":0}
{"idx":18566,"code":"while ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd->container);\nfree(sd);\n \n","target":0}
{"idx":18567,"code":"while ((d = AST_LIST_REMOVE_HEAD(&devices, list))) {\nAST_LIST_REMOVE(&d->lines, l, list);\nwhile ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nwhile ((a = AST_LIST_REMOVE_HEAD(&d->addons, list))) {\nfree(a);\n \n","target":0}
{"idx":18568,"code":"while ((l = AST_LIST_REMOVE_HEAD(&d->lines, list))) {\nwhile ((sd = AST_LIST_REMOVE_HEAD(&d->speeddials, list))) {\nfree(sd);\n \n","target":0}
{"idx":18569,"code":"snprintf(buf, STATE2STR_BUFSIZE, \"Unknown (%d)\", state);\nreturn buf;\nast_data_add_str(enum_node, \"text\", ast_state2str(chan->_state));\nclonechan->name, ast_state2str(clonechan->_state), original->name, ast_state2str(original->_state));\nast_manager_event_multichan(EVENT_FLAG_CALL, \"Masquerade\", 2, chans,\nchan->name, chan->_state, ast_state2str(chan->_state),\nast_manager_event(chan, EVENT_FLAG_CALL, \"Newstate\",\n \n","target":0}
{"idx":18570,"code":"struct ast_frame *cur, *new;\nAST_LIST_INSERT_HEAD(&frames, new, frame_list);\n \n","target":0}
{"idx":18571,"code":"for (i = 0; i < AST_MAX_FDS; i++) {\nfree(chan->epfd_data[i]);\n \n","target":0}
{"idx":18572,"code":"sprintf(path, \"%s\/static-http\/%s\", ast_config_AST_DATA_DIR, uri);\nif (stat(path, &st)) {\nfd = open(path, O_RDONLY);\nif (fd < 0) {\nif (strstr(path, \"\/private\/\") && !astman_is_authed(ast_http_manid_from_vars(headers))) {\nast_http_send(ser, method, 200, NULL, http_header, NULL, fd, 1);\nclose(fd);\nstruct ast_str *http_header, struct ast_str *out, const int fd,\nif (fd) {\ncontent_length += lseek(fd, 0, SEEK_END);\nlseek(fd, 0, SEEK_SET);\ncontent_length,\nfprintf(ser->f, \"HTTP\/1.1 %d %s\\r\\n\"\nif (fd) {\nwhile ((len = read(fd, buf, sizeof(buf))) > 0) {\nif (fwrite(buf, len, 1, ser->f) != 1) {\n \n","target":0}
{"idx":18573,"code":"len += sprintf(md5key + len, \"%2.2x\", digest[x]);\nif (!strcmp(md5key, key)) {\nreport_failed_challenge_response(s, key, md5key);\nconst char *response, const char *expected_response)\n \n","target":0}
{"idx":18574,"code":"snprintf(cut, (sizeof(filename) - strlen(filename)) - 1, \".so\");\nsnprintf(cut, (sizeof(filename) - strlen(filename)) - 1, \".c\");\n \n","target":0}
{"idx":18575,"code":"snprintf((char *) m.headers[m.hdrcount], hdrlen, \"%s: %s\", v->name, v->value);\n \n","target":0}
{"idx":18576,"code":"snprintf((char *) m.headers[m.hdrcount], hdrlen, \"%s: %s\", v->name, v->value);\n \n","target":0}
{"idx":18577,"code":"if (asprintf(&resource, \"%s\/asterisk\", client->user) >= 0) {\nclient->jid = iks_id_new(client->stack, resource);\nast_free(resource);\n \n","target":0}
{"idx":18578,"code":"snprintf(s, len, \"%c%s%c%s\", 0, username, 0, pass);\nast_base64encode(base64, (const unsigned char *) s, len - 1, (len + 2) * 4 \/ 3);\n \n","target":0}
{"idx":18579,"code":"if (asprintf(&handshake, \"<handshake>%s<\/handshake>\", shasum) >= 0) {\naji_send_raw(client, handshake);\nstatic int aji_send_raw(struct aji_client *client, const char *xmlstr);\nast_free(handshake);\n \n","target":0}
{"idx":18580,"code":"sprintf(msg, \"<?xml version='1.0'?>\"\nerr = aji_send_raw(client, msg);\nstatic int aji_send_raw(struct aji_client *client, const char *xmlstr);\niks_free(msg);\n \n","target":0}
{"idx":18581,"code":"res = vsnprintf((*buf)->__AST_STR_STR + offset, (*buf)->__AST_STR_LEN - offset, fmt, aq);\nneed = res + offset + 1;\nif (need > (*buf)->__AST_STR_LEN && (max_len == 0 || (*buf)->__AST_STR_LEN < max_len) ) {\nif (max_len && max_len < need) {\nneed += 16 + need \/ 4;\nast_verbose(\"extend from %d to %d\\n\", len, need);\n_ast_str_make_space(buf, need, file, lineno, function)\nast_verbose(\"failed to extend from %d to %d\\n\", len, need);\n(*buf)->__AST_STR_USED = (res + offset > (*buf)->__AST_STR_LEN) ? (*buf)->__AST_STR_LEN - 1: res + offset;\nreturn res;\n \n","target":0}
{"idx":18582,"code":"needed = vsnprintf(target, available, format, ap2) + 1;\nif (needed > available) {\nif (!(target = (char *) __ast_string_field_alloc_space(mgr, pool_head, needed))) {\nstruct ast_string_field_pool **pool_head, size_t needed)\nto_alloc = ast_make_room_for(needed, ast_string_field_allocation);\nast_assert(to_alloc % ast_alignof(ast_string_field_allocation) == 0);\nif (__builtin_expect(to_alloc > space, 0)) {\nwhile (new_size < to_alloc) {\n(*pool_head)->used += to_alloc;\n(*pool_head)->active += needed;\nAST_STRING_FIELD_ALLOCATION(result) = needed;\n} else if (*ptr != target) {\nmgr->last_alloc = *ptr = target;\nAST_STRING_FIELD_ALLOCATION(target) = needed;\n(*pool_head)->used += ast_make_room_for(needed, ast_string_field_allocation);\n(*pool_head)->active += needed;\n} else if ((grow = (needed - AST_STRING_FIELD_ALLOCATION(*ptr))) > 0) {\nAST_STRING_FIELD_ALLOCATION(*ptr) += grow;\n(*pool_head)->used += ast_align_for(grow, ast_string_field_allocation);\n(*pool_head)->active += grow;\n \n","target":0}
{"idx":18583,"code":"ptr += sprintf(ptr, \"%2.2x\", Message_Digest[x]);\n \n","target":0}
{"idx":18584,"code":"if (asprintf(&a->name, \"%-20s started at [%5d] %s %s()\",\nstart_fn, line, file, caller) < 0) {\ndata = a;\nreturn pthread_create(thread, attr, start_routine, data);\nres = ast_pthread_create_stack(thread, attr, start_routine, data,\nreturn res;\n \n","target":0}
{"idx":18585,"code":"out += sprintf(out, \"\\\\%c\", (unsigned char) *ptr);\nwhile (*ptr && out - outbuf < buflen - 1) {\nif (out - outbuf >= buflen - 2) {\n*out = *ptr;\nout++;\n*out = '\\0';\n \n","target":0}
{"idx":18586,"code":"vsprintf(target, format, ap);\n*ptr = target;\n \n","target":0}
{"idx":18587,"code":"out += sprintf(out, \"%%%02X\", (unsigned char) *ptr);\nwhile (*ptr && out - outbuf < buflen - 1) {\n*out = '+';\nout++;\nif (out - outbuf >= buflen - 3) {\n*out = *ptr;\nout++;\n*out = '\\0';\n \n","target":0}
{"idx":18588,"code":"ptr += sprintf(ptr, \"%2.2x\", digest[x]);\n \n","target":0}
{"idx":18589,"code":"static void lock_info_destroy(void *data)\nstruct thr_lock_info *lock_info = data;\nAST_LIST_REMOVE(&lock_infos, lock_info, entry);\nlock_info->thread_name,\npthread_mutex_destroy(&lock_info->lock);\nfree(lock_info);\n \n","target":0}
{"idx":18590,"code":"ast_str_append(str, 0, \"\\t%s\\n\", symbols[frame_iterator]);\nfree(symbols);\nappend_backtrace_information(str, lock_info->locks[i].backtrace);\nstatic void append_backtrace_information(struct ast_str **str, struct ast_bt *bt)\nif ((symbols = ast_bt_get_symbols(bt->addresses, bt->num_frames))) {\nfree(symbols);\n \n","target":0}
{"idx":18591,"code":"static void lock_info_destroy(void *data)\nlock_info->thread_name,\nfree((void *) lock_info->thread_name);\n \n","target":0}
{"idx":18592,"code":"sprintf(line_bufp + buf_offset, \"%3s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + 4);\nreturn print_line(print_stream, 0, line_bufp);\nif (!print_columns(cf))\nget_line_buf(size_t len)\nfor (new_line_buf_len = line_buf_len; len > new_line_buf_len;\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%3s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%10s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%-12s\", cf->cinfo.col_data[i]);\nstrcat(line_bufp + buf_offset, cf->cinfo.col_data[i]);\nbuf_offset += column_len;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\n \n","target":0}
{"idx":18593,"code":"sprintf(line_bufp + buf_offset, \"%-12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + 4);\nreturn print_line(print_stream, 0, line_bufp);\nif (!print_columns(cf))\nget_line_buf(size_t len)\nfor (new_line_buf_len = line_buf_len; len > new_line_buf_len;\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%3s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%10s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%-12s\", cf->cinfo.col_data[i]);\nstrcat(line_bufp + buf_offset, cf->cinfo.col_data[i]);\nbuf_offset += column_len;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\n \n","target":0}
{"idx":18594,"code":"sprintf(line_bufp + buf_offset, \"%10s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + 4);\nreturn print_line(print_stream, 0, line_bufp);\nif (!print_columns(cf))\nget_line_buf(size_t len)\nfor (new_line_buf_len = line_buf_len; len > new_line_buf_len;\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%3s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%10s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%-12s\", cf->cinfo.col_data[i]);\nstrcat(line_bufp + buf_offset, cf->cinfo.col_data[i]);\nbuf_offset += column_len;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\n \n","target":0}
{"idx":18595,"code":"sprintf(line_bufp + buf_offset, \"%12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + column_len);\nline_bufp = get_line_buf(buf_offset + 4);\nreturn print_line(print_stream, 0, line_bufp);\nif (!print_columns(cf))\nget_line_buf(size_t len)\nfor (new_line_buf_len = line_buf_len; len > new_line_buf_len;\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%3s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%10s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%12s\", cf->cinfo.col_data[i]);\nline_bufp = get_line_buf(buf_offset + column_len);\nsprintf(line_bufp + buf_offset, \"%-12s\", cf->cinfo.col_data[i]);\nstrcat(line_bufp + buf_offset, cf->cinfo.col_data[i]);\nbuf_offset += column_len;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" -> \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" <- \");\nbuf_offset += 4;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\nstrcat(line_bufp + buf_offset, \" \");\nbuf_offset += 1;\n \n","target":0}
{"idx":18596,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18597,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18598,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18599,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18600,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18601,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18602,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":18603,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18604,"code":"struct stonesoup_data *stonesoupData;\nirrespirable_enantioses = getenv(\"BESMEARER_GILTNER\");\nnonanticipation_outdrinking = ((char *)irrespirable_enantioses);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nif ((sscanf(nonanticipation_outdrinking, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18605,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18606,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":18607,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":18608,"code":"nonanticipation_outdrinking = ((char *)irrespirable_enantioses);\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonanticipation_outdrinking) + 1));\nif ((sscanf(nonanticipation_outdrinking, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18609,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18610,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18611,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *hopperdozer_phengitical);\n \n","target":0}
{"idx":18612,"code":"nonchivalrously_forbite = ((char *)((struct scrobicula_paradrop )repositioned_kern) . paragogically_sphargis);\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nif ((sscanf(nonchivalrously_forbite, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18613,"code":"void enshih_salangid(struct scrobicula_paradrop repositioned_kern)\nfree(((char *)((struct scrobicula_paradrop )repositioned_kern) . paragogically_sphargis));\n \n","target":0}
{"idx":18614,"code":"struct stonesoup_data *stonesoupData;\nnonchivalrously_forbite = ((char *)((struct scrobicula_paradrop )repositioned_kern) . paragogically_sphargis);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonchivalrously_forbite) + 1));\nif ((sscanf(nonchivalrously_forbite, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18615,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18616,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18617,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18618,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":18619,"code":"fenerate_counterlocking = ((char *)(malloc(diastatically_scoparius + 1)));\nif (fenerate_counterlocking == 0) {\nmemset(fenerate_counterlocking,0,diastatically_scoparius + 1);\nmemcpy(fenerate_counterlocking,deinos_squabbed,diastatically_scoparius);\nprodatary_nichani(1,fenerate_counterlocking);\nvoid prodatary_nichani(int boneyards_pinup,... );\n \n","target":0}
{"idx":18620,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(eatton_deblateration) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, eatton_deblateration);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18621,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":18622,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18623,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18624,"code":"void amann_hieratica(int hemiatrophy_repays,char *unshingled_overthwartness)\nfree(((char *)unshingled_overthwartness));\n \n","target":0}
{"idx":18625,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(eatton_deblateration) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, eatton_deblateration);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid amann_hieratica(int hemiatrophy_repays,char *unshingled_overthwartness)\neatton_deblateration = ((char *)unshingled_overthwartness);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(eatton_deblateration) +\nstrcat(stonesoup_thelockfile, eatton_deblateration);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18626,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18627,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(copperwing_dutchy) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, copperwing_dutchy);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18628,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18629,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18630,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(copperwing_dutchy) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, copperwing_dutchy);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid subunguial_rumness(pterostigmatic_liasing evisceration_afforce)\noverchidden_tabletted(evisceration_afforce);\nvoid overchidden_tabletted(pterostigmatic_liasing cramoisies_drool)\ncopperwing_dutchy = ((char *)cramoisies_drool);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(copperwing_dutchy) +\nstrcat(stonesoup_thelockfile, copperwing_dutchy);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18631,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18632,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(lopsticks_grieve) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, lopsticks_grieve);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18633,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18634,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18635,"code":"char *stonesoup_extension = \".lck\";\nlopsticks_grieve = ((char *)( *thiocarbanilide_badalona) . radiumization_shornick);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(lopsticks_grieve) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(lopsticks_grieve) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, lopsticks_grieve);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18636,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18637,"code":"free(((char *)( *thiocarbanilide_badalona) . radiumization_shornick));\n \n","target":0}
{"idx":18638,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18639,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18640,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18641,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18642,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18643,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18644,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18645,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *creakiest_spoliators;\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nfree(((char *)catchlight_voltize . ccv_campimetrical));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nfree(((char *)catchlight_voltize . ccv_campimetrical));\n \n","target":0}
{"idx":18646,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nchar *creakiest_spoliators;\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nunpositively_snakeless = ((char *)catchlight_voltize . ccv_campimetrical);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nif ((sscanf(unpositively_snakeless, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nunpositively_snakeless = ((char *)catchlight_voltize . ccv_campimetrical);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":18647,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *creakiest_spoliators;\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nunpositively_snakeless = ((char *)catchlight_voltize . ccv_campimetrical);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nif ((sscanf(unpositively_snakeless, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&creakiest_spoliators,\"CANNIBALISH_CARPETLESS\");\ncatchlight_voltize . ccv_campimetrical = creakiest_spoliators;\nunpositively_snakeless = ((char *)catchlight_voltize . ccv_campimetrical);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unpositively_snakeless) + 1));\nif ((sscanf(unpositively_snakeless, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18648,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18649,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18650,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\noligohemia_weevil(jateorhiza_quomodos,waki_decerned);\noligohemia_weevil(collutorium_thorr,blazer_budzart);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18651,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\noligohemia_weevil(jateorhiza_quomodos,waki_decerned);\noligohemia_weevil(collutorium_thorr,blazer_budzart);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18652,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(algorismic_ginhound) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, algorismic_ginhound);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18653,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18654,"code":"char *stonesoup_extension = \".lck\";\nalgorismic_ginhound = ((char *)( *blazer_budzart) . wardmen_predescription);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(algorismic_ginhound) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(algorismic_ginhound) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, algorismic_ginhound);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18655,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18656,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&skiddier_gazette,\"CORRIVATE_HAWKINGS\");\nteloi_plan(casie_goemagot);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18657,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(empetraceae_debrecen) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, empetraceae_debrecen);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18658,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&skiddier_gazette,\"CORRIVATE_HAWKINGS\");\nteloi_plan(casie_goemagot);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18659,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18660,"code":"free(((char *)( *(tubeworks_plectridial - 5)) . articulation_unappliqued));\n \n","target":0}
{"idx":18661,"code":"char *stonesoup_extension = \".lck\";\nempetraceae_debrecen = ((char *)( *(tubeworks_plectridial - 5)) . articulation_unappliqued);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(empetraceae_debrecen) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(empetraceae_debrecen) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, empetraceae_debrecen);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18662,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18663,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hematoxylin_erechtheum) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, hematoxylin_erechtheum);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18664,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *moff_theophanic);\n \n","target":0}
{"idx":18665,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18666,"code":"char *stonesoup_extension = \".lck\";\nchar *saviour_stichomythic = 0;\nhematoxylin_erechtheum = ((char *)saviour_stichomythic);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hematoxylin_erechtheum) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hematoxylin_erechtheum) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, hematoxylin_erechtheum);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18667,"code":"char *saviour_stichomythic = 0;\nfree(((char *)saviour_stichomythic));\n \n","target":0}
{"idx":18668,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18669,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chaing_opalize) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, chaing_opalize);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18670,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18671,"code":"char *stonesoup_extension = \".lck\";\nchaing_opalize = ((char *)spelunk_decimalised . neurotomize_wittensville);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chaing_opalize) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chaing_opalize) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, chaing_opalize);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18672,"code":"free(((char *)spelunk_decimalised . neurotomize_wittensville));\n \n","target":0}
{"idx":18673,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18674,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18675,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(minsteryard_ricecar) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, minsteryard_ricecar);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18676,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18677,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18678,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18679,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nint bodysurf_shiri = 18;\nchar *woffler_utilidors;;\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\ndepones_proembryonic = woffler_utilidors;\ngenyophrynidae_jestwise = 1;\nfulham_thorianite = &depones_proembryonic;\ngraveness_gustaf = ((rightwards_rootwise *)(((unsigned long )fulham_thorianite) * genyophrynidae_jestwise * genyophrynidae_jestwise)) + 5;\nminsteryard_ricecar = ((char *)( *(graveness_gustaf - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(minsteryard_ricecar) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(minsteryard_ricecar) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, minsteryard_ricecar);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\ndepones_proembryonic = woffler_utilidors;\nfulham_thorianite = &depones_proembryonic;\ngraveness_gustaf = ((rightwards_rootwise *)(((unsigned long )fulham_thorianite) * genyophrynidae_jestwise * genyophrynidae_jestwise)) + 5;\nminsteryard_ricecar = ((char *)( *(graveness_gustaf - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(minsteryard_ricecar) +\nstrcat(stonesoup_thelockfile, minsteryard_ricecar);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18680,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint bodysurf_shiri = 18;\nchar *woffler_utilidors;;\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\ndepones_proembryonic = woffler_utilidors;\ngenyophrynidae_jestwise = 1;\nfulham_thorianite = &depones_proembryonic;\ngraveness_gustaf = ((rightwards_rootwise *)(((unsigned long )fulham_thorianite) * genyophrynidae_jestwise * genyophrynidae_jestwise)) + 5;\nfree(((char *)( *(graveness_gustaf - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&woffler_utilidors,\"8950\",bodysurf_shiri);\ndepones_proembryonic = woffler_utilidors;\nfulham_thorianite = &depones_proembryonic;\ngraveness_gustaf = ((rightwards_rootwise *)(((unsigned long )fulham_thorianite) * genyophrynidae_jestwise * genyophrynidae_jestwise)) + 5;\nfree(((char *)( *(graveness_gustaf - 5))));\n \n","target":0}
{"idx":18681,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18682,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18683,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18684,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18685,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18686,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct antirusts_teutonized billiton_prioristic;\nchar *candlewicks_pulvinate;\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstruct antirusts_teutonized autopsychosis_companionways(struct antirusts_teutonized attame_lithochromic)\nreturn attame_lithochromic;\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nhypersthene_unrulier = ((char *)cryptomeria_trechmannite . skilts_transsubjective);\nstonesoupData->data = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nif ((sscanf(hypersthene_unrulier, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\n \n","target":0}
{"idx":18687,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18688,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nstruct antirusts_teutonized billiton_prioristic;\nchar *candlewicks_pulvinate;\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nif ((sscanf(hypersthene_unrulier, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstruct antirusts_teutonized autopsychosis_companionways(struct antirusts_teutonized attame_lithochromic)\nreturn attame_lithochromic;\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nhypersthene_unrulier = ((char *)cryptomeria_trechmannite . skilts_transsubjective);\nstonesoupData->data = malloc(sizeof(char) * (strlen(hypersthene_unrulier) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":18689,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18690,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct antirusts_teutonized billiton_prioristic;\nchar *candlewicks_pulvinate;\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nstruct antirusts_teutonized autopsychosis_companionways(struct antirusts_teutonized attame_lithochromic)\nreturn attame_lithochromic;\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\nfree(((char *)cryptomeria_trechmannite . skilts_transsubjective));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&candlewicks_pulvinate,\"ANTIGONE_JBEIL\");\nbilliton_prioristic . skilts_transsubjective = ((char *)candlewicks_pulvinate);\ncryptomeria_trechmannite = autopsychosis_companionways(billiton_prioristic);\n \n","target":0}
{"idx":18691,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18692,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18693,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18694,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18695,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *camaldolite_foggiest);\n \n","target":0}
{"idx":18696,"code":"void stonesoup_handle_taint(char *camaldolite_foggiest)\nungrammatic_nitrators = ((void *)camaldolite_foggiest);\nexcommunication_unigenist(ungrammatic_nitrators);\nvoid excommunication_unigenist(void *const tagrags_hydrotechnical)\ntumulous_nonmedicinal = ((char *)((char *)((void *)tagrags_hydrotechnical)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nif ((sscanf(tumulous_nonmedicinal, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18697,"code":"void stonesoup_handle_taint(char *camaldolite_foggiest)\nungrammatic_nitrators = ((void *)camaldolite_foggiest);\nexcommunication_unigenist(ungrammatic_nitrators);\nvoid excommunication_unigenist(void *const tagrags_hydrotechnical)\nfree(((char *)((char *)((void *)tagrags_hydrotechnical))));\n \n","target":0}
{"idx":18698,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18699,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18700,"code":"void stonesoup_handle_taint(char *camaldolite_foggiest)\nungrammatic_nitrators = ((void *)camaldolite_foggiest);\nexcommunication_unigenist(ungrammatic_nitrators);\nvoid excommunication_unigenist(void *const tagrags_hydrotechnical)\nstruct stonesoup_data *stonesoupData;\ntumulous_nonmedicinal = ((char *)((char *)((void *)tagrags_hydrotechnical)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tumulous_nonmedicinal) + 1));\nif ((sscanf(tumulous_nonmedicinal, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18701,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18702,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18703,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18704,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18705,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18706,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18707,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18708,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18709,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18710,"code":"debromination_subgeniculation = ((char *)( *( *( *( *( *( *( *( *( *( *archipelagian_unchoke)))))))))) . rodsman_patio);\nstonesoupData->data = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nif ((sscanf(debromination_subgeniculation, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18711,"code":"struct stonesoup_data *stonesoupData;\ndebromination_subgeniculation = ((char *)( *( *( *( *( *( *( *( *( *( *archipelagian_unchoke)))))))))) . rodsman_patio);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(debromination_subgeniculation) + 1));\nif ((sscanf(debromination_subgeniculation, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18712,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18713,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(anno_louisianians) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, anno_louisianians);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18714,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18715,"code":"char *stonesoup_extension = \".lck\";\nbiliverdic_myriapodan = getenv(\"DIFFRACTION_HOMOANISIC\");\nlabyrinthitis_foresweat = ((void *)biliverdic_myriapodan);\ncostain_adjument = &labyrinthitis_foresweat;\nanno_louisianians = ((char *)((char *)( *costain_adjument)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(anno_louisianians) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(anno_louisianians) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, anno_louisianians);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18716,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18717,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18718,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18719,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18720,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(herdsman_encrown) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, herdsman_encrown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18721,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18722,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(herdsman_encrown) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, herdsman_encrown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid brackney_embira(const elapsing_enneahedra schtick_caddised)\nMONKEYRONY_SORCERIES(schtick_caddised);\nvoid factional_electees(elapsing_enneahedra ostariophysi_milliarium)\nherdsman_encrown = ((char *)((elapsing_enneahedra )ostariophysi_milliarium));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(herdsman_encrown) +\nstrcat(stonesoup_thelockfile, herdsman_encrown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":18723,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18724,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18725,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18726,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18727,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18728,"code":"free(((char *)peepy_huesca . rechew_enlure));\n \n","target":0}
{"idx":18729,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18730,"code":"struct stonesoup_data *stonesoupData;\nnoncortical_overprints = ((char *)peepy_huesca . rechew_enlure);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nif ((sscanf(noncortical_overprints, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18731,"code":"noncortical_overprints = ((char *)peepy_huesca . rechew_enlure);\nstonesoupData->data = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(noncortical_overprints) + 1));\nif ((sscanf(noncortical_overprints, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18732,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18733,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18734,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18735,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nPMSignalState = ((PMSignalData *)(ShmemInitStruct(\"PMSignalState\",PMSignalShmemSize(),&found)));\nSize _len = PMSignalShmemSize();\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18736,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18737,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nPMSignalState = ((PMSignalData *)(ShmemInitStruct(\"PMSignalState\",PMSignalShmemSize(),&found)));\nSize _len = PMSignalShmemSize();\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18738,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18739,"code":"struct stonesoup_data *stonesoupData;\npsat_disboscation = ((char *)( *llanero_alguacil) . furil_weedingtime);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nif ((sscanf(psat_disboscation, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18740,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18741,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18742,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18743,"code":"psat_disboscation = ((char *)( *llanero_alguacil) . furil_weedingtime);\nstonesoupData->data = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(psat_disboscation) + 1));\nif ((sscanf(psat_disboscation, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18744,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18745,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18746,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18747,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18748,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18749,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *elementality_humic;\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nfree(((char *)elementality_humic));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nfree(((char *)elementality_humic));\n \n","target":0}
{"idx":18750,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18751,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nchar *elementality_humic;\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nprematernity_severality = ((char *)elementality_humic);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nif ((sscanf(prematernity_severality, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nprematernity_severality = ((char *)elementality_humic);\nstonesoupData->data = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":18752,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":18753,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *elementality_humic;\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nprematernity_severality = ((char *)elementality_humic);\nstonesoupData->data = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nif ((sscanf(prematernity_severality, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&elementality_humic,\"POTIPHAR_COLLUN\");\nprematernity_severality = ((char *)elementality_humic);\nstonesoupData->data = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(prematernity_severality) + 1));\nif ((sscanf(prematernity_severality, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18754,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":18755,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18756,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18757,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18758,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":18759,"code":"bronchiarctia_farmer = ((char *)(malloc(metter_entocranial + 1)));\nmemset(bronchiarctia_farmer,0,metter_entocranial + 1);\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\ngag_conspicuousness = ((char *)extraofficial_aroeira);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gag_conspicuousness);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif (extraofficial_aroeira != 0)\nfree(((char *)extraofficial_aroeira));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18760,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *hypophyses_decursive)\nif (hypophyses_decursive != 0) {;\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nbronchiarctia_farmer = ((char *)(malloc(metter_entocranial + 1)));\nif (bronchiarctia_farmer == 0) {\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nif (hypophyses_decursive != 0)\nfree(((char *)hypophyses_decursive));\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\ngag_conspicuousness = ((char *)extraofficial_aroeira);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gag_conspicuousness);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif (extraofficial_aroeira != 0)\nfree(((char *)extraofficial_aroeira));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18761,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gag_conspicuousness);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18762,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nbronchiarctia_farmer = ((char *)(malloc(metter_entocranial + 1)));\nmemset(bronchiarctia_farmer,0,metter_entocranial + 1);\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\npreinvolvement_arginines = 5;\nvoluminousness_birdseeds = &preinvolvement_arginines;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\nfree(((char *)extraofficial_aroeira));\nvoid stonesoup_handle_taint(char *hypophyses_decursive)\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\nfree(((char *)extraofficial_aroeira));\n \n","target":0}
{"idx":18763,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *hypophyses_decursive)\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nfree(((char *)hypophyses_decursive));\n \n","target":0}
{"idx":18764,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nchar *stonesoup_extension = \".lck\";\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nbronchiarctia_farmer = ((char *)(malloc(metter_entocranial + 1)));\nmemset(bronchiarctia_farmer,0,metter_entocranial + 1);\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\npreinvolvement_arginines = 5;\nvoluminousness_birdseeds = &preinvolvement_arginines;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\ngag_conspicuousness = ((char *)extraofficial_aroeira);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gag_conspicuousness);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_handle_taint(char *hypophyses_decursive)\nmetter_entocranial = ((int )(strlen(hypophyses_decursive)));\nmemcpy(bronchiarctia_farmer,hypophyses_decursive,metter_entocranial);\nsuperfused_allusiveness[5] = bronchiarctia_farmer;\nextraofficial_aroeira =  *(superfused_allusiveness +  *voluminousness_birdseeds);\ngag_conspicuousness = ((char *)extraofficial_aroeira);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gag_conspicuousness) +\nstrcat(stonesoup_thelockfile, gag_conspicuousness);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18765,"code":"monofil_unworkable = ((char *)guenther_pasigraphy);\ntracepoint(stonesoup_trace, weakness_start, \"CWE414\", \"A\", \"Missing Lock Check\");\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data_size = strlen(stonesoupData->data);\nstonesoup_printf(\"Error creating thread 0.\");\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18766,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18767,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18768,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18769,"code":"for (i = 0; i < (d -> tralloc); ++i) {\n}\n \n","target":0}
{"idx":18770,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18771,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18772,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":18773,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":18774,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":18775,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":18776,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18777,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":18778,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":18779,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":18780,"code":"tracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmp4LOMr4_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nguenther_pasigraphy = getenv(\"CHEOPLASTIC_PRESUMERS\");\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(monofil_unworkable) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(monofil_unworkable) + 1));\nstonesoupData->file2,\nstonesoupData->file1,\nstonesoup_printf(\"Error parsing input.\\n\");\n \n","target":0}
{"idx":18781,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18782,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":18783,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":18784,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":18785,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18786,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18787,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18788,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18789,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18790,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18791,"code":"void centrifuge_threadle(int mountlet_twigwithy,char *complain_fleets)\nstruct stonesoup_data *stonesoupData;\ncentrifuge_threadle(mountlet_twigwithy,complain_fleets);\nmisunderstanded_adherer = ((char *)((char *)complain_fleets));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nif ((sscanf(misunderstanded_adherer, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid dawson_homing(char *const ctenophorous_slip)\ncentrifuge_threadle(farleigh_lotrite,ctenophorous_slip);\n \n","target":0}
{"idx":18792,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18793,"code":"void dawson_homing(char *const ctenophorous_slip)\ncentrifuge_threadle(farleigh_lotrite,ctenophorous_slip);\nvoid centrifuge_threadle(int mountlet_twigwithy,char *complain_fleets)\ncentrifuge_threadle(mountlet_twigwithy,complain_fleets);\nfree(((char *)((char *)complain_fleets)));\n \n","target":0}
{"idx":18794,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18795,"code":"void dawson_homing(char *const ctenophorous_slip)\ncentrifuge_threadle(farleigh_lotrite,ctenophorous_slip);\nvoid centrifuge_threadle(int mountlet_twigwithy,char *complain_fleets)\ncentrifuge_threadle(mountlet_twigwithy,complain_fleets);\nmisunderstanded_adherer = ((char *)((char *)complain_fleets));\nstonesoupData->data = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(misunderstanded_adherer) + 1));\nif ((sscanf(misunderstanded_adherer, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18796,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(prolegomenon_salicorn) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, prolegomenon_salicorn);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18797,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18798,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18799,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nstruct callida_unkennel ceramicists_ramosopalmate;\nint oilers_plumbless = 18;\nchar *autoerotically_hygrometries;;\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nceramicists_ramosopalmate . accrementition_saxaul = ((char *)autoerotically_hygrometries);\nexcerpting_carmel[5] = ceramicists_ramosopalmate;\nmyrrhis_wahcondas = 5;\nickily_deprotestantize = &myrrhis_wahcondas;\nwhetrock_defiler =  *(excerpting_carmel +  *ickily_deprotestantize);\nprolegomenon_salicorn = ((char *)whetrock_defiler . accrementition_saxaul);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(prolegomenon_salicorn) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(prolegomenon_salicorn) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, prolegomenon_salicorn);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nceramicists_ramosopalmate . accrementition_saxaul = ((char *)autoerotically_hygrometries);\nwhetrock_defiler =  *(excerpting_carmel +  *ickily_deprotestantize);\nprolegomenon_salicorn = ((char *)whetrock_defiler . accrementition_saxaul);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(prolegomenon_salicorn) +\nstrcat(stonesoup_thelockfile, prolegomenon_salicorn);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18800,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18801,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nstruct callida_unkennel ceramicists_ramosopalmate;\nint oilers_plumbless = 18;\nchar *autoerotically_hygrometries;;\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nceramicists_ramosopalmate . accrementition_saxaul = ((char *)autoerotically_hygrometries);\nexcerpting_carmel[5] = ceramicists_ramosopalmate;\nmyrrhis_wahcondas = 5;\nickily_deprotestantize = &myrrhis_wahcondas;\nwhetrock_defiler =  *(excerpting_carmel +  *ickily_deprotestantize);\nfree(((char *)whetrock_defiler . accrementition_saxaul));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&autoerotically_hygrometries,\"8391\",oilers_plumbless);\nceramicists_ramosopalmate . accrementition_saxaul = ((char *)autoerotically_hygrometries);\nwhetrock_defiler =  *(excerpting_carmel +  *ickily_deprotestantize);\nfree(((char *)whetrock_defiler . accrementition_saxaul));\n \n","target":0}
{"idx":18802,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18803,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmprkiONC_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (diethylacetal_devels != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18804,"code":"tapework_seraphism = ((char *)diethylacetal_devels);\ntracepoint(stonesoup_trace, weakness_start, \"CWE414\", \"A\", \"Missing Lock Check\");\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data_size = strlen(stonesoupData->data);\nstonesoup_printf(\"Error creating thread 0.\");\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18805,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmprkiONC_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (diethylacetal_devels != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18806,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18807,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18808,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":18809,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":18810,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":18811,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":18812,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18813,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":18814,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nchar *tapework_seraphism = 0;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmprkiONC_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&diethylacetal_devels,\"1197\",balat_vandalisms);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(tapework_seraphism) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tapework_seraphism) + 1));\nstonesoupData->file2,\nstonesoupData->file1,\nstonesoup_printf(\"Error parsing input.\\n\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmprkiONC_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&diethylacetal_devels,\"1197\",balat_vandalisms);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(tapework_seraphism) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tapework_seraphism) + 1));\nstonesoup_printf(\"Error parsing input.\\n\");\n \n","target":0}
{"idx":18815,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":18816,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":18817,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18818,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":18819,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":18820,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":18821,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18822,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":18823,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\nsvn_error_t *svn_err__temp = svn_mutex__unlock(svn_mutex__m,get_xlate_handle_node_internal(ret,topage,frompage,userdata_key,pool));\nsvn_error_t *svn_err__temp = get_xlate_handle_node(&node,SVN_APR_UTF8_CHARSET,frompage,convset_key,pool);\nsvn_error_t *svn_err__temp = svn_mutex__unlock(svn_mutex__m,get_xlate_handle_node_internal(ret,topage,frompage,userdata_key,pool));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\nexclusion_franca(privities_lalophobia,scrawly_overriding);\nexclusion_franca(agronomically_scevor,willendorf_butles);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18824,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(aulder_preinspector) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, aulder_preinspector);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18825,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\nsvn_error_t *svn_err__temp = svn_mutex__unlock(svn_mutex__m,get_xlate_handle_node_internal(ret,topage,frompage,userdata_key,pool));\nsvn_error_t *svn_err__temp = get_xlate_handle_node(&node,SVN_APR_UTF8_CHARSET,frompage,convset_key,pool);\nsvn_error_t *svn_err__temp = svn_mutex__unlock(svn_mutex__m,get_xlate_handle_node_internal(ret,topage,frompage,userdata_key,pool));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\nexclusion_franca(privities_lalophobia,scrawly_overriding);\nexclusion_franca(agronomically_scevor,willendorf_butles);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18826,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *loners_jago;;\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\ntopiwala_ginkgo = loners_jago;\nfamose_propheticality[5] = topiwala_ginkgo;\nworshipworth_unshrined[1] = 5;\nscrawly_overriding =  *(famose_propheticality + worshipworth_unshrined[1]);\nexclusion_franca(privities_lalophobia,scrawly_overriding);\nexclusion_franca(agronomically_scevor,willendorf_butles);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\ntopiwala_ginkgo = loners_jago;\nfamose_propheticality[5] = topiwala_ginkgo;\nscrawly_overriding =  *(famose_propheticality + worshipworth_unshrined[1]);\nexclusion_franca(privities_lalophobia,scrawly_overriding);\nvoid exclusion_franca(int agronomically_scevor,vicaire_nondeflective willendorf_butles)\nfree(((char *)willendorf_butles));\n \n","target":0}
{"idx":18827,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18828,"code":"fseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *loners_jago;;\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\ntopiwala_ginkgo = loners_jago;\nfamose_propheticality[5] = topiwala_ginkgo;\nworshipworth_unshrined[1] = 5;\nscrawly_overriding =  *(famose_propheticality + worshipworth_unshrined[1]);\nexclusion_franca(privities_lalophobia,scrawly_overriding);\nchar *stonesoup_extension = \".lck\";\nexclusion_franca(agronomically_scevor,willendorf_butles);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(aulder_preinspector) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, aulder_preinspector);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid exclusion_franca(int agronomically_scevor,vicaire_nondeflective willendorf_butles)\naulder_preinspector = ((char *)willendorf_butles);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(aulder_preinspector) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, aulder_preinspector);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&loners_jago,\"FALSTAFF_UNLUDICROUS\");\ntopiwala_ginkgo = loners_jago;\nfamose_propheticality[5] = topiwala_ginkgo;\nscrawly_overriding =  *(famose_propheticality + worshipworth_unshrined[1]);\nexclusion_franca(privities_lalophobia,scrawly_overriding);\n \n","target":1}
{"idx":18829,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18830,"code":"laccic_aquatintist = ((char *)atherosclerotic_calotypic);\ntracepoint(stonesoup_trace, weakness_start, \"CWE414\", \"A\", \"Missing Lock Check\");\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data_size = strlen(stonesoupData->data);\nstonesoup_printf(\"Error creating thread 0.\");\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18831,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18832,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpEemzEt_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (atherosclerotic_calotypic != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18833,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpEemzEt_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (atherosclerotic_calotypic != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18834,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":18835,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":18836,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":18837,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":18838,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":18839,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":18840,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":18841,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18842,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":18843,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":18844,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18845,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":18846,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18847,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpEemzEt_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&atherosclerotic_calotypic,\"WIREDRAWN_APPERT\");\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(laccic_aquatintist) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(laccic_aquatintist) + 1));\nstonesoupData->file2,\nstonesoupData->file1,\nstonesoup_printf(\"Error parsing input.\\n\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpEemzEt_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&atherosclerotic_calotypic,\"WIREDRAWN_APPERT\");\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(laccic_aquatintist) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(laccic_aquatintist) + 1));\nstonesoup_printf(\"Error parsing input.\\n\");\n \n","target":0}
{"idx":18848,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18849,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":18850,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(haplomous_pervades) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, haplomous_pervades);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18851,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *balneology_hukbalahap);\n \n","target":0}
{"idx":18852,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18853,"code":"char *stonesoup_extension = \".lck\";\nhaplomous_pervades = ((char *)dispraised_rectifiable . airfields_angiokeratoma);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(haplomous_pervades) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(haplomous_pervades) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, haplomous_pervades);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18854,"code":"free(((char *)dispraised_rectifiable . airfields_angiokeratoma));\n \n","target":0}
{"idx":18855,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18856,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18857,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18858,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18859,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18860,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18861,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nint felix_informatory = 141;\nchar *desmothoraca_vadodara;;\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nscientiarum_pandermite = 5;\nenchantingness_parchmentlike = &scientiarum_pandermite;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nnecroscopy_panhellenic = ((char *)((char *)semioptimistic_zoophilous));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nif ((sscanf(necroscopy_panhellenic, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nnecroscopy_panhellenic = ((char *)((char *)semioptimistic_zoophilous));\nstonesoupData->data = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":18862,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18863,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint felix_informatory = 141;\nchar *desmothoraca_vadodara;;\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nscientiarum_pandermite = 5;\nenchantingness_parchmentlike = &scientiarum_pandermite;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nfree(((char *)((char *)semioptimistic_zoophilous)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nfree(((char *)((char *)semioptimistic_zoophilous)));\n \n","target":0}
{"idx":18864,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint felix_informatory = 141;\nchar *desmothoraca_vadodara;;\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nscientiarum_pandermite = 5;\nenchantingness_parchmentlike = &scientiarum_pandermite;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nnecroscopy_panhellenic = ((char *)((char *)semioptimistic_zoophilous));\nstonesoupData->data = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nif ((sscanf(necroscopy_panhellenic, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&desmothoraca_vadodara,\"3632\",felix_informatory);\nstealthiest_mesentoderm = ((void *)desmothoraca_vadodara);\nunakite_outrail[5] = stealthiest_mesentoderm;\nsemioptimistic_zoophilous =  *(unakite_outrail +  *enchantingness_parchmentlike);\nnecroscopy_panhellenic = ((char *)((char *)semioptimistic_zoophilous));\nstonesoupData->data = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(necroscopy_panhellenic) + 1));\nif ((sscanf(necroscopy_panhellenic, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18865,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18866,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\nset_time_seconds(&fd -> del_dis_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_delta_time_dis(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nengorges_aval(chapmen_unroyally,helix_tolstoy);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18867,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nset_time_seconds(&fd -> del_dis_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_delta_time_dis(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nengorges_aval(chapmen_unroyally,helix_tolstoy);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18868,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(nonofficial_adenocancroid) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, nonofficial_adenocancroid);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18869,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18870,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *philomel_meaningness;;\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\natrenne_melburnian = ((void *)philomel_meaningness);\ndegumming_slavonic = 1;\nhonored_granddads = &atrenne_melburnian;\ninfirmatory_solano = ((void **)(((unsigned long )honored_granddads) * degumming_slavonic * degumming_slavonic)) + 5;\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nengorges_aval(chapmen_unroyally,helix_tolstoy);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\natrenne_melburnian = ((void *)philomel_meaningness);\nhonored_granddads = &atrenne_melburnian;\ninfirmatory_solano = ((void **)(((unsigned long )honored_granddads) * degumming_slavonic * degumming_slavonic)) + 5;\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nvoid engorges_aval(int chapmen_unroyally,void **helix_tolstoy)\nfree(((char *)((char *)( *(helix_tolstoy - 5)))));\n \n","target":0}
{"idx":18871,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18872,"code":"stonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *philomel_meaningness;;\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\natrenne_melburnian = ((void *)philomel_meaningness);\ndegumming_slavonic = 1;\nhonored_granddads = &atrenne_melburnian;\ninfirmatory_solano = ((void **)(((unsigned long )honored_granddads) * degumming_slavonic * degumming_slavonic)) + 5;\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\nchar *stonesoup_extension = \".lck\";\nengorges_aval(chapmen_unroyally,helix_tolstoy);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(nonofficial_adenocancroid) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, nonofficial_adenocancroid);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid engorges_aval(int chapmen_unroyally,void **helix_tolstoy)\nnonofficial_adenocancroid = ((char *)((char *)( *(helix_tolstoy - 5))));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(nonofficial_adenocancroid) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, nonofficial_adenocancroid);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&philomel_meaningness,\"GRAYBACK_HERCYNIAN\");\natrenne_melburnian = ((void *)philomel_meaningness);\nhonored_granddads = &atrenne_melburnian;\ninfirmatory_solano = ((void **)(((unsigned long )honored_granddads) * degumming_slavonic * degumming_slavonic)) + 5;\nengorges_aval(promontories_parliamentarian,infirmatory_solano);\n \n","target":1}
{"idx":18873,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nbrigitta_redecimate(overelaborately_retrencher);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":18874,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":1}
{"idx":18875,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nbrigitta_redecimate(overelaborately_retrencher);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":18876,"code":"stonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18877,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18878,"code":"magdalenne_metanotum = getenv(\"AORNIS_LANDLESSNESS\");\noverelaborately_retrencher = ((void *)magdalenne_metanotum);\nbrigitta_redecimate(overelaborately_retrencher);\nstonesoupData->data = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid brigitta_redecimate(void *const corny_provability)\ncelestine_nbc = ((char *)((char *)((void *)corny_provability)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nif ((sscanf(celestine_nbc, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18879,"code":"void *delNonAlpha (void *data) {\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18880,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18881,"code":"magdalenne_metanotum = getenv(\"AORNIS_LANDLESSNESS\");\noverelaborately_retrencher = ((void *)magdalenne_metanotum);\nbrigitta_redecimate(overelaborately_retrencher);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nif ((sscanf(celestine_nbc, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid brigitta_redecimate(void *const corny_provability)\ncelestine_nbc = ((char *)((char *)((void *)corny_provability)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(celestine_nbc) + 1));\nfree(stonesoupData);\n \n","target":1}
{"idx":18882,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18883,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nscriptural_tagetol(banditry_pochade,hystazarin_heterothermic);\nscriptural_tagetol(rougher_bunnymouth,lacrosser_pipages);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18884,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(zaparan_achaemenes) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, zaparan_achaemenes);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18885,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nscriptural_tagetol(banditry_pochade,hystazarin_heterothermic);\nscriptural_tagetol(rougher_bunnymouth,lacrosser_pipages);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18886,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18887,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18888,"code":"galeage_bhadgaon = getenv(\"BALANIFEROUS_SOAPY\");\nhystazarin_heterothermic = galeage_bhadgaon;\nscriptural_tagetol(banditry_pochade,hystazarin_heterothermic);\nchar *stonesoup_extension = \".lck\";\nscriptural_tagetol(rougher_bunnymouth,lacrosser_pipages);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(zaparan_achaemenes) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, zaparan_achaemenes);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid scriptural_tagetol(int rougher_bunnymouth,hedwiga_arjuna lacrosser_pipages)\nzaparan_achaemenes = ((char *)lacrosser_pipages);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(zaparan_achaemenes) +\nstrcat(stonesoup_thelockfile, zaparan_achaemenes);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18889,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18890,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(bill_churchlike) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, bill_churchlike);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18891,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18892,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18893,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":18894,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18895,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":18896,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":18897,"code":"char *stonesoup_extension = \".lck\";\nnimrods_sordamente = getenv(\"PARISTHMION_MISFORMS\");\nbill_churchlike = ((char *)nimrods_sordamente);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(bill_churchlike) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(bill_churchlike) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, bill_churchlike);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18898,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\n \n","target":0}
{"idx":18899,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nsub2video_heartbeat(ist,pkt . pts);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\n \n","target":0}
{"idx":18900,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(woodwaxes_oxydactyl) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, woodwaxes_oxydactyl);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18901,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18902,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18903,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nint scaphism_torrefies = 18;\nchar *moire_dandy;\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nregerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))] = moire_dandy;\nbillroth_tonbridge = regerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))];\nwoodwaxes_oxydactyl = ((char *)billroth_tonbridge);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(woodwaxes_oxydactyl) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, woodwaxes_oxydactyl);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nregerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))] = moire_dandy;\nbillroth_tonbridge = regerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))];\nwoodwaxes_oxydactyl = ((char *)billroth_tonbridge);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(woodwaxes_oxydactyl) +\nstrcat(stonesoup_thelockfile, woodwaxes_oxydactyl);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18904,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint scaphism_torrefies = 18;\nchar *moire_dandy;\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nregerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))] = moire_dandy;\nbillroth_tonbridge = regerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)billroth_tonbridge));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&moire_dandy,\"4140\",scaphism_torrefies);\nregerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))] = moire_dandy;\nbillroth_tonbridge = regerminatively_anion[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *realism_repel)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)billroth_tonbridge));\n \n","target":0}
{"idx":18905,"code":"stonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18906,"code":"int engirdling_sades = 0;\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmispractised_nonliberalism = ((char *)(malloc(engirdling_sades + 1)));\nmemset(mispractised_nonliberalism,0,engirdling_sades + 1);\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(unawares_stookers, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(nonofficeholder_odontoma - 5) != 0)\nfree(((char *)( *(nonofficeholder_odontoma - 5))));\n \n","target":0}
{"idx":18907,"code":"truct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18908,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *divesting_subiaco)\nif (divesting_subiaco != 0) {;\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmispractised_nonliberalism = ((char *)(malloc(engirdling_sades + 1)));\nif (mispractised_nonliberalism == 0) {\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\nif (divesting_subiaco != 0)\nfree(((char *)divesting_subiaco));\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(unawares_stookers, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(nonofficeholder_odontoma - 5) != 0)\nfree(((char *)( *(nonofficeholder_odontoma - 5))));\n \n","target":0}
{"idx":18909,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18910,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *divesting_subiaco)\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\nfree(((char *)divesting_subiaco));\n \n","target":0}
{"idx":18911,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18912,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmispractised_nonliberalism = ((char *)(malloc(engirdling_sades + 1)));\nmemset(mispractised_nonliberalism,0,engirdling_sades + 1);\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nfree(((char *)( *(nonofficeholder_odontoma - 5))));\nvoid stonesoup_handle_taint(char *divesting_subiaco)\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nif ( *(nonofficeholder_odontoma - 5) != 0)\nfree(((char *)( *(nonofficeholder_odontoma - 5))));\n \n","target":0}
{"idx":18913,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct stonesoup_data *stonesoupData;\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmispractised_nonliberalism = ((char *)(malloc(engirdling_sades + 1)));\nmemset(mispractised_nonliberalism,0,engirdling_sades + 1);\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nif ((sscanf(unawares_stookers, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *divesting_subiaco)\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":18914,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmispractised_nonliberalism = ((char *)(malloc(engirdling_sades + 1)));\nmemset(mispractised_nonliberalism,0,engirdling_sades + 1);\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nif ((sscanf(unawares_stookers, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *divesting_subiaco)\nengirdling_sades = ((int )(strlen(divesting_subiaco)));\nmemcpy(mispractised_nonliberalism,divesting_subiaco,engirdling_sades);\ntransit_cochleary = &mispractised_nonliberalism;\nnonofficeholder_odontoma = transit_cochleary + 5;\nunawares_stookers = ((char *)( *(nonofficeholder_odontoma - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unawares_stookers) + 1));\nif ((sscanf(unawares_stookers, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18915,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18916,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18917,"code":"monotron_scantle = ((int )(strlen(omagra_daffodil)));\nparfumeur_tibetan = ((char *)(malloc(monotron_scantle + 1)));\nif (parfumeur_tibetan == 0) {\nmemset(parfumeur_tibetan,0,monotron_scantle + 1);\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\nvoid aouads_brian(int reaware_comparability,char *selenous_grit)\ntauting_ungreased = ((char *)selenous_grit);\nstonesoupData->data = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(tauting_ungreased, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif (selenous_grit != 0)\nfree(((char *)selenous_grit));\n \n","target":0}
{"idx":18918,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\naouads_brian(reaware_comparability,selenous_grit);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18919,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\naouads_brian(reaware_comparability,selenous_grit);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18920,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *omagra_daffodil;;\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nfree(((char *)omagra_daffodil));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nfree(((char *)omagra_daffodil));\n \n","target":0}
{"idx":18921,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *omagra_daffodil;;\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nparfumeur_tibetan = ((char *)(malloc(monotron_scantle + 1)));\nmemset(parfumeur_tibetan,0,monotron_scantle + 1);\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nflubs_stirpes = 5;\ncoryphasia_bromeikon = &flubs_stirpes;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\naouads_brian(reaware_comparability,selenous_grit);\nvoid aouads_brian(int reaware_comparability,char *selenous_grit)\nfree(((char *)selenous_grit));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\n \n","target":0}
{"idx":18922,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18923,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18924,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *omagra_daffodil;;\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nparfumeur_tibetan = ((char *)(malloc(monotron_scantle + 1)));\nmemset(parfumeur_tibetan,0,monotron_scantle + 1);\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nflubs_stirpes = 5;\ncoryphasia_bromeikon = &flubs_stirpes;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\nstruct stonesoup_data *stonesoupData;\naouads_brian(reaware_comparability,selenous_grit);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nif ((sscanf(tauting_ungreased, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid aouads_brian(int reaware_comparability,char *selenous_grit)\ntauting_ungreased = ((char *)selenous_grit);\nstonesoupData->data = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\n \n","target":0}
{"idx":18925,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *omagra_daffodil;;\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nparfumeur_tibetan = ((char *)(malloc(monotron_scantle + 1)));\nmemset(parfumeur_tibetan,0,monotron_scantle + 1);\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nflubs_stirpes = 5;\ncoryphasia_bromeikon = &flubs_stirpes;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\naouads_brian(reaware_comparability,selenous_grit);\nvoid aouads_brian(int reaware_comparability,char *selenous_grit)\ntauting_ungreased = ((char *)selenous_grit);\nstonesoupData->data = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tauting_ungreased) + 1));\nif ((sscanf(tauting_ungreased, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&omagra_daffodil,\"MOSS_TRUNDLEHEAD\");\nmonotron_scantle = ((int )(strlen(omagra_daffodil)));\nmemcpy(parfumeur_tibetan,omagra_daffodil,monotron_scantle);\nacademize_unambition[5] = parfumeur_tibetan;\nsemiporcelain_variedness =  *(academize_unambition +  *coryphasia_bromeikon);\naouads_brian(depickle_proalliance,semiporcelain_variedness);\n \n","target":0}
{"idx":18926,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18927,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18928,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18929,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18930,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18931,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18932,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18933,"code":"void sortably_ringbarking(wurtzitic_trainer istria_flakes)\npepin_quinsies(istria_flakes);\nvoid pepin_quinsies(wurtzitic_trainer functioned_wampished)\nstruct stonesoup_data *stonesoupData;\nspodomancy_packall = ((char *)functioned_wampished);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nif ((sscanf(spodomancy_packall, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18934,"code":"void sortably_ringbarking(wurtzitic_trainer istria_flakes)\npepin_quinsies(istria_flakes);\nvoid pepin_quinsies(wurtzitic_trainer functioned_wampished)\nspodomancy_packall = ((char *)functioned_wampished);\nstonesoupData->data = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(spodomancy_packall) + 1));\nif ((sscanf(spodomancy_packall, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18935,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18936,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18937,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18938,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18939,"code":"void stonesoup_handle_taint(char *avenaceous_ductings)\nif (avenaceous_ductings != 0) {;\nunslipping_oltunna = ((char *)avenaceous_ductings);\ntracepoint(stonesoup_trace, weakness_start, \"CWE414\", \"A\", \"Missing Lock Check\");\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data_size = strlen(stonesoupData->data);\nstonesoup_printf(\"Error creating thread 0.\");\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18940,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":18941,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":18942,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":18943,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":18944,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18945,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":18946,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":18947,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":18948,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":18949,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":18950,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":18951,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18952,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":18953,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18954,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":18955,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18956,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18957,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18958,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18959,"code":"void gaziantep_myxinoidei(int whitefieldite_kiwach,char **unheuristic_undesirably)\nunderthief_bencher = ((char *)unheuristic_undesirably[41]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nif ((sscanf(underthief_bencher, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18960,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18961,"code":"void gaziantep_myxinoidei(int whitefieldite_kiwach,char **unheuristic_undesirably)\nif (unheuristic_undesirably[41] != 0)\nfree(((char *)unheuristic_undesirably[41]));\n \n","target":0}
{"idx":18962,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18963,"code":"void gaziantep_myxinoidei(int whitefieldite_kiwach,char **unheuristic_undesirably)\nstruct stonesoup_data *stonesoupData;\nunderthief_bencher = ((char *)unheuristic_undesirably[41]);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(underthief_bencher) + 1));\nif ((sscanf(underthief_bencher, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18964,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *coraciiformes_rajasthan)\nif (coraciiformes_rajasthan != 0) {;\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nenhappy_milanville = ((char *)(malloc(formalist_berascal + 1)));\nif (enhappy_milanville == 0) {\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nif (coraciiformes_rajasthan != 0)\nfree(((char *)coraciiformes_rajasthan));\nunenrichable_nonevasively = &enhappy_milanville;\nmuddily_smyrniote = ((char *)( *unenrichable_nonevasively));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, muddily_smyrniote);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *unenrichable_nonevasively != 0)\nfree(((char *)( *unenrichable_nonevasively)));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18965,"code":"formalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nenhappy_milanville = ((char *)(malloc(formalist_berascal + 1)));\nmemset(enhappy_milanville,0,formalist_berascal + 1);\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nunenrichable_nonevasively = &enhappy_milanville;\nmuddily_smyrniote = ((char *)( *unenrichable_nonevasively));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, muddily_smyrniote);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *unenrichable_nonevasively != 0)\nfree(((char *)( *unenrichable_nonevasively)));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18966,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, muddily_smyrniote);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18967,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nenhappy_milanville = ((char *)(malloc(formalist_berascal + 1)));\nmemset(enhappy_milanville,0,formalist_berascal + 1);\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nunenrichable_nonevasively = &enhappy_milanville;\nfree(((char *)( *unenrichable_nonevasively)));\nvoid stonesoup_handle_taint(char *coraciiformes_rajasthan)\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nunenrichable_nonevasively = &enhappy_milanville;\nfree(((char *)( *unenrichable_nonevasively)));\n \n","target":0}
{"idx":18968,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *coraciiformes_rajasthan)\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nfree(((char *)coraciiformes_rajasthan));\n \n","target":0}
{"idx":18969,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nchar *stonesoup_extension = \".lck\";\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nenhappy_milanville = ((char *)(malloc(formalist_berascal + 1)));\nmemset(enhappy_milanville,0,formalist_berascal + 1);\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nunenrichable_nonevasively = &enhappy_milanville;\nmuddily_smyrniote = ((char *)( *unenrichable_nonevasively));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, muddily_smyrniote);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_handle_taint(char *coraciiformes_rajasthan)\nformalist_berascal = ((int )(strlen(coraciiformes_rajasthan)));\nmemcpy(enhappy_milanville,coraciiformes_rajasthan,formalist_berascal);\nunenrichable_nonevasively = &enhappy_milanville;\nmuddily_smyrniote = ((char *)( *unenrichable_nonevasively));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(muddily_smyrniote) +\nstrcat(stonesoup_thelockfile, muddily_smyrniote);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":18970,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18971,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18972,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *stenotaphrum_uredinologist);\n \n","target":0}
{"idx":18973,"code":"struct stonesoup_data *stonesoupData;\nrasant_antiegotistic = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *neatherd_sorptions))))))))))))))))))))))))))))))))))))))))))))))))))[63]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nif ((sscanf(rasant_antiegotistic, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18974,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18975,"code":"struct stonesoup_data *stonesoupData;\nrasant_antiegotistic = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *neatherd_sorptions))))))))))))))))))))))))))))))))))))))))))))))))))[63]);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(rasant_antiegotistic) + 1));\nif ((sscanf(rasant_antiegotistic, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":18976,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18977,"code":"void dudler_beshouted(char *(**************************************************atbara_ungodly)[67])\nshertok_abater(atbara_ungodly);\nvoid shertok_abater(char *(**************************************************neatherd_sorptions)[67])\nfree(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *neatherd_sorptions))))))))))))))))))))))))))))))))))))))))))))))))))[63]));\n \n","target":0}
{"idx":18978,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18979,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nsvn_stringbuf_ensure(str,total_len);\nmembuf_ensure(&mem,&str -> blocksize,minimum_size,str -> pool);\nsvn_stringbuf_ensure(str,total_len);\nsvn_stringbuf_appendbytes(new_str,string,strlen(string));\nsvn_stringbuf_appendbytes(new_str,separator,sep_len);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nstonesoup_printf(\"Made it to the critical section\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nsvn_stringbuf_ensure(str,total_len);\nmembuf_ensure(&mem,&str -> blocksize,minimum_size,str -> pool);\nsvn_stringbuf_ensure(str,total_len);\nsvn_stringbuf_appendbytes(new_str,separator,sep_len);\nsvn_stringbuf_appendbytes(new_str,string,strlen(string));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18980,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nsvn_stringbuf_ensure(str,total_len);\nmembuf_ensure(&mem,&str -> blocksize,minimum_size,str -> pool);\nsvn_stringbuf_ensure(str,total_len);\nsvn_stringbuf_appendbytes(new_str,string,strlen(string));\nsvn_stringbuf_appendbytes(new_str,separator,sep_len);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18981,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(psychiatrize_darya) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, psychiatrize_darya);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18982,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18983,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nunion quaquaversally_repletion horticultor_limbered;\nint frolics_phytometry = 18;\nchar *fadged_preendorser;\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nhorticultor_limbered . subsidizes_spatola = fadged_preendorser;\nmultifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))] = horticultor_limbered;\nhondurans_craftsperson = multifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))];\npsychiatrize_darya = ((char *)hondurans_craftsperson . subsidizes_spatola);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(psychiatrize_darya) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(psychiatrize_darya) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, psychiatrize_darya);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nhorticultor_limbered . subsidizes_spatola = fadged_preendorser;\nhondurans_craftsperson = multifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))];\npsychiatrize_darya = ((char *)hondurans_craftsperson . subsidizes_spatola);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(psychiatrize_darya) +\nstrcat(stonesoup_thelockfile, psychiatrize_darya);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":18984,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18985,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nunion quaquaversally_repletion horticultor_limbered;\nint frolics_phytometry = 18;\nchar *fadged_preendorser;\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nhorticultor_limbered . subsidizes_spatola = fadged_preendorser;\nmultifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))] = horticultor_limbered;\nhondurans_craftsperson = multifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)hondurans_craftsperson . subsidizes_spatola));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&fadged_preendorser,\"3696\",frolics_phytometry);\nhorticultor_limbered . subsidizes_spatola = fadged_preendorser;\nhondurans_craftsperson = multifoliate_unrabbinic[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *vocification_toledoan)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)hondurans_craftsperson . subsidizes_spatola));\n \n","target":0}
{"idx":18986,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(morelos_entrechats) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, morelos_entrechats);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18987,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *intrenching_huntswoman);\n \n","target":0}
{"idx":18988,"code":"char *stonesoup_extension = \".lck\";\nmorelos_entrechats = ((char *)cryptographist_refertilize . cymtia_falstaff);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(morelos_entrechats) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(morelos_entrechats) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, morelos_entrechats);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":18989,"code":"void preterience_pyrimidin(union parcellization_unlaw cryptographist_refertilize)\nif (cryptographist_refertilize . cymtia_falstaff != 0)\nfree(((char *)cryptographist_refertilize . cymtia_falstaff));\n \n","target":0}
{"idx":18990,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":18991,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nstridulation_secam(tads_palafitte);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18992,"code":"ze_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nstridulation_secam(tads_palafitte);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":18993,"code":"void *toCap (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18994,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":18995,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":18996,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":18997,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":18998,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":18999,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint originality_interplaying = 141;\nchar *jehiel_snow;;\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\nvoid stridulation_secam(char **dendroica_meissonier)\nodessa_mailed = ((char *)dendroica_meissonier[23]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nif ((sscanf(odessa_mailed, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\n \n","target":0}
{"idx":19000,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint originality_interplaying = 141;\nchar *jehiel_snow;;\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nif ((sscanf(odessa_mailed, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stridulation_secam(char **dendroica_meissonier)\nodessa_mailed = ((char *)dendroica_meissonier[23]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(odessa_mailed) + 1));\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\n \n","target":0}
{"idx":19001,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint originality_interplaying = 141;\nchar *jehiel_snow;;\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\nvoid stridulation_secam(char **dendroica_meissonier)\nfree(((char *)dendroica_meissonier[23]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&jehiel_snow,\"2663\",originality_interplaying);\nauriculariales_veridically[23] = jehiel_snow;\ntads_palafitte = auriculariales_veridically;\nstridulation_secam(tads_palafitte);\n \n","target":0}
{"idx":19002,"code":"guafo_presidy = getenv(\"SHUNPIKED_BIRDFARM\");\nif (guafo_presidy != 0) {;\neurytopicity_shea = ((char *)guafo_presidy);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(eurytopicity_shea) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nneed to wait for it to be released. *\/\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nstonesoup_printf(\"Made it to the critical section\\n\");\nif (stonesoup_fd != -1) {\nunlink(stonesoup_thelockfile);\n \n","target":0}
{"idx":19003,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n}\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19004,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19005,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19006,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19007,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19008,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19009,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19010,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19011,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19012,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19013,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19014,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19015,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19016,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19017,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19018,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19019,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(plumville_sere) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, plumville_sere);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19020,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19021,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nint exolution_underogatory = 18;\nchar *babine_circumboreal;\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nplumville_sere = ((char *)babine_circumboreal);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(plumville_sere) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(plumville_sere) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, plumville_sere);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nplumville_sere = ((char *)babine_circumboreal);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(plumville_sere) +\nstrcat(stonesoup_thelockfile, plumville_sere);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":19022,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19023,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19024,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19025,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19026,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint exolution_underogatory = 18;\nchar *babine_circumboreal;\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nfree(((char *)babine_circumboreal));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&babine_circumboreal,\"7238\",exolution_underogatory);\nfree(((char *)babine_circumboreal));\n \n","target":0}
{"idx":19027,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19028,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19029,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19030,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19031,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19032,"code":"void pims_unsomnolent(char *const orgamy_nonabusively)\nKRISTINAUX_IODOTHYRIN(orgamy_nonabusively);\nvoid watertightness_crank(char *metaphytic_pong)\nstruct stonesoup_data *stonesoupData;\nempodium_tangibility = ((char *)((char *)metaphytic_pong));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nif ((sscanf(empodium_tangibility, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19033,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19034,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19035,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19036,"code":"void pims_unsomnolent(char *const orgamy_nonabusively)\nKRISTINAUX_IODOTHYRIN(orgamy_nonabusively);\nvoid watertightness_crank(char *metaphytic_pong)\nempodium_tangibility = ((char *)((char *)metaphytic_pong));\nstonesoupData->data = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(empodium_tangibility) + 1));\nif ((sscanf(empodium_tangibility, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19037,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19038,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19039,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19040,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19041,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19042,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19043,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint rememberers_bepierce = 141;\nchar *uneagerness_semicoriaceous;;\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nwagener_pronger = 5;\nsynergistically_demiplacate = &wagener_pronger;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\niyar_purposeless = ((char *)foxfeet_amtorg[1]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nif ((sscanf(iyar_purposeless, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\niyar_purposeless = ((char *)foxfeet_amtorg[1]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nif ((sscanf(iyar_purposeless, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19044,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint rememberers_bepierce = 141;\nchar *uneagerness_semicoriaceous;;\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nwagener_pronger = 5;\nsynergistically_demiplacate = &wagener_pronger;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\nfree(((char *)foxfeet_amtorg[1]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\nfree(((char *)foxfeet_amtorg[1]));\n \n","target":0}
{"idx":19045,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nint rememberers_bepierce = 141;\nchar *uneagerness_semicoriaceous;;\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nwagener_pronger = 5;\nsynergistically_demiplacate = &wagener_pronger;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\niyar_purposeless = ((char *)foxfeet_amtorg[1]);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nif ((sscanf(iyar_purposeless, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&uneagerness_semicoriaceous,\"9199\",rememberers_bepierce);\ntawneys_traumas[1] = uneagerness_semicoriaceous;\nexonumia_supererogative[5] = tawneys_traumas;\nfoxfeet_amtorg =  *(exonumia_supererogative +  *synergistically_demiplacate);\niyar_purposeless = ((char *)foxfeet_amtorg[1]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(iyar_purposeless) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19046,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19047,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19048,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&soppier_topiwala,\"7415\",substantiable_culpon);\nevenlong_carburator = dealt_volva(jewish_kasha);\ncoresign_adamantine(pourers_fuse,evenlong_carburator);\ncoresign_adamantine(pantagruelic_bedlamise,jobi_unequitableness);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19049,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&soppier_topiwala,\"7415\",substantiable_culpon);\nevenlong_carburator = dealt_volva(jewish_kasha);\ncoresign_adamantine(pourers_fuse,evenlong_carburator);\ncoresign_adamantine(pantagruelic_bedlamise,jobi_unequitableness);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19050,"code":"stonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(malinois_preobligation) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, malinois_preobligation);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19051,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19052,"code":"evenlong_carburator = dealt_volva(jewish_kasha);\ncoresign_adamantine(pourers_fuse,evenlong_carburator);\nchar *stonesoup_extension = \".lck\";\ncoresign_adamantine(pantagruelic_bedlamise,jobi_unequitableness);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(malinois_preobligation) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, malinois_preobligation);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid coresign_adamantine(int pantagruelic_bedlamise,char **jobi_unequitableness)\nmalinois_preobligation = ((char *)jobi_unequitableness[55]);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(malinois_preobligation) +\nstrcat(stonesoup_thelockfile, malinois_preobligation);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19053,"code":"evenlong_carburator = dealt_volva(jewish_kasha);\ncoresign_adamantine(pourers_fuse,evenlong_carburator);\ncoresign_adamantine(pantagruelic_bedlamise,jobi_unequitableness);\nvoid coresign_adamantine(int pantagruelic_bedlamise,char **jobi_unequitableness)\nfree(((char *)jobi_unequitableness[55]));\n \n","target":0}
{"idx":19054,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19055,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nset_time_seconds(&fd -> del_dis_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_delta_time_dis(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19056,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nset_time_seconds(&fd -> del_dis_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_delta_time_dis(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19057,"code":"chloridized_millstream = ((char *)blepharotomy_sirenomelus);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chloridized_millstream) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, chloridized_millstream);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19058,"code":"char *stonesoup_extension = \".lck\";\nreliquian_swops = getenv(\"DENSITY_ZABOGLIONE\");\nblepharotomy_sirenomelus = reliquian_swops;\nchloridized_millstream = ((char *)blepharotomy_sirenomelus);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chloridized_millstream) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(chloridized_millstream) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, chloridized_millstream);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19059,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19060,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19061,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19062,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *claramae_tailwise)\nif (claramae_tailwise != 0) {;\njurassic_nondecaying . cooke_hemiscotosis = claramae_tailwise;\nunconforming_serbonian = ((char *)jurassic_nondecaying . cooke_hemiscotosis);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(unconforming_serbonian, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif (jurassic_nondecaying . cooke_hemiscotosis != 0)\nfree(((char *)jurassic_nondecaying . cooke_hemiscotosis));\n \n","target":0}
{"idx":19063,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19064,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *claramae_tailwise)\njurassic_nondecaying . cooke_hemiscotosis = claramae_tailwise;\nunconforming_serbonian = ((char *)jurassic_nondecaying . cooke_hemiscotosis);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nif ((sscanf(unconforming_serbonian, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19065,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *claramae_tailwise)\njurassic_nondecaying . cooke_hemiscotosis = claramae_tailwise;\nfree(((char *)jurassic_nondecaying . cooke_hemiscotosis));\n \n","target":0}
{"idx":19066,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19067,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nif ((sscanf(unconforming_serbonian, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *claramae_tailwise)\njurassic_nondecaying . cooke_hemiscotosis = claramae_tailwise;\nunconforming_serbonian = ((char *)jurassic_nondecaying . cooke_hemiscotosis);\nstonesoupData->data = malloc(sizeof(char) * (strlen(unconforming_serbonian) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19068,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19069,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19070,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *drinkery_undeflowered);\n \n","target":0}
{"idx":19071,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19072,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19073,"code":"meraree_italomania = ((char *)( *blanchi_aeger) . helodes_haff);\nstonesoupData->data = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nif ((sscanf(meraree_italomania, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19074,"code":"void subroutines_agamy(union predesirously_earwitness *blanchi_aeger)\nmeraree_italomania = ((char *)( *blanchi_aeger) . helodes_haff);\nif (( *blanchi_aeger) . helodes_haff != 0)\nfree(((char *)( *blanchi_aeger) . helodes_haff));\n \n","target":0}
{"idx":19075,"code":"struct stonesoup_data *stonesoupData;\nmeraree_italomania = ((char *)( *blanchi_aeger) . helodes_haff);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(meraree_italomania) + 1));\nif ((sscanf(meraree_italomania, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19076,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19077,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19078,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *analgesic_cote)\nif (analgesic_cote != 0) {;\nleptothrix_dirgler = ((char *)analgesic_cote);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(leptothrix_dirgler) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, leptothrix_dirgler);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif (analgesic_cote != 0)\nfree(((char *)analgesic_cote));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19079,"code":"leptothrix_dirgler = ((char *)analgesic_cote);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(leptothrix_dirgler) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, leptothrix_dirgler);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19080,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19081,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(leptothrix_dirgler) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, leptothrix_dirgler);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_handle_taint(char *analgesic_cote)\nleptothrix_dirgler = ((char *)analgesic_cote);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(leptothrix_dirgler) +\nstrcat(stonesoup_thelockfile, leptothrix_dirgler);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":19082,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19083,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *analgesic_cote)\nfree(((char *)analgesic_cote));\n \n","target":0}
{"idx":19084,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19085,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *minah_nosebags)\nif (minah_nosebags != 0) {;\nkaryenchyma_spinelessly = minah_nosebags;\nintrospectively_streps = &karyenchyma_spinelessly;\nsemiluminous_hortatively = introspectively_streps + 5;\ncherilyn_leslee = ((char *)( *(semiluminous_hortatively - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(cherilyn_leslee, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(semiluminous_hortatively - 5) != 0)\nfree(((char *)( *(semiluminous_hortatively - 5))));\n \n","target":0}
{"idx":19086,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19087,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19088,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nif ((sscanf(cherilyn_leslee, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *minah_nosebags)\nkaryenchyma_spinelessly = minah_nosebags;\nintrospectively_streps = &karyenchyma_spinelessly;\nsemiluminous_hortatively = introspectively_streps + 5;\ncherilyn_leslee = ((char *)( *(semiluminous_hortatively - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19089,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstonesoupData->data = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *minah_nosebags)\nkaryenchyma_spinelessly = minah_nosebags;\nintrospectively_streps = &karyenchyma_spinelessly;\nsemiluminous_hortatively = introspectively_streps + 5;\ncherilyn_leslee = ((char *)( *(semiluminous_hortatively - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(cherilyn_leslee) + 1));\nif ((sscanf(cherilyn_leslee, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19090,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19091,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *minah_nosebags)\nkaryenchyma_spinelessly = minah_nosebags;\nintrospectively_streps = &karyenchyma_spinelessly;\nsemiluminous_hortatively = introspectively_streps + 5;\nfree(((char *)( *(semiluminous_hortatively - 5))));\n \n","target":0}
{"idx":19092,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19093,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19094,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19095,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19096,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19097,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19098,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19099,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19100,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunion reveree_cervisia flavors_fischerite;\nchar *selenodont_punjum;;\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nentitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))] = flavors_fischerite;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nvoid unreflective_romano(union reveree_cervisia nitrobenzol_casi)\nantitonic_racemisms = ((char *)nitrobenzol_casi . sphenodon_hopper);\nstonesoupData->data = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nif ((sscanf(antitonic_racemisms, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\n \n","target":0}
{"idx":19101,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunion reveree_cervisia flavors_fischerite;\nchar *selenodont_punjum;;\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nentitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))] = flavors_fischerite;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nif ((sscanf(antitonic_racemisms, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nvoid unreflective_romano(union reveree_cervisia nitrobenzol_casi)\nantitonic_racemisms = ((char *)nitrobenzol_casi . sphenodon_hopper);\nstonesoupData->data = malloc(sizeof(char) * (strlen(antitonic_racemisms) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19102,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunion reveree_cervisia flavors_fischerite;\nchar *selenodont_punjum;;\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nentitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))] = flavors_fischerite;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\nvoid unreflective_romano(union reveree_cervisia nitrobenzol_casi)\nfree(((char *)nitrobenzol_casi . sphenodon_hopper));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&selenodont_punjum,\"OBSIDIONAL_RESORTING\");\nflavors_fischerite . sphenodon_hopper = selenodont_punjum;\nflagellant_chatino = entitle_trilinear[ *( *( *( *( *( *( *( *( *( *unchance_backgame)))))))))];\nINAPPOSITELY_SPIRITIZE(flagellant_chatino);\n \n","target":0}
{"idx":19103,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19104,"code":"priddy_sapotilla = ((char *)( *(mortorio_mixtilineal - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(priddy_sapotilla) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, priddy_sapotilla);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19105,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19106,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19107,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint library_indoors = 18;\nchar *cofermentation_pasterns;\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nincommutable_multiradicate = &cofermentation_pasterns;\nmortorio_mixtilineal = incommutable_multiradicate + 5;\nfree(((char *)( *(mortorio_mixtilineal - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nincommutable_multiradicate = &cofermentation_pasterns;\nmortorio_mixtilineal = incommutable_multiradicate + 5;\nfree(((char *)( *(mortorio_mixtilineal - 5))));\n \n","target":0}
{"idx":19108,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19109,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nint library_indoors = 18;\nchar *cofermentation_pasterns;\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nincommutable_multiradicate = &cofermentation_pasterns;\nmortorio_mixtilineal = incommutable_multiradicate + 5;\npriddy_sapotilla = ((char *)( *(mortorio_mixtilineal - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(priddy_sapotilla) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(priddy_sapotilla) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, priddy_sapotilla);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&cofermentation_pasterns,\"7536\",library_indoors);\nincommutable_multiradicate = &cofermentation_pasterns;\nmortorio_mixtilineal = incommutable_multiradicate + 5;\npriddy_sapotilla = ((char *)( *(mortorio_mixtilineal - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(priddy_sapotilla) +\nstrcat(stonesoup_thelockfile, priddy_sapotilla);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19110,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19111,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19112,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19113,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19114,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19115,"code":"void baramika_expropriable(int crossly_onagraceae,unhelming_woefuller atmosphered_beweary)\nstruct stonesoup_data *stonesoupData;\nblastemic_disedge = ((char *)atmosphered_beweary);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nif ((sscanf(blastemic_disedge, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19116,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19117,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19118,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19119,"code":"void baramika_expropriable(int crossly_onagraceae,unhelming_woefuller atmosphered_beweary)\nblastemic_disedge = ((char *)atmosphered_beweary);\nstonesoupData->data = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(blastemic_disedge) + 1));\nif ((sscanf(blastemic_disedge, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19120,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19121,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *spiels_subrogating);\n \n","target":0}
{"idx":19122,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19123,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19124,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19125,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19126,"code":"void stonesoup_handle_taint(char *spiels_subrogating)\nbeadswomen_indianan = ((void *)spiels_subrogating);\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nvoid *monocarboxylic_cyclarthrodial(void *expiry_undercooled)\nreturn expiry_undercooled;\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nfree(((char *)((char *)pomona_echinodermata)));\n \n","target":0}
{"idx":19127,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nif ((sscanf(guianan_brutely, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *spiels_subrogating)\nbeadswomen_indianan = ((void *)spiels_subrogating);\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nvoid *monocarboxylic_cyclarthrodial(void *expiry_undercooled)\nreturn expiry_undercooled;\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nguianan_brutely = ((char *)((char *)pomona_echinodermata));\nstonesoupData->data = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19128,"code":"stonesoupData->data = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *spiels_subrogating)\nbeadswomen_indianan = ((void *)spiels_subrogating);\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nvoid *monocarboxylic_cyclarthrodial(void *expiry_undercooled)\nreturn expiry_undercooled;\npomona_echinodermata = monocarboxylic_cyclarthrodial(beadswomen_indianan);\nguianan_brutely = ((char *)((char *)pomona_echinodermata));\nstonesoupData->data = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(guianan_brutely) + 1));\nif ((sscanf(guianan_brutely, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19129,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19130,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&particularised_scraper,\"INTERNES_RAMOSOPALMATE\");\ntailskid_vibromassage(1,noncogency_maneh);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19131,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&particularised_scraper,\"INTERNES_RAMOSOPALMATE\");\ntailskid_vibromassage(1,noncogency_maneh);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19132,"code":"fieldfare_ealing = ((char *)ocrea_amalgamist . cartwheels_superattendant);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(fieldfare_ealing) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, fieldfare_ealing);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19133,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19134,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19135,"code":"char *stonesoup_extension = \".lck\";\nstruct gemmated_inapropos ocrea_amalgamist = {0};\nva_list polygenesist_hypnotherapist;\n__builtin_va_start(polygenesist_hypnotherapist,ecbatana_euphyllopoda);\nocrea_amalgamist = (va_arg(polygenesist_hypnotherapist,struct gemmated_inapropos ));\nfieldfare_ealing = ((char *)ocrea_amalgamist . cartwheels_superattendant);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(fieldfare_ealing) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(fieldfare_ealing) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, fieldfare_ealing);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19136,"code":"struct gemmated_inapropos ocrea_amalgamist = {0};\nva_list polygenesist_hypnotherapist;\n__builtin_va_start(polygenesist_hypnotherapist,ecbatana_euphyllopoda);\nocrea_amalgamist = (va_arg(polygenesist_hypnotherapist,struct gemmated_inapropos ));\nfree(((char *)ocrea_amalgamist . cartwheels_superattendant));\n \n","target":0}
{"idx":19137,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19138,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19139,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19140,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19141,"code":"void *evenhandedness_underseal = 0;\npeaking_cabdriving(&evenhandedness_underseal);\nsharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))] = evenhandedness_underseal;\ncharactery_ballarat = sharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))];\ngraptolithida_repudative = ((char *)((char *)charactery_ballarat));\nstonesoupData->data = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nif ((sscanf(graptolithida_repudative, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19142,"code":"void *evenhandedness_underseal = 0;\npeaking_cabdriving(&evenhandedness_underseal);\nsharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))] = evenhandedness_underseal;\ncharactery_ballarat = sharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))];\nfree(((char *)((char *)charactery_ballarat)));\n \n","target":0}
{"idx":19143,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19144,"code":"struct stonesoup_data *stonesoupData;\nvoid *evenhandedness_underseal = 0;\npeaking_cabdriving(&evenhandedness_underseal);\nsharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))] = evenhandedness_underseal;\ncharactery_ballarat = sharrag_stookie[ *( *( *( *( *( *( *( *( *( *undeplored_medievalize)))))))))];\ngraptolithida_repudative = ((char *)((char *)charactery_ballarat));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(graptolithida_repudative) + 1));\nif ((sscanf(graptolithida_repudative, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19145,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19146,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19147,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19148,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19149,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19150,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19151,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19152,"code":"ateuchi_bacchanalias = ((int )(strlen(stomachic_yutu)));\nwashings_porcelanic = ((char *)(malloc(ateuchi_bacchanalias + 1)));\nif (washings_porcelanic == 0) {\nmemset(washings_porcelanic,0,ateuchi_bacchanalias + 1);\nmemcpy(washings_porcelanic,stomachic_yutu,ateuchi_bacchanalias);\npreliberally_ruru[5] = washings_porcelanic;\nsancy_gasconader =  *(preliberally_ruru + vasquine_suz[1]);\nif (sancy_gasconader != 0) {\npercesocine_daynet = ((char *)sancy_gasconader);\nstonesoupData->data = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(percesocine_daynet, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif (sancy_gasconader != 0)\nfree(((char *)sancy_gasconader));\n \n","target":0}
{"idx":19153,"code":"struct stonesoup_data *stonesoupData;\nstomachic_yutu = getenv(\"WATERDOG_UNWILDNESS\");\nateuchi_bacchanalias = ((int )(strlen(stomachic_yutu)));\nwashings_porcelanic = ((char *)(malloc(ateuchi_bacchanalias + 1)));\nmemset(washings_porcelanic,0,ateuchi_bacchanalias + 1);\nmemcpy(washings_porcelanic,stomachic_yutu,ateuchi_bacchanalias);\npreliberally_ruru[5] = washings_porcelanic;\nvasquine_suz[1] = 5;\nsancy_gasconader =  *(preliberally_ruru + vasquine_suz[1]);\npercesocine_daynet = ((char *)sancy_gasconader);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nif ((sscanf(percesocine_daynet, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19154,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19155,"code":"stomachic_yutu = getenv(\"WATERDOG_UNWILDNESS\");\nateuchi_bacchanalias = ((int )(strlen(stomachic_yutu)));\nwashings_porcelanic = ((char *)(malloc(ateuchi_bacchanalias + 1)));\nmemset(washings_porcelanic,0,ateuchi_bacchanalias + 1);\nmemcpy(washings_porcelanic,stomachic_yutu,ateuchi_bacchanalias);\npreliberally_ruru[5] = washings_porcelanic;\nvasquine_suz[1] = 5;\nsancy_gasconader =  *(preliberally_ruru + vasquine_suz[1]);\npercesocine_daynet = ((char *)sancy_gasconader);\nstonesoupData->data = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(percesocine_daynet) + 1));\nif ((sscanf(percesocine_daynet, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19156,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19157,"code":"stomachic_yutu = getenv(\"WATERDOG_UNWILDNESS\");\nateuchi_bacchanalias = ((int )(strlen(stomachic_yutu)));\nwashings_porcelanic = ((char *)(malloc(ateuchi_bacchanalias + 1)));\nmemset(washings_porcelanic,0,ateuchi_bacchanalias + 1);\nmemcpy(washings_porcelanic,stomachic_yutu,ateuchi_bacchanalias);\npreliberally_ruru[5] = washings_porcelanic;\nvasquine_suz[1] = 5;\nsancy_gasconader =  *(preliberally_ruru + vasquine_suz[1]);\nfree(((char *)sancy_gasconader));\n \n","target":0}
{"idx":19158,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19159,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19160,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&choreograph_albinoni,\"3857\",bassette_trailership);\nUNDEADENED_UNCONCLUSIVE(colymbion_seasnail);\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (( *chirac_derina) . rort_plupf != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19161,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&choreograph_albinoni,\"3857\",bassette_trailership);\nUNDEADENED_UNCONCLUSIVE(colymbion_seasnail);\npthread_join(stonesoup_t1, NULL);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (( *chirac_derina) . rort_plupf != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19162,"code":"void uffizi_photosantonic(struct neurism_gauziest *chirac_derina)\ncinna_llew = ((char *)( *chirac_derina) . rort_plupf);\ntracepoint(stonesoup_trace, weakness_start, \"CWE414\", \"A\", \"Missing Lock Check\");\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data_size = strlen(stonesoupData->data);\nstonesoup_printf(\"Error creating thread 0.\");\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19163,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19164,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19165,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19166,"code":"char *cinna_llew = 0;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\nstonesoupData->data = malloc(sizeof(char) * (strlen(cinna_llew) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(cinna_llew) + 1));\nstonesoupData->file2,\nstonesoupData->file1,\nstonesoup_printf(\"Error parsing input.\\n\");\n \n","target":0}
{"idx":19167,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19168,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19169,"code":"shackanite_trish = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *taotai_deadlatch)))))))))))))))))))))))))))))))))))))))))))))))))));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(shackanite_trish) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, shackanite_trish);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19170,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19171,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19172,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19173,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19174,"code":"void stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid toryistic_ancresses(char ***************************************************taotai_deadlatch)\nchar *stonesoup_extension = \".lck\";\nshackanite_trish = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *taotai_deadlatch)))))))))))))))))))))))))))))))))))))))))))))))))));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(shackanite_trish) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(shackanite_trish) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, shackanite_trish);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19175,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19176,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *supercharging_chroococcaceous)\nif (supercharging_chroococcaceous != 0) {;\nhexafluoride_ocht = &supercharging_chroococcaceous;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\nif ( *(snootfuls_precompulsion - 5) != 0) {\ntorontonian_teutonize = ((char *)( *(snootfuls_precompulsion - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(torontonian_teutonize, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(snootfuls_precompulsion - 5) != 0)\nfree(((char *)( *(snootfuls_precompulsion - 5))));\n \n","target":0}
{"idx":19177,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19178,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19179,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\ntransilluminate_slitting = 1;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\nfree(((char *)( *(snootfuls_precompulsion - 5))));\nvoid stonesoup_handle_taint(char *supercharging_chroococcaceous)\nhexafluoride_ocht = &supercharging_chroococcaceous;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\nfree(((char *)( *(snootfuls_precompulsion - 5))));\n \n","target":0}
{"idx":19180,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct stonesoup_data *stonesoupData;\ntransilluminate_slitting = 1;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\ntorontonian_teutonize = ((char *)( *(snootfuls_precompulsion - 5)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nif ((sscanf(torontonian_teutonize, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *supercharging_chroococcaceous)\nhexafluoride_ocht = &supercharging_chroococcaceous;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\ntorontonian_teutonize = ((char *)( *(snootfuls_precompulsion - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19181,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\ntransilluminate_slitting = 1;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\ntorontonian_teutonize = ((char *)( *(snootfuls_precompulsion - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nif ((sscanf(torontonian_teutonize, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *supercharging_chroococcaceous)\nhexafluoride_ocht = &supercharging_chroococcaceous;\nsnootfuls_precompulsion = ((char **)(((unsigned long )hexafluoride_ocht) * transilluminate_slitting * transilluminate_slitting)) + 5;\ntorontonian_teutonize = ((char *)( *(snootfuls_precompulsion - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(torontonian_teutonize) + 1));\nif ((sscanf(torontonian_teutonize, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19182,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19183,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19184,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19185,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19186,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19187,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19188,"code":"void nougatine_perversely(char *footing_subdivisions)\nstruct stonesoup_data *stonesoupData;\nblunderings_anhydremia = ((char *)footing_subdivisions);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nif ((sscanf(blunderings_anhydremia, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19189,"code":"void nougatine_perversely(char *footing_subdivisions)\nblunderings_anhydremia = ((char *)footing_subdivisions);\nstonesoupData->data = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(blunderings_anhydremia) + 1));\nif ((sscanf(blunderings_anhydremia, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19190,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19191,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19192,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19193,"code":"void nougatine_perversely(char *footing_subdivisions)\nif (footing_subdivisions != 0)\nfree(((char *)footing_subdivisions));\n \n","target":0}
{"idx":19194,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\noversoftness_pimola(unsinfulness_trevelyan,rile_villard);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19195,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\noversoftness_pimola(unsinfulness_trevelyan,rile_villard);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19196,"code":"havelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\npetrozavodsk_unbenumbed = ((char *)(malloc(havelock_palaeozoic + 1)));\nif (petrozavodsk_unbenumbed == 0) {\nmemset(petrozavodsk_unbenumbed,0,havelock_palaeozoic + 1);\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nunderminable_phocal = &petrozavodsk_unbenumbed;\nrentaler_wholesomely = underminable_phocal + 5;\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\nvoid oversoftness_pimola(int unsinfulness_trevelyan,char **rile_villard)\nhyperelegantly_overbrilliance = ((char *)( *(rile_villard - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hyperelegantly_overbrilliance) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, hyperelegantly_overbrilliance);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *(rile_villard - 5) != 0)\nfree(((char *)( *(rile_villard - 5))));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19197,"code":"hyperelegantly_overbrilliance = ((char *)( *(rile_villard - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hyperelegantly_overbrilliance) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, hyperelegantly_overbrilliance);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19198,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *unintimidated_schooled;;\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nfree(((char *)unintimidated_schooled));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nfree(((char *)unintimidated_schooled));\n \n","target":0}
{"idx":19199,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19200,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *unintimidated_schooled;;\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\npetrozavodsk_unbenumbed = ((char *)(malloc(havelock_palaeozoic + 1)));\nmemset(petrozavodsk_unbenumbed,0,havelock_palaeozoic + 1);\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nunderminable_phocal = &petrozavodsk_unbenumbed;\nrentaler_wholesomely = underminable_phocal + 5;\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\noversoftness_pimola(unsinfulness_trevelyan,rile_villard);\nvoid oversoftness_pimola(int unsinfulness_trevelyan,char **rile_villard)\nfree(((char *)( *(rile_villard - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nunderminable_phocal = &petrozavodsk_unbenumbed;\nrentaler_wholesomely = underminable_phocal + 5;\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\n \n","target":0}
{"idx":19201,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19202,"code":"*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *unintimidated_schooled;;\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\npetrozavodsk_unbenumbed = ((char *)(malloc(havelock_palaeozoic + 1)));\nmemset(petrozavodsk_unbenumbed,0,havelock_palaeozoic + 1);\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nunderminable_phocal = &petrozavodsk_unbenumbed;\nrentaler_wholesomely = underminable_phocal + 5;\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\nchar *stonesoup_extension = \".lck\";\noversoftness_pimola(unsinfulness_trevelyan,rile_villard);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hyperelegantly_overbrilliance) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, hyperelegantly_overbrilliance);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid oversoftness_pimola(int unsinfulness_trevelyan,char **rile_villard)\nhyperelegantly_overbrilliance = ((char *)( *(rile_villard - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hyperelegantly_overbrilliance) +\nstrcat(stonesoup_thelockfile, hyperelegantly_overbrilliance);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&unintimidated_schooled,\"SMARAGDITE_GALLOWSWARD\");\nhavelock_palaeozoic = ((int )(strlen(unintimidated_schooled)));\nmemcpy(petrozavodsk_unbenumbed,unintimidated_schooled,havelock_palaeozoic);\nunderminable_phocal = &petrozavodsk_unbenumbed;\nrentaler_wholesomely = underminable_phocal + 5;\noversoftness_pimola(sumpman_kayibanda,rentaler_wholesomely);\n \n","target":0}
{"idx":19203,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19204,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19205,"code":"gammerel_naguabo = ((char *)((char *)((void *)anthraquinonyl_fellows)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gammerel_naguabo) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gammerel_naguabo);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19206,"code":"void profitless_soinski(void *const presubmitted_dniren)\nungracious_clumsily(presubmitted_dniren);\nvoid ungracious_clumsily(void *anthraquinonyl_fellows)\nfree(((char *)((char *)((void *)anthraquinonyl_fellows))));\n \n","target":0}
{"idx":19207,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19208,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gammerel_naguabo) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gammerel_naguabo);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid profitless_soinski(void *const presubmitted_dniren)\nungracious_clumsily(presubmitted_dniren);\nvoid ungracious_clumsily(void *anthraquinonyl_fellows)\ngammerel_naguabo = ((char *)((char *)((void *)anthraquinonyl_fellows)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gammerel_naguabo) +\nstrcat(stonesoup_thelockfile, gammerel_naguabo);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19209,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19210,"code":"procellarum_isomerical = ((char *)( *(organogenist_salmonellae - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(procellarum_isomerical) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, procellarum_isomerical);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19211,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *vickie_appian)\nif (vickie_appian != 0) {;\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nglasgow_osi = ((char *)(malloc(undebatably_amphore + 1)));\nif (glasgow_osi == 0) {\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\nif (vickie_appian != 0)\nfree(((char *)vickie_appian));\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nprocellarum_isomerical = ((char *)( *(organogenist_salmonellae - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(procellarum_isomerical) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, procellarum_isomerical);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *(organogenist_salmonellae - 5) != 0)\nfree(((char *)( *(organogenist_salmonellae - 5))));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19212,"code":"undebatably_amphore = ((int )(strlen(vickie_appian)));\nglasgow_osi = ((char *)(malloc(undebatably_amphore + 1)));\nmemset(glasgow_osi,0,undebatably_amphore + 1);\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nprocellarum_isomerical = ((char *)( *(organogenist_salmonellae - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(procellarum_isomerical) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, procellarum_isomerical);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *(organogenist_salmonellae - 5) != 0)\nfree(((char *)( *(organogenist_salmonellae - 5))));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19213,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *vickie_appian)\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\nfree(((char *)vickie_appian));\n \n","target":0}
{"idx":19214,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nglasgow_osi = ((char *)(malloc(undebatably_amphore + 1)));\nmemset(glasgow_osi,0,undebatably_amphore + 1);\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nfree(((char *)( *(organogenist_salmonellae - 5))));\nvoid stonesoup_handle_taint(char *vickie_appian)\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nfree(((char *)( *(organogenist_salmonellae - 5))));\n \n","target":0}
{"idx":19215,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nchar *stonesoup_extension = \".lck\";\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nglasgow_osi = ((char *)(malloc(undebatably_amphore + 1)));\nmemset(glasgow_osi,0,undebatably_amphore + 1);\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nprocellarum_isomerical = ((char *)( *(organogenist_salmonellae - 5)));\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(procellarum_isomerical) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, procellarum_isomerical);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_handle_taint(char *vickie_appian)\nundebatably_amphore = ((int )(strlen(vickie_appian)));\nmemcpy(glasgow_osi,vickie_appian,undebatably_amphore);\noutsettler_anidian = &glasgow_osi;\norganogenist_salmonellae = outsettler_anidian + 5;\nprocellarum_isomerical = ((char *)( *(organogenist_salmonellae - 5)));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(procellarum_isomerical) +\nstrcat(stonesoup_thelockfile, procellarum_isomerical);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":19216,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nNATKA_JAYGEES(stromata_uncalumniated);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19217,"code":"sipple_apollinaris = ((char *)druggier_corrivate[48]);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(sipple_apollinaris) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, sipple_apollinaris);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19218,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nNATKA_JAYGEES(stromata_uncalumniated);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19219,"code":"stonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *laburnum_pleaded;\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nstromata_uncalumniated[48] = laburnum_pleaded;\nNATKA_JAYGEES(stromata_uncalumniated);\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(sipple_apollinaris) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, sipple_apollinaris);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid sambaing_sepals(char **druggier_corrivate)\nsipple_apollinaris = ((char *)druggier_corrivate[48]);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(sipple_apollinaris) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, sipple_apollinaris);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nstromata_uncalumniated[48] = laburnum_pleaded;\nNATKA_JAYGEES(stromata_uncalumniated);\n \n","target":0}
{"idx":19220,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19221,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *laburnum_pleaded;\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nstromata_uncalumniated[48] = laburnum_pleaded;\nNATKA_JAYGEES(stromata_uncalumniated);\nvoid sambaing_sepals(char **druggier_corrivate)\nfree(((char *)druggier_corrivate[48]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&laburnum_pleaded,\"KALI_TUNEBERG\");\nstromata_uncalumniated[48] = laburnum_pleaded;\nNATKA_JAYGEES(stromata_uncalumniated);\n \n","target":0}
{"idx":19222,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19223,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19224,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19225,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19226,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19227,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19228,"code":"void curarization_overnormalized(protium_babes *thermophilous_takedowns)\nplessis_methadons = ((char *)( *(thermophilous_takedowns - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nif ((sscanf(plessis_methadons, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19229,"code":"void curarization_overnormalized(protium_babes *thermophilous_takedowns)\nstruct stonesoup_data *stonesoupData;\nplessis_methadons = ((char *)( *(thermophilous_takedowns - 5)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(plessis_methadons) + 1));\nif ((sscanf(plessis_methadons, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19230,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19231,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19232,"code":"void curarization_overnormalized(protium_babes *thermophilous_takedowns)\nif ( *(thermophilous_takedowns - 5) != 0)\nfree(((char *)( *(thermophilous_takedowns - 5))));\n \n","target":0}
{"idx":19233,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19234,"code":"void stonesoup_handle_taint(char *blowflies_precelebrations)\nif (blowflies_precelebrations != 0) {;\nupstreet_macrodactylia = ((char *)blowflies_precelebrations);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(upstreet_macrodactylia) +\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nneed to wait for it to be released. *\/\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nstonesoup_printf(\"Made it to the critical section\\n\");\nif (stonesoup_fd != -1) {\nunlink(stonesoup_thelockfile);\n \n","target":0}
{"idx":19235,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19236,"code":"for (i = 0; i < (d -> sindex); ++i) {\nfree(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19237,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19238,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19239,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19240,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19241,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19242,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19243,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19244,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19245,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19246,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *lassitude_nicoli)\nif (lassitude_nicoli != 0) {;\nredismiss_enounced[17] = lassitude_nicoli;\ntransliterate_mastigure = &redismiss_enounced;\nhumbles_lemonades = &transliterate_mastigure;\nimplementations_miteproof = &humbles_lemonades;\nneengatu_sialosemeiology = &implementations_miteproof;\ninsolite_ludian = &neengatu_sialosemeiology;\nunvaliant_withhie = &insolite_ludian;\nductibility_perceivability = &unvaliant_withhie;\nbondservant_thermotaxis = &ductibility_perceivability;\ndowable_penaeaceous = &bondservant_thermotaxis;\ntasker_battailous = &dowable_penaeaceous;\nunstamped_outgazing = &tasker_battailous;\nheterodoxness_preboom = &unstamped_outgazing;\nnowroze_khalifat = &heterodoxness_preboom;\nwidthwise_unheavenly = &nowroze_khalifat;\nsupermoisten_pinette = &widthwise_unheavenly;\ncomprehensive_footworn = &supermoisten_pinette;\ninnocuity_lipkin = &comprehensive_footworn;\ncommorth_wattmeter = &innocuity_lipkin;\nmuirfowl_ingross = &commorth_wattmeter;\narius_sardine = &muirfowl_ingross;\nperris_chloroethene = &arius_sardine;\npurga_bahoe = &perris_chloroethene;\ncornels_admonitive = &purga_bahoe;\nnontenurially_brawler = &cornels_admonitive;\nbeginners_babylonish = &nontenurially_brawler;\n \n","target":0}
{"idx":19247,"code":"disturbant_toupet = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *unscrewable_airmobile))))))))))))))))))))))))))))))))))))))))))))))))))[17]);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(disturbant_toupet) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, disturbant_toupet);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19248,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19249,"code":"purga_bahoe = &perris_chloroethene;\ncornels_admonitive = &purga_bahoe;\nnontenurially_brawler = &cornels_admonitive;\nbeginners_babylonish = &nontenurially_brawler;\nyarovize_germansville = &beginners_babylonish;\nmoco_fordyce = &yarovize_germansville;\nvarioloid_begroan = &moco_fordyce;\ntourniquet_declassed = &varioloid_begroan;\nnepenthes_undefaming = &tourniquet_declassed;\ntelegrams_unhomish = &nepenthes_undefaming;\nmesiogingival_preacher = &telegrams_unhomish;\ntamanduy_therapist = &mesiogingival_preacher;\ncorynebacterial_browns = &tamanduy_therapist;\nsampo_provection = &corynebacterial_browns;\ncooer_unlasher = &sampo_provection;\nsakkos_terrorsome = &cooer_unlasher;\nlymphoedema_firefight = &sakkos_terrorsome;\nnotarizes_babelish = &lymphoedema_firefight;\nglam_grenora = &notarizes_babelish;\ndefectum_obsessionally = &glam_grenora;\nreels_pryse = &defectum_obsessionally;\nabasio_mutus = &reels_pryse;\nchaing_metrically = &abasio_mutus;\nbreadmaking_ersatzes = &chaing_metrically;\naristolochia_colas = &breadmaking_ersatzes;\nalumines_genaro = &aristolochia_colas;\nalgosis_silicones = &alumines_genaro;\nreachably_hyperthetic = &algosis_silicones;\nunscrewable_airmobile = &reachably_hyperthetic;\nfree(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *unscrewable_airmobile))))))))))))))))))))))))))))))))))))))))))))))))))[17]));\n \n","target":0}
{"idx":19250,"code":"char *stonesoup_extension = \".lck\";\ndisturbant_toupet = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *unscrewable_airmobile))))))))))))))))))))))))))))))))))))))))))))))))))[17]);\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(disturbant_toupet) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, disturbant_toupet);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19251,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19252,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19253,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nrazorfish_satisfier(nonornamental_panamas,gamba_khedives);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19254,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nrazorfish_satisfier(nonornamental_panamas,gamba_khedives);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19255,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19256,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint overmasteringly_joao = 141;\nchar *quipu_eriosoma;;\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nrazorfish_satisfier(nonornamental_panamas,gamba_khedives);\nvoid razorfish_satisfier(int nonornamental_panamas,void *gamba_khedives)\nbdt_rapeye = ((char *)((char *)gamba_khedives));\nstonesoupData->data = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nif ((sscanf(bdt_rapeye, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\n \n","target":0}
{"idx":19257,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19258,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint overmasteringly_joao = 141;\nchar *quipu_eriosoma;;\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nrazorfish_satisfier(nonornamental_panamas,gamba_khedives);\nvoid razorfish_satisfier(int nonornamental_panamas,void *gamba_khedives)\nfree(((char *)((char *)gamba_khedives)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\n \n","target":0}
{"idx":19259,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19260,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19261,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint overmasteringly_joao = 141;\nchar *quipu_eriosoma;;\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nstruct stonesoup_data *stonesoupData;\nrazorfish_satisfier(nonornamental_panamas,gamba_khedives);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nif ((sscanf(bdt_rapeye, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&quipu_eriosoma,\"7386\",overmasteringly_joao);\ntrigynia_hyperimmunizing = ((void *)quipu_eriosoma);\nmoqui_dch[ *( *resourcefulness_dragonkind)] = trigynia_hyperimmunizing;\nperegrin_lipectomy = moqui_dch[ *( *resourcefulness_dragonkind)];\nrazorfish_satisfier(lackawanna_grumphie,peregrin_lipectomy);\nvoid razorfish_satisfier(int nonornamental_panamas,void *gamba_khedives)\nbdt_rapeye = ((char *)((char *)gamba_khedives));\nstonesoupData->data = malloc(sizeof(char) * (strlen(bdt_rapeye) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19262,"code":"pinpillow_contextured = ((char *)semicomplicated_turnipweed);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pinpillow_contextured) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, pinpillow_contextured);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19263,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19264,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") +\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19265,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint frontiersman_unsplayed = 18;\nchar *nls_filefishes;\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nputredinis_clouee[5] = nls_filefishes;\nperidinium_peatweed = 5;\nprosobranchiata_epiphonemas = &peridinium_peatweed;\nsemicomplicated_turnipweed =  *(putredinis_clouee +  *prosobranchiata_epiphonemas);\nfree(((char *)semicomplicated_turnipweed));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nputredinis_clouee[5] = nls_filefishes;\nsemicomplicated_turnipweed =  *(putredinis_clouee +  *prosobranchiata_epiphonemas);\nfree(((char *)semicomplicated_turnipweed));\n \n","target":0}
{"idx":19266,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19267,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19268,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nint frontiersman_unsplayed = 18;\nchar *nls_filefishes;\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nputredinis_clouee[5] = nls_filefishes;\nperidinium_peatweed = 5;\nprosobranchiata_epiphonemas = &peridinium_peatweed;\nsemicomplicated_turnipweed =  *(putredinis_clouee +  *prosobranchiata_epiphonemas);\npinpillow_contextured = ((char *)semicomplicated_turnipweed);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pinpillow_contextured) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pinpillow_contextured) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, pinpillow_contextured);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&nls_filefishes,\"8823\",frontiersman_unsplayed);\nputredinis_clouee[5] = nls_filefishes;\nsemicomplicated_turnipweed =  *(putredinis_clouee +  *prosobranchiata_epiphonemas);\npinpillow_contextured = ((char *)semicomplicated_turnipweed);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pinpillow_contextured) +\nstrcat(stonesoup_thelockfile, pinpillow_contextured);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19269,"code":"cascaras_dithers = ((char *)( *actinocrinite_laudanin));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(cascaras_dithers) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, cascaras_dithers);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19270,"code":"durbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nraphides_unbewildering = ((char *)(malloc(durbars_oxyfatty + 1)));\nif (raphides_unbewildering == 0) {\nmemset(raphides_unbewildering,0,durbars_oxyfatty + 1);\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nactinocrinite_laudanin = &raphides_unbewildering;\ncascaras_dithers = ((char *)( *actinocrinite_laudanin));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(cascaras_dithers) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, cascaras_dithers);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *actinocrinite_laudanin != 0)\nfree(((char *)( *actinocrinite_laudanin)));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19271,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19272,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19273,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19274,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *shandite_sobproof;\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nfree(((char *)shandite_sobproof));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nfree(((char *)shandite_sobproof));\n \n","target":0}
{"idx":19275,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *shandite_sobproof;\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nraphides_unbewildering = ((char *)(malloc(durbars_oxyfatty + 1)));\nmemset(raphides_unbewildering,0,durbars_oxyfatty + 1);\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nactinocrinite_laudanin = &raphides_unbewildering;\nfree(((char *)( *actinocrinite_laudanin)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nactinocrinite_laudanin = &raphides_unbewildering;\nfree(((char *)( *actinocrinite_laudanin)));\n \n","target":0}
{"idx":19276,"code":"fseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nchar *shandite_sobproof;\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nraphides_unbewildering = ((char *)(malloc(durbars_oxyfatty + 1)));\nmemset(raphides_unbewildering,0,durbars_oxyfatty + 1);\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nactinocrinite_laudanin = &raphides_unbewildering;\ncascaras_dithers = ((char *)( *actinocrinite_laudanin));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(cascaras_dithers) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(cascaras_dithers) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, cascaras_dithers);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&shandite_sobproof,\"SPITTLES_KINGMAKING\");\ndurbars_oxyfatty = ((int )(strlen(shandite_sobproof)));\nmemcpy(raphides_unbewildering,shandite_sobproof,durbars_oxyfatty);\nactinocrinite_laudanin = &raphides_unbewildering;\ncascaras_dithers = ((char *)( *actinocrinite_laudanin));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(cascaras_dithers) +\nstrcat(stonesoup_thelockfile, cascaras_dithers);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19277,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19278,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19279,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19280,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19281,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19282,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19283,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19284,"code":"void bedder_lipoids(int consecrated_onrushes,void *nonfalteringly_solano)\nstruct stonesoup_data *stonesoupData;\nnonreverential_rebec = ((char *)((char *)nonfalteringly_solano));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nif ((sscanf(nonreverential_rebec, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19285,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19286,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19287,"code":"void bedder_lipoids(int consecrated_onrushes,void *nonfalteringly_solano)\nnonreverential_rebec = ((char *)((char *)nonfalteringly_solano));\nstonesoupData->data = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(nonreverential_rebec) + 1));\nif ((sscanf(nonreverential_rebec, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19288,"code":"void bedder_lipoids(int consecrated_onrushes,void *nonfalteringly_solano)\nif (((char *)nonfalteringly_solano) != 0)\nfree(((char *)((char *)nonfalteringly_solano)));\n \n","target":0}
{"idx":19289,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19290,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19291,"code":"stupefying_craterid = ((char *)((char *)unshore_engirds));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(stupefying_craterid) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, stupefying_craterid);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19292,"code":"char *stonesoup_extension = \".lck\";\ncherida_placuntoma = getenv(\"PLANOCYLINDRIC_WHALELIKE\");\nlangelo_puffbird = ((void *)cherida_placuntoma);\ntamaqua_multifoliate[5] = langelo_puffbird;\npumpsman_nonmoveably[1] = 5;\nunshore_engirds =  *(tamaqua_multifoliate + pumpsman_nonmoveably[1]);\nstupefying_craterid = ((char *)((char *)unshore_engirds));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(stupefying_craterid) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(stupefying_craterid) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, stupefying_craterid);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19293,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19294,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19295,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19296,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19297,"code":"phenocoll_nessus = ((char *)interservice_silicosis);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(phenocoll_nessus) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, phenocoll_nessus);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19298,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19299,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19300,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *interservice_silicosis;\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nfree(((char *)interservice_silicosis));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nfree(((char *)interservice_silicosis));\n \n","target":0}
{"idx":19301,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19302,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *stonesoup_extension = \".lck\";\nchar *interservice_silicosis;\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nphenocoll_nessus = ((char *)interservice_silicosis);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(phenocoll_nessus) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(phenocoll_nessus) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, phenocoll_nessus);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&interservice_silicosis,\"ANODYNES_HYDATIGENOUS\");\nphenocoll_nessus = ((char *)interservice_silicosis);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(phenocoll_nessus) +\nstrcat(stonesoup_thelockfile, phenocoll_nessus);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19303,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19304,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19305,"code":"schlieren_pyrophilous = ((char *)((char *)scyphomedusae_serotherapy));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(schlieren_pyrophilous) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, schlieren_pyrophilous);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":0}
{"idx":19306,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19307,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19308,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19309,"code":"void gumless_niellist(void *scyphomedusae_serotherapy)\nif (((char *)scyphomedusae_serotherapy) != 0)\nfree(((char *)((char *)scyphomedusae_serotherapy)));\n \n","target":0}
{"idx":19310,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(schlieren_pyrophilous) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, schlieren_pyrophilous);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid gumless_niellist(void *scyphomedusae_serotherapy)\nschlieren_pyrophilous = ((char *)((char *)scyphomedusae_serotherapy));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(schlieren_pyrophilous) +\nstrcat(stonesoup_thelockfile, schlieren_pyrophilous);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":0}
{"idx":19311,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19312,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19313,"code":"shortish_dermatography = ((int )(strlen(theocentricism_stubbiest)));\nunacclimation_diaspora = ((char *)(malloc(shortish_dermatography + 1)));\nif (unacclimation_diaspora == 0) {\nmemset(unacclimation_diaspora,0,shortish_dermatography + 1);\nmemcpy(unacclimation_diaspora,theocentricism_stubbiest,shortish_dermatography);\nfistulous_loudspeaking(1,unacclimation_diaspora);\nvoid fistulous_loudspeaking(int indiscriminate_lampern,... );\n \n","target":0}
{"idx":19314,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&theocentricism_stubbiest,\"6398\",unfond_agonist);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19315,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&theocentricism_stubbiest,\"6398\",unfond_agonist);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19316,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19317,"code":"void saddened_leptocephalidae(int occamite_cacomelia,char *recompounds_jimjam)\nstruct stonesoup_data *stonesoupData;\nborries_autopelagic = ((char *)recompounds_jimjam);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nif ((sscanf(borries_autopelagic, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19318,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19319,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19320,"code":"void saddened_leptocephalidae(int occamite_cacomelia,char *recompounds_jimjam)\nborries_autopelagic = ((char *)recompounds_jimjam);\nstonesoupData->data = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(borries_autopelagic) + 1));\nif ((sscanf(borries_autopelagic, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19321,"code":"void saddened_leptocephalidae(int occamite_cacomelia,char *recompounds_jimjam)\nif (recompounds_jimjam != 0)\nfree(((char *)recompounds_jimjam));\n \n","target":0}
{"idx":19322,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19323,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19324,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint unfond_agonist = 141;\nchar *theocentricism_stubbiest;\nstonesoup_read_taint(&theocentricism_stubbiest,\"6398\",unfond_agonist);\nshortish_dermatography = ((int )(strlen(theocentricism_stubbiest)));\nmemcpy(unacclimation_diaspora,theocentricism_stubbiest,shortish_dermatography);\nfree(((char *)theocentricism_stubbiest));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&theocentricism_stubbiest,\"6398\",unfond_agonist);\nshortish_dermatography = ((int )(strlen(theocentricism_stubbiest)));\nmemcpy(unacclimation_diaspora,theocentricism_stubbiest,shortish_dermatography);\nfree(((char *)theocentricism_stubbiest));\n \n","target":0}
{"idx":19325,"code":"soggily_poroporo = ((int )(strlen(descrial_booger)));\nwoodburytype_ketolytic = ((char *)(malloc(soggily_poroporo + 1)));\nif (woodburytype_ketolytic == 0) {\nmemset(woodburytype_ketolytic,0,soggily_poroporo + 1);\nmemcpy(woodburytype_ketolytic,descrial_booger,soggily_poroporo);\nlaryngeating_frouzy = &woodburytype_ketolytic;\nif ( *laryngeating_frouzy != 0) {\nasiatically_franktown = ((char *)( *laryngeating_frouzy));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(asiatically_franktown) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, asiatically_franktown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nif ( *laryngeating_frouzy != 0)\nfree(((char *)( *laryngeating_frouzy)));\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19326,"code":"asiatically_franktown = ((char *)( *laryngeating_frouzy));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(asiatically_franktown) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, asiatically_franktown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19327,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nset_time_seconds(&fd -> rel_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_rel_time(fd,cinfo,col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19328,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nset_time_seconds(&fd -> rel_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_rel_time(fd,cinfo,col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19329,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19330,"code":"descrial_booger = getenv(\"ADOULA_SABELLIAN\");\nsoggily_poroporo = ((int )(strlen(descrial_booger)));\nwoodburytype_ketolytic = ((char *)(malloc(soggily_poroporo + 1)));\nmemset(woodburytype_ketolytic,0,soggily_poroporo + 1);\nmemcpy(woodburytype_ketolytic,descrial_booger,soggily_poroporo);\nlaryngeating_frouzy = &woodburytype_ketolytic;\nfree(((char *)( *laryngeating_frouzy)));\n \n","target":0}
{"idx":19331,"code":"char *stonesoup_extension = \".lck\";\ndescrial_booger = getenv(\"ADOULA_SABELLIAN\");\nsoggily_poroporo = ((int )(strlen(descrial_booger)));\nwoodburytype_ketolytic = ((char *)(malloc(soggily_poroporo + 1)));\nmemset(woodburytype_ketolytic,0,soggily_poroporo + 1);\nmemcpy(woodburytype_ketolytic,descrial_booger,soggily_poroporo);\nlaryngeating_frouzy = &woodburytype_ketolytic;\nasiatically_franktown = ((char *)( *laryngeating_frouzy));\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(asiatically_franktown) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, asiatically_franktown);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19332,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19333,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *propped_vitamine);\n \n","target":0}
{"idx":19334,"code":"gibsonburg_vitalist = ((char *)((char *)loewe_diazine));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gibsonburg_vitalist) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gibsonburg_vitalist);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19335,"code":"void misease_dyak(int pedes_unsurpassable,void *loewe_diazine)\nif (((char *)loewe_diazine) != 0)\nfree(((char *)((char *)loewe_diazine)));\n \n","target":0}
{"idx":19336,"code":"void stonesoup_printf(char * format, ...) {\nchar *stonesoup_extension = \".lck\";\nstrlen(stonesoup_extension) + 1);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid misease_dyak(int pedes_unsurpassable,void *loewe_diazine)\ngibsonburg_vitalist = ((char *)((char *)loewe_diazine));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gibsonburg_vitalist) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(gibsonburg_vitalist) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, gibsonburg_vitalist);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\n \n","target":1}
{"idx":19337,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19338,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nacute_multisacculate(ciceronage_ruffo);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19339,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19340,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nacute_multisacculate(ciceronage_ruffo);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19341,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19342,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19343,"code":"boulder_semistriated = getenv(\"SMALM_TAGBANUA\");\npreston_subduer[46] = boulder_semistriated;\ngraminifolious_coinstantaneity[5] = preston_subduer;\nprotatically_everhart = 5;\nbibliopegy_bme = &protatically_everhart;\nciceronage_ruffo =  *(graminifolious_coinstantaneity +  *bibliopegy_bme);\nacute_multisacculate(ciceronage_ruffo);\nstonesoupData->data = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid acute_multisacculate(char **extralite_staffelite)\nsubshrubby_imm = ((char *)extralite_staffelite[46]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nif ((sscanf(subshrubby_imm, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19344,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19345,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19346,"code":"boulder_semistriated = getenv(\"SMALM_TAGBANUA\");\npreston_subduer[46] = boulder_semistriated;\ngraminifolious_coinstantaneity[5] = preston_subduer;\nprotatically_everhart = 5;\nbibliopegy_bme = &protatically_everhart;\nciceronage_ruffo =  *(graminifolious_coinstantaneity +  *bibliopegy_bme);\nacute_multisacculate(ciceronage_ruffo);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nif ((sscanf(subshrubby_imm, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid acute_multisacculate(char **extralite_staffelite)\nsubshrubby_imm = ((char *)extralite_staffelite[46]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(subshrubby_imm) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19347,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19348,"code":"ragabrash_konking = ((char *)( *( *( *( *( *( *( *( *( *( *murphy_goodly)))))))))));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(ragabrash_konking) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, ragabrash_konking);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19349,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19350,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19351,"code":"char *gradational_wiggiest = 0;\nsimpled_secessiondom(&gradational_wiggiest);\nreperformance_azotic = &gradational_wiggiest;\nplanned_ahidjo = &reperformance_azotic;\ncalypter_indigotic = &planned_ahidjo;\nggr_agapemonist = &calypter_indigotic;\nplatynite_iab = &ggr_agapemonist;\nuncomposed_sternotherus = &platynite_iab;\nkev_nonmanifestness = &uncomposed_sternotherus;\nscind_unlaudable = &kev_nonmanifestness;\nnonextendible_dacoit = &scind_unlaudable;\nmurphy_goodly = &nonextendible_dacoit;\nfree(((char *)( *( *( *( *( *( *( *( *( *( *murphy_goodly))))))))))));\n \n","target":0}
{"idx":19352,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19353,"code":"char *stonesoup_extension = \".lck\";\nchar *gradational_wiggiest = 0;\nsimpled_secessiondom(&gradational_wiggiest);\nreperformance_azotic = &gradational_wiggiest;\nplanned_ahidjo = &reperformance_azotic;\ncalypter_indigotic = &planned_ahidjo;\nggr_agapemonist = &calypter_indigotic;\nplatynite_iab = &ggr_agapemonist;\nuncomposed_sternotherus = &platynite_iab;\nkev_nonmanifestness = &uncomposed_sternotherus;\nscind_unlaudable = &kev_nonmanifestness;\nnonextendible_dacoit = &scind_unlaudable;\nmurphy_goodly = &nonextendible_dacoit;\nragabrash_konking = ((char *)( *( *( *( *( *( *( *( *( *( *murphy_goodly)))))))))));\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(ragabrash_konking) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(ragabrash_konking) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, ragabrash_konking);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19354,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19355,"code":"amygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmisyoke_thallodal = ((char *)(malloc(amygdule_empiry + 1)));\nif (misyoke_thallodal == 0) {\nmemset(misyoke_thallodal,0,amygdule_empiry + 1);\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nabiology_chunked = ((char *)( *(haplessnesses_subvocally - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(abiology_chunked, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(haplessnesses_subvocally - 5) != 0)\nfree(((char *)( *(haplessnesses_subvocally - 5))));\n \n","target":0}
{"idx":19356,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19357,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19358,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19359,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19360,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint logistics_respots = 141;\nchar *muskego_hexactinelline;\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmisyoke_thallodal = ((char *)(malloc(amygdule_empiry + 1)));\nmemset(misyoke_thallodal,0,amygdule_empiry + 1);\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nendogastrically_superenrollment = 1;\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nfree(((char *)( *(haplessnesses_subvocally - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nfree(((char *)( *(haplessnesses_subvocally - 5))));\n \n","target":0}
{"idx":19361,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint logistics_respots = 141;\nchar *muskego_hexactinelline;\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nfree(((char *)muskego_hexactinelline));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nfree(((char *)muskego_hexactinelline));\n \n","target":0}
{"idx":19362,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19363,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19364,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19365,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint logistics_respots = 141;\nchar *muskego_hexactinelline;\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmisyoke_thallodal = ((char *)(malloc(amygdule_empiry + 1)));\nmemset(misyoke_thallodal,0,amygdule_empiry + 1);\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nendogastrically_superenrollment = 1;\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nabiology_chunked = ((char *)( *(haplessnesses_subvocally - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nif ((sscanf(abiology_chunked, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nabiology_chunked = ((char *)( *(haplessnesses_subvocally - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nif ((sscanf(abiology_chunked, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19366,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19367,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nint logistics_respots = 141;\nchar *muskego_hexactinelline;\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmisyoke_thallodal = ((char *)(malloc(amygdule_empiry + 1)));\nmemset(misyoke_thallodal,0,amygdule_empiry + 1);\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nendogastrically_superenrollment = 1;\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nabiology_chunked = ((char *)( *(haplessnesses_subvocally - 5)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nif ((sscanf(abiology_chunked, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&muskego_hexactinelline,\"6398\",logistics_respots);\namygdule_empiry = ((int )(strlen(muskego_hexactinelline)));\nmemcpy(misyoke_thallodal,muskego_hexactinelline,amygdule_empiry);\nsolutionist_spreads = &misyoke_thallodal;\nhaplessnesses_subvocally = ((char **)(((unsigned long )solutionist_spreads) * endogastrically_superenrollment * endogastrically_superenrollment)) + 5;\nabiology_chunked = ((char *)( *(haplessnesses_subvocally - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(abiology_chunked) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19368,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19369,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19370,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *functionating_morrisville);\n \n","target":0}
{"idx":19371,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19372,"code":"char **overink_visitor = 0;\nENTOURAGE_WHUNSTANE(overink_visitor);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nif ((sscanf(archvagabond_overextensions, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid patronise_hewie(char **kissableness_rectifiable)\narchvagabond_overextensions = ((char *)kissableness_rectifiable[8]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19373,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19374,"code":"char **overink_visitor = 0;\nENTOURAGE_WHUNSTANE(overink_visitor);\nstonesoupData->data = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid patronise_hewie(char **kissableness_rectifiable)\narchvagabond_overextensions = ((char *)kissableness_rectifiable[8]);\nstonesoupData->data = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(archvagabond_overextensions) + 1));\nif ((sscanf(archvagabond_overextensions, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19375,"code":"char **overink_visitor = 0;\nENTOURAGE_WHUNSTANE(overink_visitor);\nvoid patronise_hewie(char **kissableness_rectifiable)\nfree(((char *)kissableness_rectifiable[8]));\n \n","target":0}
{"idx":19376,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19377,"code":"pomerol_xcf = ((char *)roughers_xerophthalmic . enforcively_nonaggressive);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pomerol_xcf) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, pomerol_xcf);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19378,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19379,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19380,"code":"char *stonesoup_extension = \".lck\";\nunion carabideous_reckford inoppressive_regrets = {0};\ngambes_spece(&inoppressive_regrets);\nstrepsitene_voltmeters[ *uncarnate_rapture] = inoppressive_regrets;\nroughers_xerophthalmic = strepsitene_voltmeters[ *uncarnate_rapture];\npomerol_xcf = ((char *)roughers_xerophthalmic . enforcively_nonaggressive);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pomerol_xcf) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(pomerol_xcf) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, pomerol_xcf);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19381,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19382,"code":"union carabideous_reckford inoppressive_regrets = {0};\ngambes_spece(&inoppressive_regrets);\nstrepsitene_voltmeters[ *uncarnate_rapture] = inoppressive_regrets;\nroughers_xerophthalmic = strepsitene_voltmeters[ *uncarnate_rapture];\nfree(((char *)roughers_xerophthalmic . enforcively_nonaggressive));\n \n","target":0}
{"idx":19383,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19384,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19385,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19386,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19387,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19388,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19389,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19390,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19391,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19392,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nstruct stonesoup_data *stonesoupData;\nint vegete_railwayless = 141;\nchar *aotearoa_celiomyomectomy;\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nembolic_osirism = ((char *)aotearoa_celiomyomectomy);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nif ((sscanf(embolic_osirism, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\nstonesoupData->data) == 4) &&\n(strlen(stonesoupData->data) != 0))\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nembolic_osirism = ((char *)aotearoa_celiomyomectomy);\nstonesoupData->data = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19393,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19394,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19395,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19396,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint vegete_railwayless = 141;\nchar *aotearoa_celiomyomectomy;\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nfree(((char *)aotearoa_celiomyomectomy));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nfree(((char *)aotearoa_celiomyomectomy));\n \n","target":0}
{"idx":19397,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint vegete_railwayless = 141;\nchar *aotearoa_celiomyomectomy;\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nembolic_osirism = ((char *)aotearoa_celiomyomectomy);\nstonesoupData->data = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nif ((sscanf(embolic_osirism, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&aotearoa_celiomyomectomy,\"9074\",vegete_railwayless);\nembolic_osirism = ((char *)aotearoa_celiomyomectomy);\nstonesoupData->data = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(embolic_osirism) + 1));\nif ((sscanf(embolic_osirism, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19398,"code":"void *toCap (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19399,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19400,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19401,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19402,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19403,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19404,"code":"struct stonesoup_data *stonesoupData;\nranees_unchromed = ((char *)indomitability_underfind . tinder_milliweber);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nif ((sscanf(ranees_unchromed, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19405,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19406,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19407,"code":"ranees_unchromed = ((char *)indomitability_underfind . tinder_milliweber);\nstonesoupData->data = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(ranees_unchromed) + 1));\nif ((sscanf(ranees_unchromed, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19408,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sincipita_bdsa,\"VENER_SIAMESE\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19409,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sincipita_bdsa,\"VENER_SIAMESE\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19410,"code":"kula_licitly = ((char *)( *(townwards_elasticate - 5)) . prothallic_unblock);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(kula_licitly) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, kula_licitly);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19411,"code":"if (( *(townwards_elasticate - 5)) . prothallic_unblock != 0)\nfree(((char *)( *(townwards_elasticate - 5)) . prothallic_unblock));\n \n","target":0}
{"idx":19412,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19413,"code":"char *stonesoup_extension = \".lck\";\nkula_licitly = ((char *)( *(townwards_elasticate - 5)) . prothallic_unblock);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(kula_licitly) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(kula_licitly) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, kula_licitly);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19414,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19415,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmp8ErmZJ_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (hemispheroidal_matipo != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19416,"code":"if (hemispheroidal_matipo != 0) {;\nhurdler_shiftlessness = ((char *)hemispheroidal_matipo);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(hurdler_shiftlessness) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nneed to wait for it to be released. *\/\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nstonesoup_printf(\"Made it to the critical section\\n\");\nif (stonesoup_fd != -1) {\nunlink(stonesoup_thelockfile);\n \n","target":1}
{"idx":19417,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmp8ErmZJ_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (hemispheroidal_matipo != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19418,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19419,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19420,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19421,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19422,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19423,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19424,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19425,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19426,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19427,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19428,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19429,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19430,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19431,"code":"concubinate_guttering = ((char *)nam_bestrowed);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(concubinate_guttering) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nif (stonesoup_thelockfile) {\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, concubinate_guttering);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nif (stonesoup_fd != -1) {\nclose(stonesoup_fd);\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19432,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19433,"code":"aulostomus_alvira = ((int )(strlen(anticompetitive_opalines)));\nhornify_jbeil = ((char *)(malloc(aulostomus_alvira + 1)));\nif (hornify_jbeil == 0) {\nmemset(hornify_jbeil,0,aulostomus_alvira + 1);\nmemcpy(hornify_jbeil,anticompetitive_opalines,aulostomus_alvira);\npettiness_celadons(balkanize_isodialuric,hornify_jbeil);\nvoid pettiness_celadons(int unfertilisable_strandward,char *nam_bestrowed);\n \n","target":0}
{"idx":19434,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19435,"code":"void pettiness_celadons(int unfertilisable_strandward,char *nam_bestrowed)\nchar *stonesoup_extension = \".lck\";\nconcubinate_guttering = ((char *)nam_bestrowed);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(concubinate_guttering) +\nstrlen(stonesoup_extension) + 1);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(concubinate_guttering) +\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoup_thelockfile\", stonesoup_thelockfile, \"INITIAL-STATE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstrcat(stonesoup_thelockfile, concubinate_guttering);\nstrcat(stonesoup_thelockfile, stonesoup_extension);\nstonesoup_printf(\"Grabbing lock file: %s\\n\", stonesoup_thelockfile);\nvoid stonesoup_printf(char * format, ...) {\nwhile ((stonesoup_fd = open(stonesoup_thelockfile, O_CREAT | O_EXCL, 0644) == -1) ) {\nunlink(stonesoup_thelockfile);\nfree (stonesoup_thelockfile);\n \n","target":1}
{"idx":19436,"code":"void pettiness_celadons(int unfertilisable_strandward,char *nam_bestrowed)\nif (nam_bestrowed != 0)\nfree(((char *)nam_bestrowed));\n \n","target":0}
{"idx":19437,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19438,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19439,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19440,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *nondeflective_pyatigorsk);\n \n","target":0}
{"idx":19441,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19442,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19443,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19444,"code":"struct stonesoup_data *stonesoupData;\nprecalculations_protovum = ((char *)ungreased_hornyhanded . trefler_washtucna);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nif ((sscanf(precalculations_protovum, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19445,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19446,"code":"if (ungreased_hornyhanded . trefler_washtucna != 0)\nfree(((char *)ungreased_hornyhanded . trefler_washtucna));\n \n","target":0}
{"idx":19447,"code":"precalculations_protovum = ((char *)ungreased_hornyhanded . trefler_washtucna);\nstonesoupData->data = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(precalculations_protovum) + 1));\nif ((sscanf(precalculations_protovum, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19448,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19449,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *strummer_beauty)\nif (strummer_beauty != 0) {;\nmoistful_onycholysis = ((char *)strummer_beauty);\nstonesoupData->data = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(moistful_onycholysis, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif (strummer_beauty != 0)\nfree(((char *)strummer_beauty));\n \n","target":0}
{"idx":19450,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19451,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19452,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nif ((sscanf(moistful_onycholysis, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\nvoid stonesoup_handle_taint(char *strummer_beauty)\nmoistful_onycholysis = ((char *)strummer_beauty);\nstonesoupData->data = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nfree(stonesoupData);\n \n","target":0}
{"idx":19453,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19454,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19455,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *strummer_beauty)\nfree(((char *)strummer_beauty));\n \n","target":0}
{"idx":19456,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19457,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstonesoupData->data = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\nvoid stonesoup_handle_taint(char *strummer_beauty)\nmoistful_onycholysis = ((char *)strummer_beauty);\nstonesoupData->data = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(moistful_onycholysis) + 1));\nif ((sscanf(moistful_onycholysis, \"%d %s %s %s\",\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19458,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19459,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmp0COt3b_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (hanbalite_olynthian != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19460,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmp0COt3b_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (hanbalite_olynthian != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19461,"code":"if (hanbalite_olynthian != 0) {;\nsylviculture_anilin = ((char *)hanbalite_olynthian);\nstonesoup_thelockfile = (char *)malloc(strlen(\"\/opt\/stonesoup\/workspace\/testData\/\") + strlen(sylviculture_anilin) +\nstrlen(stonesoup_extension) + 1);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\nstrcpy(stonesoup_thelockfile, \"\/opt\/stonesoup\/workspace\/testData\/\");\nstonesoup_printf(\"Error accessing testData directory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nneed to wait for it to be released. *\/\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nstonesoup_printf(\"Made it to the critical section\\n\");\nif (stonesoup_fd != -1) {\nunlink(stonesoup_thelockfile);\n \n","target":1}
{"idx":19462,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19463,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19464,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19465,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19466,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19467,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19468,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19469,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19470,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19471,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19472,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19473,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19474,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19475,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19476,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&misspeaking_aposafranine,\"SQUINTS_ASHING\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19477,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&misspeaking_aposafranine,\"SQUINTS_ASHING\");\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19478,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19479,"code":"struct stonesoup_data *stonesoupData;\ntenebrously_quey = ((char *)( *(barraza_poyntill - 5)) . cytosol_palatization);\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nif ((sscanf(tenebrously_quey, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19480,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19481,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19482,"code":"tenebrously_quey = ((char *)( *(barraza_poyntill - 5)) . cytosol_palatization);\nstonesoupData->data = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(tenebrously_quey) + 1));\nif ((sscanf(tenebrously_quey, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19483,"code":"if (( *(barraza_poyntill - 5)) . cytosol_palatization != 0)\nfree(((char *)( *(barraza_poyntill - 5)) . cytosol_palatization));\n \n","target":0}
{"idx":19484,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19485,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19486,"code":"struct stonesoup_data *stonesoupData = (struct stonesoup_data*)data;\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19487,"code":"akwapim_optime = ((int )(strlen(coaction_uredinologist)));\ncinematheque_mockeries = ((char *)(malloc(akwapim_optime + 1)));\nif (cinematheque_mockeries == 0) {\nmemset(cinematheque_mockeries,0,akwapim_optime + 1);\nmemcpy(cinematheque_mockeries,coaction_uredinologist,akwapim_optime);\nbraxies_titers = &cinematheque_mockeries;\nfrye_coleville = braxies_titers + 5;\nif ( *(frye_coleville - 5) != 0) {\nsusceptiveness_cellite = ((char *)( *(frye_coleville - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nif (stonesoupData->data && stonesoupData->file1 && stonesoupData->file2) {\nif ((sscanf(susceptiveness_cellite, \"%d %s %s %s\",\n&(stonesoupData->qsize),\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData->data);\nfree(stonesoupData);\nif ( *(frye_coleville - 5) != 0)\nfree(((char *)( *(frye_coleville - 5))));\n \n","target":0}
{"idx":19488,"code":"struct stonesoup_data *stonesoupData;\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nif (stonesoupData) {\n&(stonesoupData->qsize),\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\nif (pthread_create(&stonesoup_t0, NULL, delNonAlpha, (void *)stonesoupData) != 0) {\nif (pthread_create(&stonesoup_t1, NULL, toCap, (void *)stonesoupData) != 0) {\nfree(stonesoupData);\n \n","target":0}
{"idx":19489,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19490,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"After joins.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19491,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19492,"code":"void *delNonAlpha (void *data) {\nstruct stonesoup_data *stonesoupData = (struct stonesoup_data*) data;\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19493,"code":"struct stonesoup_data *stonesoupData;\ncoaction_uredinologist = getenv(\"SCEUOPHYLACIUM_MEROSTHENIC\");\nakwapim_optime = ((int )(strlen(coaction_uredinologist)));\ncinematheque_mockeries = ((char *)(malloc(akwapim_optime + 1)));\nmemset(cinematheque_mockeries,0,akwapim_optime + 1);\nmemcpy(cinematheque_mockeries,coaction_uredinologist,akwapim_optime);\nbraxies_titers = &cinematheque_mockeries;\nfrye_coleville = braxies_titers + 5;\nsusceptiveness_cellite = ((char *)( *(frye_coleville - 5)));\nstonesoupData = malloc(sizeof(struct stonesoup_data));\nstonesoupData->data = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nif ((sscanf(susceptiveness_cellite, \"%d %s %s %s\",\n&(stonesoupData->qsize),\nstonesoupData->file1,\nstonesoupData->file2,\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoupData->qsize\", stonesoupData->qsize, &(stonesoupData->qsize), \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->data\", stonesoupData->data, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file1\", stonesoupData->file1, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_buffer, \"stonesoupData->file2\", stonesoupData->file2, \"INITIAL-STATE\");\nstonesoupData->data_size = strlen(stonesoupData->data);\nfree(stonesoupData->data);\nfree(stonesoupData);\n \n","target":0}
{"idx":19494,"code":"coaction_uredinologist = getenv(\"SCEUOPHYLACIUM_MEROSTHENIC\");\nakwapim_optime = ((int )(strlen(coaction_uredinologist)));\ncinematheque_mockeries = ((char *)(malloc(akwapim_optime + 1)));\nmemset(cinematheque_mockeries,0,akwapim_optime + 1);\nmemcpy(cinematheque_mockeries,coaction_uredinologist,akwapim_optime);\nbraxies_titers = &cinematheque_mockeries;\nfrye_coleville = braxies_titers + 5;\nsusceptiveness_cellite = ((char *)( *(frye_coleville - 5)));\nstonesoupData->data = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file1 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nstonesoupData->file2 = malloc(sizeof(char) * (strlen(susceptiveness_cellite) + 1));\nif ((sscanf(susceptiveness_cellite, \"%d %s %s %s\",\n(strlen(stonesoupData->data) != 0))\nstonesoupData->data) == 4) &&\nfree(stonesoupData->data);\n \n","target":0}
{"idx":19495,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19496,"code":"coaction_uredinologist = getenv(\"SCEUOPHYLACIUM_MEROSTHENIC\");\nakwapim_optime = ((int )(strlen(coaction_uredinologist)));\ncinematheque_mockeries = ((char *)(malloc(akwapim_optime + 1)));\nmemset(cinematheque_mockeries,0,akwapim_optime + 1);\nmemcpy(cinematheque_mockeries,coaction_uredinologist,akwapim_optime);\nbraxies_titers = &cinematheque_mockeries;\nfrye_coleville = braxies_titers + 5;\nfree(((char *)( *(frye_coleville - 5))));\n \n","target":0}
{"idx":19497,"code":"void *toCap (void *data) {\nstonesoup_arr = malloc(sizeof(int) * stonesoupData->qsize);\nfor (stonesoup_i = 0; stonesoup_i < stonesoupData->qsize; stonesoup_i++) {\nstonesoup_arr[stonesoup_i] = stonesoupData->qsize - stonesoup_i;\nqsort(stonesoup_arr, stonesoupData->qsize, sizeof(int), &stonesoup_comp);\nfree(stonesoup_arr);\n \n","target":0}
{"idx":19498,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nchosen_rhagose(chairmen_theatregoing,hearkens_overglaze);\nchosen_rhagose(telethermograph_sciophilous,sawaiori_irrationalize);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19499,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nchosen_rhagose(chairmen_theatregoing,hearkens_overglaze);\nchosen_rhagose(telethermograph_sciophilous,sawaiori_irrationalize);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19500,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19501,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19502,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *brassiere_hallsy;\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nbelabours_amnionate = &brassiere_hallsy;\nhearkens_overglaze = belabours_amnionate + 5;\nchosen_rhagose(chairmen_theatregoing,hearkens_overglaze);\nchosen_rhagose(telethermograph_sciophilous,sawaiori_irrationalize);\nvoid chosen_rhagose(int telethermograph_sciophilous,char **sawaiori_irrationalize)\nfree(((char *)( *(sawaiori_irrationalize - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&brassiere_hallsy,\"LAMEDH_INDIGOTIC\");\nbelabours_amnionate = &brassiere_hallsy;\nhearkens_overglaze = belabours_amnionate + 5;\nchosen_rhagose(chairmen_theatregoing,hearkens_overglaze);\n \n","target":0}
{"idx":19503,"code":"capillus_kegler = ((int )(strlen(lecanoscopic_paranete)));\nnondeclaration_panime = ((char *)(malloc(capillus_kegler + 1)));\nif (nondeclaration_panime == 0) {\nmemset(nondeclaration_panime,0,capillus_kegler + 1);\nmemcpy(nondeclaration_panime,lecanoscopic_paranete,capillus_kegler);\nnemichthys_yarth = &nondeclaration_panime;\nsyndetic_suboptima = &nemichthys_yarth;\nbivalves_toxosozin = &syndetic_suboptima;\ncomprehensibly_eliquated = &bivalves_toxosozin;\nyuga_untumidity = &comprehensibly_eliquated;\nacaridan_livishly = &yuga_untumidity;\nuneating_aug = &acaridan_livishly;\ntoughly_foreknows = &uneating_aug;\ncardiokinetic_hyalogens = &toughly_foreknows;\ncoessentialness_eeho = &cardiokinetic_hyalogens;\nphonotypically_spoilsports(chiropodical_hexacid,coessentialness_eeho);\nvoid phonotypically_spoilsports(int platitudinize_ldp,char ***********cymbaline_unrevolted);\n \n","target":0}
{"idx":19504,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&lecanoscopic_paranete,\"5427\",ged_episplenitis);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19505,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&lecanoscopic_paranete,\"5427\",ged_episplenitis);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19506,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19507,"code":"void phonotypically_spoilsports(int platitudinize_ldp,char ***********cymbaline_unrevolted)\nfree(((char *)( *( *( *( *( *( *( *( *( *( *cymbaline_unrevolted))))))))))));\n \n","target":0}
{"idx":19508,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint ged_episplenitis = 45;\nchar *lecanoscopic_paranete;\nstonesoup_read_taint(&lecanoscopic_paranete,\"5427\",ged_episplenitis);\ncapillus_kegler = ((int )(strlen(lecanoscopic_paranete)));\nmemcpy(nondeclaration_panime,lecanoscopic_paranete,capillus_kegler);\nfree(((char *)lecanoscopic_paranete));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&lecanoscopic_paranete,\"5427\",ged_episplenitis);\ncapillus_kegler = ((int )(strlen(lecanoscopic_paranete)));\nmemcpy(nondeclaration_panime,lecanoscopic_paranete,capillus_kegler);\nfree(((char *)lecanoscopic_paranete));\n \n","target":0}
{"idx":19509,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19510,"code":"pecuniosity_duende = ((int )(strlen(boubou_fleets)));\ngazet_pageless = ((char *)(malloc(pecuniosity_duende + 1)));\nif (gazet_pageless == 0) {\nmemset(gazet_pageless,0,pecuniosity_duende + 1);\nmemcpy(gazet_pageless,boubou_fleets,pecuniosity_duende);\nkneed_undewily = &gazet_pageless;\npailfuls_deberry = ((char **)(((unsigned long )kneed_undewily) * ragseller_ashman * ragseller_ashman)) + 5;\nunquakerlike_disapprovingly(pailfuls_deberry);\nvoid unquakerlike_disapprovingly(char **superintended_cadmic)\nzincites_commandoman = ((char *)( *(superintended_cadmic - 5)));\nstonesoup_files = fopen(zincites_commandoman,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif ( *(superintended_cadmic - 5) != 0)\nfree(((char *)( *(superintended_cadmic - 5))));\n \n","target":1}
{"idx":19511,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nunquakerlike_disapprovingly(pailfuls_deberry);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19512,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nunquakerlike_disapprovingly(pailfuls_deberry);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19513,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *boubou_fleets;;\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\npecuniosity_duende = ((int )(strlen(boubou_fleets)));\nmemcpy(gazet_pageless,boubou_fleets,pecuniosity_duende);\nfree(((char *)boubou_fleets));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\npecuniosity_duende = ((int )(strlen(boubou_fleets)));\nmemcpy(gazet_pageless,boubou_fleets,pecuniosity_duende);\nfree(((char *)boubou_fleets));\n \n","target":0}
{"idx":19514,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *boubou_fleets;;\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\npecuniosity_duende = ((int )(strlen(boubou_fleets)));\ngazet_pageless = ((char *)(malloc(pecuniosity_duende + 1)));\nmemset(gazet_pageless,0,pecuniosity_duende + 1);\nmemcpy(gazet_pageless,boubou_fleets,pecuniosity_duende);\nragseller_ashman = 1;\nkneed_undewily = &gazet_pageless;\npailfuls_deberry = ((char **)(((unsigned long )kneed_undewily) * ragseller_ashman * ragseller_ashman)) + 5;\nunquakerlike_disapprovingly(pailfuls_deberry);\nvoid unquakerlike_disapprovingly(char **superintended_cadmic)\nfree(((char *)( *(superintended_cadmic - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&boubou_fleets,\"MYOCARDIOGRAM_STECHADOS\");\npecuniosity_duende = ((int )(strlen(boubou_fleets)));\nmemcpy(gazet_pageless,boubou_fleets,pecuniosity_duende);\nkneed_undewily = &gazet_pageless;\npailfuls_deberry = ((char **)(((unsigned long )kneed_undewily) * ragseller_ashman * ragseller_ashman)) + 5;\nunquakerlike_disapprovingly(pailfuls_deberry);\n \n","target":0}
{"idx":19515,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19516,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19517,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19518,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19519,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19520,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19521,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19522,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19523,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19524,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19525,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19526,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19527,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19528,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19529,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19530,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19531,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19532,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19533,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *gools_angelizing = 0;\nprejudgments_cetonia[7] = gools_angelizing;\nbiurea_aortographies = ((char *)prejudgments_cetonia[7]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(biurea_aortographies,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19534,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *gools_angelizing = 0;\nprejudgments_cetonia[7] = gools_angelizing;\nbiurea_aortographies = ((char *)prejudgments_cetonia[7]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(biurea_aortographies,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19535,"code":"void stonesoup_cleanup(char **ptrs,int size)\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19536,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19537,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nMONOBROMIZED_VEHEMENT(overturning_peronism);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19538,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nMONOBROMIZED_VEHEMENT(overturning_peronism);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19539,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19540,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19541,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19542,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19543,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19544,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19545,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19546,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nvoid requiescat_kryska(char ***forspend_isotype)\nunornateness_metallist = ((char *)( *( *forspend_isotype)));\nstonesoup_files = fopen(unornateness_metallist,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19547,"code":"void requiescat_kryska(char ***forspend_isotype)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nunornateness_metallist = ((char *)( *( *forspend_isotype)));\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(unornateness_metallist,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19548,"code":"void requiescat_kryska(char ***forspend_isotype)\nfree(((char *)( *( *forspend_isotype))));\n \n","target":0}
{"idx":19549,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19550,"code":"void stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid requiescat_kryska(char ***forspend_isotype)\nunornateness_metallist = ((char *)( *( *forspend_isotype)));\nstonesoup_files = fopen(unornateness_metallist,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":19551,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19552,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19553,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19554,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19555,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19556,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19557,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ntramells_bougies = ((char *)( *( *( *( *( *( *( *( *( *( *ontologist_chungking)))))))))) . hypaethrum_ectogenous);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(tramells_bougies,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19558,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ntramells_bougies = ((char *)( *( *( *( *( *( *( *( *( *( *ontologist_chungking)))))))))) . hypaethrum_ectogenous);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(tramells_bougies,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19559,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ntramells_bougies = ((char *)( *( *( *( *( *( *( *( *( *( *ontologist_chungking)))))))))) . hypaethrum_ectogenous);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(tramells_bougies,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19560,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&overwhisper_archisphere,\"LITERARILY_GLOUTED\");\nswarfer_outswears(1,postpneumonic_gleamer);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19561,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&overwhisper_archisphere,\"LITERARILY_GLOUTED\");\nswarfer_outswears(1,postpneumonic_gleamer);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19562,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19563,"code":"union sinsinawa_rostrated bluegums_methodius = {0};\nva_list becudgeled_prefigurate;\n__builtin_va_start(becudgeled_prefigurate,osgood_pippinface);\nbluegums_methodius = (va_arg(becudgeled_prefigurate,union sinsinawa_rostrated ));\nfree(((char *)bluegums_methodius . wardrobe_suitings));\n \n","target":0}
{"idx":19564,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19565,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], overrefines_megnetosphere);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19566,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19567,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], overrefines_megnetosphere);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19568,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19569,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19570,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19571,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19572,"code":"stonesoup_num = atoi(manbarklak_hypothecial);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19573,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19574,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19575,"code":"unsigned int **stonesoup_buffer_array = 0;\nmanbarklak_hypothecial = ((char *)( *transylvanian_fishbolt) . nachtmml_dorati);\nstonesoup_num = atoi(manbarklak_hypothecial);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19576,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19577,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *protead_handtrap)\nif (protead_handtrap != 0) {;\nwaterboro_inwrought = ((char *)protead_handtrap);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], waterboro_inwrought);\nif (protead_handtrap != 0)\nfree(((char *)protead_handtrap));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":19578,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19579,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *protead_handtrap)\nfree(((char *)protead_handtrap));\n \n","target":0}
{"idx":19580,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19581,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19582,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *lewisport_autoalarm);\n \n","target":0}
{"idx":19583,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19584,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19585,"code":"void stonesoup_handle_taint(char *lewisport_autoalarm)\nunion kaaba_uninimical comparate_babyhouse;\ncomparate_babyhouse . befathered_immatchable = lewisport_autoalarm;\nnoneffeteness_chowtimes[5] = comparate_babyhouse;\ncacothansia_unavoidableness[1] = 5;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\nvoid boutique_deflocculating(int berry_gibbered,union kaaba_uninimical profilometer_peppy)\nfree(((char *)profilometer_peppy . befathered_immatchable));\n \n","target":0}
{"idx":19586,"code":"void stonesoup_cleanup(char **ptrs,int size)\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfree(stonesoup_str_list);\nvoid boutique_deflocculating(int berry_gibbered,union kaaba_uninimical profilometer_peppy)\nweimaraner_herbless = ((char *)profilometer_peppy . befathered_immatchable);\nstonesoup_files = fopen(weimaraner_herbless,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nunion kaaba_uninimical comparate_babyhouse;\nnoneffeteness_chowtimes[5] = comparate_babyhouse;\ncacothansia_unavoidableness[1] = 5;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_handle_taint(char *lewisport_autoalarm)\ncomparate_babyhouse . befathered_immatchable = lewisport_autoalarm;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\n \n","target":1}
{"idx":19587,"code":"void stonesoup_handle_taint(char *lewisport_autoalarm)\nunion kaaba_uninimical comparate_babyhouse;\ncomparate_babyhouse . befathered_immatchable = lewisport_autoalarm;\nnoneffeteness_chowtimes[5] = comparate_babyhouse;\ncacothansia_unavoidableness[1] = 5;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\nvoid boutique_deflocculating(int berry_gibbered,union kaaba_uninimical profilometer_peppy)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nweimaraner_herbless = ((char *)profilometer_peppy . befathered_immatchable);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(weimaraner_herbless,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19588,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nunion kaaba_uninimical comparate_babyhouse;\nnoneffeteness_chowtimes[5] = comparate_babyhouse;\ncacothansia_unavoidableness[1] = 5;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nvoid boutique_deflocculating(int berry_gibbered,union kaaba_uninimical profilometer_peppy)\nweimaraner_herbless = ((char *)profilometer_peppy . befathered_immatchable);\nstonesoup_files = fopen(weimaraner_herbless,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_handle_taint(char *lewisport_autoalarm)\ncomparate_babyhouse . befathered_immatchable = lewisport_autoalarm;\nmidlines_aedoeology =  *(noneffeteness_chowtimes + cacothansia_unavoidableness[1]);\nboutique_deflocculating(announcements_chatty,midlines_aedoeology);\n \n","target":1}
{"idx":19589,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19590,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19591,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19592,"code":"void nuncios_zechstein(void **cybernated_anesthetize)\nsicklies_interstriving(cybernated_anesthetize);\nvoid sicklies_interstriving(void **eds_salinas)\nfree(((char *)((char *)( *(eds_salinas - 5)))));\n \n","target":0}
{"idx":19593,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19594,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19595,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *pestis_leeper);\n \n","target":0}
{"idx":19596,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19597,"code":"void *mppd_dolores = 0;\nif (((char *)mppd_dolores) != 0)\nfree(((char *)((char *)mppd_dolores)));\n \n","target":0}
{"idx":19598,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19599,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19600,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19601,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19602,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nchar *monoecia_addictiveness;;\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\ngluteofemoral_caddaric = monoecia_addictiveness;\nstereome_uninterpretable = &gluteofemoral_caddaric;\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\ngluteofemoral_caddaric = monoecia_addictiveness;\nstereome_uninterpretable = &gluteofemoral_caddaric;\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\nvoid croesus_inerringly(bva_outstrove *reequipped_indecomposable)\nboarhound_sensates = ((char *)( *reequipped_indecomposable));\nif (strlen(boarhound_sensates) > 0 &&\nstonesoup_num_files = strtoul(boarhound_sensates,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19603,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19604,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19605,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19606,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *monoecia_addictiveness;;\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\ngluteofemoral_caddaric = monoecia_addictiveness;\nstereome_uninterpretable = &gluteofemoral_caddaric;\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\nvoid croesus_inerringly(bva_outstrove *reequipped_indecomposable)\nfree(((char *)( *reequipped_indecomposable)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&monoecia_addictiveness,\"SCROBICULUS_CSE\");\ngluteofemoral_caddaric = monoecia_addictiveness;\nstereome_uninterpretable = &gluteofemoral_caddaric;\nGESTNING_DEATHWATCHES(stereome_uninterpretable);\n \n","target":0}
{"idx":19607,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19608,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19609,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19610,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19611,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19612,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nunion rhatania_vanuatu lombardy_overplumb;\nchar *astereognosis_shrives;;\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nparky_pneumatism[5] = lombardy_overplumb;\noverply_acidophilic = 5;\nheteroousia_theatroscope = &overply_acidophilic;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":19613,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19614,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nunion rhatania_vanuatu lombardy_overplumb;\nchar *astereognosis_shrives;;\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nparky_pneumatism[5] = lombardy_overplumb;\noverply_acidophilic = 5;\nheteroousia_theatroscope = &overply_acidophilic;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nint i = 0;\nfree(ptrs[i]);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nparky_pneumatism[5] = lombardy_overplumb;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19615,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nunion rhatania_vanuatu lombardy_overplumb;\nint tightfistedly_zealously = 45;\nchar *astereognosis_shrives;;\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nparky_pneumatism[5] = lombardy_overplumb;\noverply_acidophilic = 5;\nheteroousia_theatroscope = &overply_acidophilic;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\ndevastations_judoists = ((char *)clablaria_unparochialism . epanisognathous_joggle);\nstonesoup_files = fopen(devastations_judoists,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19616,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nunion rhatania_vanuatu lombardy_overplumb;\nint tightfistedly_zealously = 45;\nchar *astereognosis_shrives;;\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nparky_pneumatism[5] = lombardy_overplumb;\noverply_acidophilic = 5;\nheteroousia_theatroscope = &overply_acidophilic;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\nfree(((char *)clablaria_unparochialism . epanisognathous_joggle));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&astereognosis_shrives,\"3178\",tightfistedly_zealously);\nlombardy_overplumb . epanisognathous_joggle = astereognosis_shrives;\nclablaria_unparochialism =  *(parky_pneumatism +  *heteroousia_theatroscope);\nfree(((char *)clablaria_unparochialism . epanisognathous_joggle));\n \n","target":0}
{"idx":19617,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19618,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19619,"code":"stonesoup_num = atoi(metaphyte_afridi);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19620,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19621,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19622,"code":"unsigned int **stonesoup_buffer_array = 0;\nmetaphyte_afridi = ((char *)( *habdalahs_underfarmer) . italianization_masolino);\nstonesoup_num = atoi(metaphyte_afridi);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19623,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19624,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19625,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\nbenitier_enyeus(crannoger_fullerton);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19626,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\nbenitier_enyeus(crannoger_fullerton);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19627,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19628,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *culbertson_beearn;\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\ncrannoger_fullerton = culbertson_beearn;\nbenitier_enyeus(crannoger_fullerton);\nvoid benitier_enyeus(const lorou_tores engineerings_ascension)\nfree(((char *)((lorou_tores )engineerings_ascension)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\ncrannoger_fullerton = culbertson_beearn;\nbenitier_enyeus(crannoger_fullerton);\n \n","target":0}
{"idx":19629,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nchar *culbertson_beearn;\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\ncrannoger_fullerton = culbertson_beearn;\nbenitier_enyeus(crannoger_fullerton);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid benitier_enyeus(const lorou_tores engineerings_ascension)\ninjustifiable_whininess = ((char *)((lorou_tores )engineerings_ascension));\nif (strlen(injustifiable_whininess) > 0 &&\nstonesoup_num_files = strtoul(injustifiable_whininess,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&culbertson_beearn,\"DIPHTHERIC_MISSILRIES\");\ncrannoger_fullerton = culbertson_beearn;\nbenitier_enyeus(crannoger_fullerton);\n \n","target":1}
{"idx":19630,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19631,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19632,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *jabrud_pollards)\nif (jabrud_pollards != 0) {;\nbonapartism_freehand = jabrud_pollards;\ninternetted_barmecidal = &bonapartism_freehand;\nplateasm_maneuvrable = &internetted_barmecidal;\nnondigestibly_tombing = &plateasm_maneuvrable;\ndemotist_porchlike = &nondigestibly_tombing;\ncalathea_eyeservice = &demotist_porchlike;\nallotriophagia_ganglioneural = &calathea_eyeservice;\ntendicle_bynin = &allotriophagia_ganglioneural;\ntremelliform_platyrrhin = &tendicle_bynin;\nrequiescat_levelland = &tremelliform_platyrrhin;\nhematospermia_uncircuitously = &requiescat_levelland;\nurinary_hieracosphinxes = &hematospermia_uncircuitously;\npseudotropine_anankes = &urinary_hieracosphinxes;\newall_relucted = &pseudotropine_anankes;\ntrigonum_lienor = &ewall_relucted;\nbitartrate_restitutionist = &trigonum_lienor;\npalladinized_cuspated = &bitartrate_restitutionist;\nsmeer_caddishly = &palladinized_cuspated;\nmilhaud_osnabrock = &smeer_caddishly;\nxenicus_drowsily = &milhaud_osnabrock;\naniela_semipendulous = &xenicus_drowsily;\nergonomically_bioflavonoid = &aniela_semipendulous;\nempestic_doxologizing = &ergonomically_bioflavonoid;\nsoldiership_anticontagion = &empestic_doxologizing;\nscorings_seraphs = &soldiership_anticontagion;\ncragwork_heraldize = &scorings_seraphs;\n \n","target":0}
{"idx":19633,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19634,"code":"empestic_doxologizing = &ergonomically_bioflavonoid;\nsoldiership_anticontagion = &empestic_doxologizing;\nscorings_seraphs = &soldiership_anticontagion;\ncragwork_heraldize = &scorings_seraphs;\nanno_depertible = &cragwork_heraldize;\ncoheirs_panoramic = &anno_depertible;\nundrag_hairmonger = &coheirs_panoramic;\ndiaglyphic_wimpling = &undrag_hairmonger;\nguttery_story = &diaglyphic_wimpling;\nsyndicator_spermoviduct = &guttery_story;\nboulez_shirt = &syndicator_spermoviduct;\nlaurelton_descanso = &boulez_shirt;\nlejeune_prud = &laurelton_descanso;\ndisaffectation_siamese = &lejeune_prud;\nprotogelatose_outstanding = &disaffectation_siamese;\npolysemous_kaohsiung = &protogelatose_outstanding;\nbuhlworks_reclassified = &polysemous_kaohsiung;\noverbepatched_myzostomatous = &buhlworks_reclassified;\nbask_presspack = &overbepatched_myzostomatous;\ncorniculate_animateness = &bask_presspack;\ndiazine_hoffer = &corniculate_animateness;\ndechlog_gameless = &diazine_hoffer;\nclavellated_gadso = &dechlog_gameless;\nsymbiotics_budgetful = &clavellated_gadso;\nvariegate_undistrusted = &symbiotics_budgetful;\nscratchy_yuleblock = &variegate_undistrusted;\nantistimulant_lingulae = &scratchy_yuleblock;\nmucolytic_relayman = &antistimulant_lingulae;\nkalsomined_jerseyed = &mucolytic_relayman;\nfree(((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *kalsomined_jerseyed))))))))))))))))))))))))))))))))))))))))))))))))))));\n \n","target":0}
{"idx":19635,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19636,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19637,"code":"stonesoup_num = atoi(lavi_protege);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19638,"code":"unsigned int **stonesoup_buffer_array = 0;\nlavi_protege = ((char *)hiring_polygamous . hypobatholithic_forcat);\nstonesoup_num = atoi(lavi_protege);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19639,"code":"if (hiring_polygamous . hypobatholithic_forcat != 0)\nfree(((char *)hiring_polygamous . hypobatholithic_forcat));\n \n","target":0}
{"idx":19640,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19641,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19642,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *octometer_oxfordist);\n \n","target":0}
{"idx":19643,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19644,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19645,"code":"return 0;\nstruct templardom_purbach intentively_solihull;\nimperturbably_extrasacerdotal[5] = intentively_solihull;\nbaghouse_hybridation = 5;\nbatum_nonconvective = &baghouse_hybridation;\nflatteur_pariah =  *(imperturbably_extrasacerdotal +  *batum_nonconvective);\nFAITOUR_INHELDE(flatteur_pariah);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid aleochara_epirotulian(struct templardom_purbach outrows_olived)\ncobh_unguileful = ((char *)outrows_olived . bagpuize_longsome);\nif (strlen(cobh_unguileful) > 0 &&\nstonesoup_num_files = strtoul(cobh_unguileful,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_handle_taint(char *octometer_oxfordist)\nintentively_solihull . bagpuize_longsome = ((char *)octometer_oxfordist);\nflatteur_pariah =  *(imperturbably_extrasacerdotal +  *batum_nonconvective);\nFAITOUR_INHELDE(flatteur_pariah);\n \n","target":1}
{"idx":19646,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19647,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19648,"code":"void stonesoup_handle_taint(char *octometer_oxfordist)\nstruct templardom_purbach intentively_solihull;\nintentively_solihull . bagpuize_longsome = ((char *)octometer_oxfordist);\nimperturbably_extrasacerdotal[5] = intentively_solihull;\nbaghouse_hybridation = 5;\nbatum_nonconvective = &baghouse_hybridation;\nflatteur_pariah =  *(imperturbably_extrasacerdotal +  *batum_nonconvective);\nFAITOUR_INHELDE(flatteur_pariah);\nvoid aleochara_epirotulian(struct templardom_purbach outrows_olived)\nfree(((char *)outrows_olived . bagpuize_longsome));\n \n","target":0}
{"idx":19649,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19650,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&exquisitism_layups,\"CHORALES_CONGLUTINATION\");\nbebite_lavalette(unconsentient_noctilio);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], covinous_camelopardidae);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19651,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&exquisitism_layups,\"CHORALES_CONGLUTINATION\");\nbebite_lavalette(unconsentient_noctilio);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], covinous_camelopardidae);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19652,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19653,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19654,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *exquisitism_layups;;\nstonesoup_read_taint(&exquisitism_layups,\"CHORALES_CONGLUTINATION\");\nunconsentient_noctilio = ((void *)exquisitism_layups);\nbebite_lavalette(unconsentient_noctilio);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&exquisitism_layups,\"CHORALES_CONGLUTINATION\");\nunconsentient_noctilio = ((void *)exquisitism_layups);\nbebite_lavalette(unconsentient_noctilio);\nvoid bebite_lavalette(void *const boxer_fortescue)\nfree(((char *)((char *)((void *)boxer_fortescue))));\n \n","target":0}
{"idx":19655,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19656,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19657,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19658,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19659,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&pheneticist_trinity,\"CERCARIA_PREWRAPPED\");\nhylegiacal_ostectomies(trachinoid_pandarctos,ringle_keltics);\nhylegiacal_ostectomies(ganoidean_bask,columellae_waggie);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19660,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&pheneticist_trinity,\"CERCARIA_PREWRAPPED\");\nhylegiacal_ostectomies(trachinoid_pandarctos,ringle_keltics);\nhylegiacal_ostectomies(ganoidean_bask,columellae_waggie);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19661,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19662,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19663,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *pheneticist_trinity;\nstonesoup_read_taint(&pheneticist_trinity,\"CERCARIA_PREWRAPPED\");\nwhoreship_complaints[2] = pheneticist_trinity;\nprecontest_irradiator = whoreship_complaints;\nringle_keltics = precontest_irradiator + 5;\nhylegiacal_ostectomies(trachinoid_pandarctos,ringle_keltics);\nhylegiacal_ostectomies(ganoidean_bask,columellae_waggie);\nvoid hylegiacal_ostectomies(int ganoidean_bask,char **columellae_waggie)\nfree(((char *)(columellae_waggie - 5)[2]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&pheneticist_trinity,\"CERCARIA_PREWRAPPED\");\nwhoreship_complaints[2] = pheneticist_trinity;\nprecontest_irradiator = whoreship_complaints;\nringle_keltics = precontest_irradiator + 5;\nhylegiacal_ostectomies(trachinoid_pandarctos,ringle_keltics);\n \n","target":0}
{"idx":19664,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19665,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19666,"code":"stonesoup_num = atoi(obscures_hallucinations);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19667,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19668,"code":"char *wowser_hidable = 0;\nhousecarl_flooie(&wowser_hidable);\nlimed_clemen(wowser_hidable);\nunsigned int **stonesoup_buffer_array = 0;\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid limed_clemen(char *const oldening_healey)\nobscures_hallucinations = ((char *)((char *)oldening_healey));\nstonesoup_num = atoi(obscures_hallucinations);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19669,"code":"char *wowser_hidable = 0;\nhousecarl_flooie(&wowser_hidable);\nlimed_clemen(wowser_hidable);\nvoid limed_clemen(char *const oldening_healey)\nfree(((char *)((char *)oldening_healey)));\n \n","target":0}
{"idx":19670,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19671,"code":"stonesoup_num = atoi(sophy_bronteon);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19672,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *synn_detassel);\n \n","target":0}
{"idx":19673,"code":"void stonesoup_handle_taint(char *synn_detassel)\nvanillic_scrobicula[43] = synn_detassel;\narioian_rehabilitative = vanillic_scrobicula;\nrecallist_thalerophagous = arioian_rehabilitative + 5;\naluminium_coachability(finable_sardinia,recallist_thalerophagous);\nvoid aluminium_coachability(int empyreans_dudevant,char **aquamarines_hardline)\naluminium_coachability(empyreans_dudevant,aquamarines_hardline);\nfree(((char *)(aquamarines_hardline - 5)[43]));\n \n","target":0}
{"idx":19674,"code":"unsigned int **stonesoup_buffer_array = 0;\nsophy_bronteon = ((char *)(aquamarines_hardline - 5)[43]);\nstonesoup_num = atoi(sophy_bronteon);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19675,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19676,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19677,"code":"taboparalysis_unresiliently = ((int )(strlen(leathernecks_widen)));\nceratiidae_crociary = ((char *)(malloc(taboparalysis_unresiliently + 1)));\nif (ceratiidae_crociary == 0) {\nmemset(ceratiidae_crociary,0,taboparalysis_unresiliently + 1);\nmemcpy(ceratiidae_crociary,leathernecks_widen,taboparalysis_unresiliently);\npolyzoaria_wefts[5] = ceratiidae_crociary;\narbitrer_fractiousness =  *(polyzoaria_wefts +  *nookiest_passulate);\nmeloncus_teethiest = ((char *)arbitrer_fractiousness);\nif (strlen(meloncus_teethiest) > 1 &&\nmeloncus_teethiest[0] == '-') {\nif (strlen(meloncus_teethiest) > 1 &&\nstonesoup_stack_size = strtoul(meloncus_teethiest,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nif (arbitrer_fractiousness != 0)\nfree(((char *)arbitrer_fractiousness));\n \n","target":1}
{"idx":19678,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19679,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19680,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *leathernecks_widen;;\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\ntaboparalysis_unresiliently = ((int )(strlen(leathernecks_widen)));\nmemcpy(ceratiidae_crociary,leathernecks_widen,taboparalysis_unresiliently);\nfree(((char *)leathernecks_widen));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\ntaboparalysis_unresiliently = ((int )(strlen(leathernecks_widen)));\nmemcpy(ceratiidae_crociary,leathernecks_widen,taboparalysis_unresiliently);\nfree(((char *)leathernecks_widen));\n \n","target":0}
{"idx":19681,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19682,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *leathernecks_widen;;\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\ntaboparalysis_unresiliently = ((int )(strlen(leathernecks_widen)));\nceratiidae_crociary = ((char *)(malloc(taboparalysis_unresiliently + 1)));\nmemset(ceratiidae_crociary,0,taboparalysis_unresiliently + 1);\nmemcpy(ceratiidae_crociary,leathernecks_widen,taboparalysis_unresiliently);\npolyzoaria_wefts[5] = ceratiidae_crociary;\nfierier_almight = 5;\nnookiest_passulate = &fierier_almight;\narbitrer_fractiousness =  *(polyzoaria_wefts +  *nookiest_passulate);\nfree(((char *)arbitrer_fractiousness));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&leathernecks_widen,\"ANIMALIZING_OUTRATING\");\ntaboparalysis_unresiliently = ((int )(strlen(leathernecks_widen)));\nmemcpy(ceratiidae_crociary,leathernecks_widen,taboparalysis_unresiliently);\npolyzoaria_wefts[5] = ceratiidae_crociary;\narbitrer_fractiousness =  *(polyzoaria_wefts +  *nookiest_passulate);\nfree(((char *)arbitrer_fractiousness));\n \n","target":0}
{"idx":19683,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19684,"code":"stonesoup_num = atoi(diplopy_wadmal);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19685,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19686,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19687,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19688,"code":"void flexuosities_twain(char **puccinia_continuousness)\nunsigned int **stonesoup_buffer_array = 0;\ndiplopy_wadmal = ((char *)puccinia_continuousness[60]);\nstonesoup_num = atoi(diplopy_wadmal);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19689,"code":"void flexuosities_twain(char **puccinia_continuousness)\nif (puccinia_continuousness[60] != 0)\nfree(((char *)puccinia_continuousness[60]));\n \n","target":0}
{"idx":19690,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19691,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19692,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19693,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19694,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19695,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19696,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19697,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19698,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19699,"code":"if (( *(poodler_unspecific - 5)) . unspiritualised_phagocytism != 0)\nfree(((char *)( *(poodler_unspecific - 5)) . unspiritualised_phagocytism));\n \n","target":0}
{"idx":19700,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nsapremias_bergomask = ((char *)( *(poodler_unspecific - 5)) . unspiritualised_phagocytism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(sapremias_bergomask,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19701,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19702,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nsapremias_bergomask = ((char *)( *(poodler_unspecific - 5)) . unspiritualised_phagocytism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(sapremias_bergomask,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19703,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nsapremias_bergomask = ((char *)( *(poodler_unspecific - 5)) . unspiritualised_phagocytism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(sapremias_bergomask,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19704,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *redeprive_wetters)\nif (redeprive_wetters != 0) {;\nsasan_steppenwolf = redeprive_wetters;\ninterglyph_hinter[5] = sasan_steppenwolf;\nmonas_eyewashes =  *(interglyph_hinter +  *tortulaceous_dorsomedian);\nweldment_mayorality = ((char *)monas_eyewashes);\nstonesoup_num = atoi(weldment_mayorality);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (monas_eyewashes != 0)\nfree(((char *)monas_eyewashes));\n \n","target":1}
{"idx":19705,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nunsigned int **stonesoup_buffer_array = 0;\nspaework_hemostats = 5;\ntortulaceous_dorsomedian = &spaework_hemostats;\nmonas_eyewashes =  *(interglyph_hinter +  *tortulaceous_dorsomedian);\nweldment_mayorality = ((char *)monas_eyewashes);\nstonesoup_num = atoi(weldment_mayorality);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_handle_taint(char *redeprive_wetters)\nsasan_steppenwolf = redeprive_wetters;\ninterglyph_hinter[5] = sasan_steppenwolf;\nmonas_eyewashes =  *(interglyph_hinter +  *tortulaceous_dorsomedian);\nweldment_mayorality = ((char *)monas_eyewashes);\nstonesoup_num = atoi(weldment_mayorality);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19706,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nspaework_hemostats = 5;\ntortulaceous_dorsomedian = &spaework_hemostats;\nmonas_eyewashes =  *(interglyph_hinter +  *tortulaceous_dorsomedian);\nfree(((char *)monas_eyewashes));\nvoid stonesoup_handle_taint(char *redeprive_wetters)\nsasan_steppenwolf = redeprive_wetters;\ninterglyph_hinter[5] = sasan_steppenwolf;\nmonas_eyewashes =  *(interglyph_hinter +  *tortulaceous_dorsomedian);\nfree(((char *)monas_eyewashes));\n \n","target":0}
{"idx":19707,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19708,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19709,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19710,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19711,"code":"welcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmissuits_philomusical = ((char *)(malloc(welcomes_methoxamine + 1)));\nif (missuits_philomusical == 0) {\nmemset(missuits_philomusical,0,welcomes_methoxamine + 1);\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\ntriflet_asclepin = &missuits_philomusical;\ntoxosozin_reoccasion = ((char **)(((unsigned long )triflet_asclepin) * holders_eavesing * holders_eavesing)) + 5;\nslowheartedness_trilliums(flaperon_paradoxurinae,toxosozin_reoccasion);\nvoid slowheartedness_trilliums(int muldrow_unmistaking,char **sykerly_subornative)\nslowheartedness_trilliums(muldrow_unmistaking,sykerly_subornative);\nportendment_wbc = ((char *)( *(sykerly_subornative - 5)));\nstonesoup_num = atoi(portendment_wbc);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif ( *(sykerly_subornative - 5) != 0)\nfree(((char *)( *(sykerly_subornative - 5))));\n \n","target":1}
{"idx":19712,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *epithetical_ctenidial);\n \n","target":0}
{"idx":19713,"code":"welcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmissuits_philomusical = ((char *)(malloc(welcomes_methoxamine + 1)));\nmemset(missuits_philomusical,0,welcomes_methoxamine + 1);\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\nholders_eavesing = 1;\ntriflet_asclepin = &missuits_philomusical;\ntoxosozin_reoccasion = ((char **)(((unsigned long )triflet_asclepin) * holders_eavesing * holders_eavesing)) + 5;\nslowheartedness_trilliums(flaperon_paradoxurinae,toxosozin_reoccasion);\nslowheartedness_trilliums(muldrow_unmistaking,sykerly_subornative);\nvoid slowheartedness_trilliums(int muldrow_unmistaking,char **sykerly_subornative)\nfree(((char *)( *(sykerly_subornative - 5))));\nvoid stonesoup_handle_taint(char *epithetical_ctenidial)\nwelcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\ntriflet_asclepin = &missuits_philomusical;\ntoxosozin_reoccasion = ((char **)(((unsigned long )triflet_asclepin) * holders_eavesing * holders_eavesing)) + 5;\nslowheartedness_trilliums(flaperon_paradoxurinae,toxosozin_reoccasion);\n \n","target":0}
{"idx":19714,"code":"welcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmissuits_philomusical = ((char *)(malloc(welcomes_methoxamine + 1)));\nmemset(missuits_philomusical,0,welcomes_methoxamine + 1);\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\nholders_eavesing = 1;\ntriflet_asclepin = &missuits_philomusical;\ntoxosozin_reoccasion = ((char **)(((unsigned long )triflet_asclepin) * holders_eavesing * holders_eavesing)) + 5;\nslowheartedness_trilliums(flaperon_paradoxurinae,toxosozin_reoccasion);\nunsigned int **stonesoup_buffer_array = 0;\nslowheartedness_trilliums(muldrow_unmistaking,sykerly_subornative);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid slowheartedness_trilliums(int muldrow_unmistaking,char **sykerly_subornative)\nportendment_wbc = ((char *)( *(sykerly_subornative - 5)));\nstonesoup_num = atoi(portendment_wbc);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_handle_taint(char *epithetical_ctenidial)\nwelcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\ntriflet_asclepin = &missuits_philomusical;\ntoxosozin_reoccasion = ((char **)(((unsigned long )triflet_asclepin) * holders_eavesing * holders_eavesing)) + 5;\nslowheartedness_trilliums(flaperon_paradoxurinae,toxosozin_reoccasion);\n \n","target":1}
{"idx":19715,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19716,"code":"void stonesoup_handle_taint(char *epithetical_ctenidial)\nwelcomes_methoxamine = ((int )(strlen(epithetical_ctenidial)));\nmemcpy(missuits_philomusical,epithetical_ctenidial,welcomes_methoxamine);\nfree(((char *)epithetical_ctenidial));\n \n","target":0}
{"idx":19717,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *sich_eustatic)\nif (sich_eustatic != 0) {;\nlamp_predikant = ((char *)sich_eustatic);\nstonesoup_files = fopen(lamp_predikant,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0) {\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nif (sich_eustatic != 0)\nfree(((char *)sich_eustatic));\nvoid stonesoup_cleanup(FILE **ptrs,int size)\nif (ptrs[i] != 0) {\nfclose(ptrs[i]);\n \n","target":1}
{"idx":19718,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19719,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19720,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *sich_eustatic)\nfree(((char *)sich_eustatic));\n \n","target":0}
{"idx":19721,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19722,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&beaupere_caligated,\"VAPORINGLY_DYSCRASITE\");\nEAVEDROPPING_PROTOACTINIUM(desired_vincent);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19723,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&beaupere_caligated,\"VAPORINGLY_DYSCRASITE\");\nEAVEDROPPING_PROTOACTINIUM(desired_vincent);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19724,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19725,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19726,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct statoreceptor_byordinar residencer_overvariety;\nchar *beaupere_caligated;\nstonesoup_read_taint(&beaupere_caligated,\"VAPORINGLY_DYSCRASITE\");\nresidencer_overvariety . tour_jamesstore = ((char *)beaupere_caligated);\nscrawly_phosphonic[5] = residencer_overvariety;\ncalcifuge_kryptocyanine = 5;\nfillmass_concents = &calcifuge_kryptocyanine;\ndesired_vincent =  *(scrawly_phosphonic +  *fillmass_concents);\nEAVEDROPPING_PROTOACTINIUM(desired_vincent);\nvoid morsel_kirima(struct statoreceptor_byordinar serries_viole)\nfree(((char *)serries_viole . tour_jamesstore));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&beaupere_caligated,\"VAPORINGLY_DYSCRASITE\");\nresidencer_overvariety . tour_jamesstore = ((char *)beaupere_caligated);\ndesired_vincent =  *(scrawly_phosphonic +  *fillmass_concents);\nEAVEDROPPING_PROTOACTINIUM(desired_vincent);\n \n","target":0}
{"idx":19727,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&tradiment_ossie,\"FATTILY_PLENISHES\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19728,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&tradiment_ossie,\"FATTILY_PLENISHES\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19729,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19730,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19731,"code":"if (( *biblist_anallantoidean) . shluh_agamemnon != 0)\nfree(((char *)( *biblist_anallantoidean) . shluh_agamemnon));\n \n","target":0}
{"idx":19732,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19733,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19734,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&joeyes_josey,\"HOLLOWARE_PINHOLES\");\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&joeyes_josey,\"HOLLOWARE_PINHOLES\");\nPARBATE_RUBBERY(calimere_grisailles);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19735,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&joeyes_josey,\"HOLLOWARE_PINHOLES\");\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&joeyes_josey,\"HOLLOWARE_PINHOLES\");\nPARBATE_RUBBERY(calimere_grisailles);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19736,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19737,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19738,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\naffective_attius = ((char *)( *(blintz_amphitheatrical - 5)) . soldieries_lampooner);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(affective_attius,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19739,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\naffective_attius = ((char *)( *(blintz_amphitheatrical - 5)) . soldieries_lampooner);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(affective_attius,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":19740,"code":"if (( *(blintz_amphitheatrical - 5)) . soldieries_lampooner != 0)\nfree(((char *)( *(blintz_amphitheatrical - 5)) . soldieries_lampooner));\n \n","target":0}
{"idx":19741,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\naffective_attius = ((char *)( *(blintz_amphitheatrical - 5)) . soldieries_lampooner);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(affective_attius,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19742,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&gargler_waukesha,\"ETYMA_POLYSYMMETRICAL\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19743,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&gargler_waukesha,\"ETYMA_POLYSYMMETRICAL\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19744,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *gargler_waukesha;;\nstonesoup_read_taint(&gargler_waukesha,\"ETYMA_POLYSYMMETRICAL\");\nelaterometer_nonaccentually = ((void *)gargler_waukesha);\nunenshrined_spearman = 1;\nanamnesis_cantboard = &elaterometer_nonaccentually;\nusrc_sigrim = ((void **)(((unsigned long )anamnesis_cantboard) * unenshrined_spearman * unenshrined_spearman)) + 5;\nfree(((char *)((char *)( *(usrc_sigrim - 5)))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&gargler_waukesha,\"ETYMA_POLYSYMMETRICAL\");\nelaterometer_nonaccentually = ((void *)gargler_waukesha);\nanamnesis_cantboard = &elaterometer_nonaccentually;\nusrc_sigrim = ((void **)(((unsigned long )anamnesis_cantboard) * unenshrined_spearman * unenshrined_spearman)) + 5;\nfree(((char *)((char *)( *(usrc_sigrim - 5)))));\n \n","target":0}
{"idx":19745,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19746,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19747,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19748,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19749,"code":"stonesoup_num = atoi(subindustry_misconstrual);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19750,"code":"void americas_squid(void *recommencement_cantharides)\nunsigned int **stonesoup_buffer_array = 0;\nsubindustry_misconstrual = ((char *)((char *)recommencement_cantharides));\nstonesoup_num = atoi(subindustry_misconstrual);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19751,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19752,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19753,"code":"stonesoup_num = atoi(perioecic_mycetophagous);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19754,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19755,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19756,"code":"unsigned int **stonesoup_buffer_array = 0;\nperioecic_mycetophagous = ((char *)temiak_buffalo . posterish_bmw);\nstonesoup_num = atoi(perioecic_mycetophagous);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19757,"code":"if (temiak_buffalo . posterish_bmw != 0)\nfree(((char *)temiak_buffalo . posterish_bmw));\n \n","target":0}
{"idx":19758,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19759,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19760,"code":"nonvascularly_epidermolysis = ((int )(strlen(ribozos_smelterville)));\ngrunswel_unquested = ((char *)(malloc(nonvascularly_epidermolysis + 1)));\nif (grunswel_unquested == 0) {\nmemset(grunswel_unquested,0,nonvascularly_epidermolysis + 1);\nmemcpy(grunswel_unquested,ribozos_smelterville,nonvascularly_epidermolysis);\n*musterer_bugloss = grunswel_unquested;\n \n","target":0}
{"idx":19761,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19762,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":19763,"code":"char *bayminette_agitated = 0;\nquaiches_southwestwards(&bayminette_agitated);\nmalamutes_disapprovingly = &bayminette_agitated;\nfree(((char *)( *malamutes_disapprovingly)));\n \n","target":0}
{"idx":19764,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19765,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19766,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19767,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19768,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19769,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19770,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19771,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19772,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19773,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19774,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19775,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19776,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19777,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19778,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstilbestrol_antihemorrhagic(polygenesist_outness,blowlamp_attitudinise);\nstilbestrol_antihemorrhagic(redo_markkaa,leetonia_reproaching);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], aglipayano_hypostrophe);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19779,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstilbestrol_antihemorrhagic(polygenesist_outness,blowlamp_attitudinise);\nstilbestrol_antihemorrhagic(redo_markkaa,leetonia_reproaching);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], aglipayano_hypostrophe);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19780,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19781,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19782,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nretem_aleatoric = scytheless_proliferously(albinal_unconquerable);\ntabifical_aklog(communise_nonelectrolyte,retem_aleatoric);\ntabifical_aklog(mitrer_quangos,hissing_ghees);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19783,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19784,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nretem_aleatoric = scytheless_proliferously(albinal_unconquerable);\ntabifical_aklog(communise_nonelectrolyte,retem_aleatoric);\ntabifical_aklog(mitrer_quangos,hissing_ghees);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19785,"code":"rouges_laryngometry = ((int )(strlen(sterilise_wibaux)));\nalbinal_unconquerable = ((char *)(malloc(rouges_laryngometry + 1)));\nif (albinal_unconquerable == 0) {\nmemset(albinal_unconquerable,0,rouges_laryngometry + 1);\nmemcpy(albinal_unconquerable,sterilise_wibaux,rouges_laryngometry);\nretem_aleatoric = scytheless_proliferously(albinal_unconquerable);\nchar *scytheless_proliferously(char *afton_euclid);\n \n","target":0}
{"idx":19786,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19787,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19788,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19789,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19790,"code":"retem_aleatoric = scytheless_proliferously(albinal_unconquerable);\ntabifical_aklog(communise_nonelectrolyte,retem_aleatoric);\ntabifical_aklog(mitrer_quangos,hissing_ghees);\nvoid tabifical_aklog(int mitrer_quangos,char *hissing_ghees)\nfree(((char *)hissing_ghees));\n \n","target":0}
{"idx":19791,"code":"return 0;\nretem_aleatoric = scytheless_proliferously(albinal_unconquerable);\ntabifical_aklog(communise_nonelectrolyte,retem_aleatoric);\ntabifical_aklog(mitrer_quangos,hissing_ghees);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid tabifical_aklog(int mitrer_quangos,char *hissing_ghees)\ncravatting_carassow = ((char *)hissing_ghees);\nif (strlen(cravatting_carassow) > 0 &&\nstonesoup_num_files = strtoul(cravatting_carassow,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19792,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&chylopoetic_orthopteron,\"9510\",fraising_mantle);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\n \n","target":0}
{"idx":19793,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&chylopoetic_orthopteron,\"9510\",fraising_mantle);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\n \n","target":0}
{"idx":19794,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19795,"code":"void biallyl_anticorn(phaneroscope_nonfrugally gudrun_sapotilha)\ngerara_basilicate(gudrun_sapotilha);\nvoid gerara_basilicate(phaneroscope_nonfrugally morcote_optimality)\nfree(((char *)morcote_optimality));\n \n","target":0}
{"idx":19796,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19797,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nrubie_subindustry(triflet_buhl,varahan_vse);\nrubie_subindustry(sandan_knurlier,geiger_filicide);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19798,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nrubie_subindustry(triflet_buhl,varahan_vse);\nrubie_subindustry(sandan_knurlier,geiger_filicide);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19799,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19800,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nstruct pelecypodous_pantheologist bidialectalism_reverendship;\nchar *unsubjugate_gotz;\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nbidialectalism_reverendship . hypogenetic_hemalbumen = ((char *)unsubjugate_gotz);\ntalliated_hoppercar[5] = bidialectalism_reverendship;\nsoyas_tennyson = 5;\nrevealment_renderers = &soyas_tennyson;\nvarahan_vse =  *(talliated_hoppercar +  *revealment_renderers);\nrubie_subindustry(triflet_buhl,varahan_vse);\nvoid rubie_subindustry(int sandan_knurlier,struct pelecypodous_pantheologist geiger_filicide)\nfree(((char *)geiger_filicide . hypogenetic_hemalbumen));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&unsubjugate_gotz,\"GROUTER_MEGADONTISM\");\nbidialectalism_reverendship . hypogenetic_hemalbumen = ((char *)unsubjugate_gotz);\nvarahan_vse =  *(talliated_hoppercar +  *revealment_renderers);\nrubie_subindustry(triflet_buhl,varahan_vse);\n \n","target":0}
{"idx":19801,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19802,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpMTb0hY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (strlen(hymenopteran_pupilar) > 1 &&\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (strlen(hymenopteran_pupilar) > 1 &&\nif (finlike_coronitis != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19803,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpMTb0hY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (strlen(hymenopteran_pupilar) > 1 &&\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (strlen(hymenopteran_pupilar) > 1 &&\nif (finlike_coronitis != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19804,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19805,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19806,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19807,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19808,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19809,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19810,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19811,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19812,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19813,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19814,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19815,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19816,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19817,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&poorish_zygaenidae,\"PROPAGAND_CARDIAL\");\nrosace_pulers = yelped_prender(steerswoman_tellinacea);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], montaigne_strychnos);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19818,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&poorish_zygaenidae,\"PROPAGAND_CARDIAL\");\nrosace_pulers = yelped_prender(steerswoman_tellinacea);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], montaigne_strychnos);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19819,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19820,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19821,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *poorish_zygaenidae;;\nstonesoup_read_taint(&poorish_zygaenidae,\"PROPAGAND_CARDIAL\");\nsteerswoman_tellinacea = ((void *)poorish_zygaenidae);\nrosace_pulers = yelped_prender(steerswoman_tellinacea);\nvoid *yelped_prender(void *attinge_laxativeness)\nreturn attinge_laxativeness;\nrosace_pulers = yelped_prender(steerswoman_tellinacea);\nfree(((char *)((char *)rosace_pulers)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&poorish_zygaenidae,\"PROPAGAND_CARDIAL\");\nsteerswoman_tellinacea = ((void *)poorish_zygaenidae);\nrosace_pulers = yelped_prender(steerswoman_tellinacea);\n \n","target":0}
{"idx":19822,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19823,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nunabsolvable_demiracle(1,habilitate_oopodal);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19824,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nif (((long )(calc_bucket(hctl,currElement -> hashvalue))) == old_bucket) {\nstonesoup_setup_printf_context();\nunabsolvable_demiracle(1,habilitate_oopodal);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19825,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19826,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19827,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *unesco_godship);\n \n","target":0}
{"idx":19828,"code":"mezuzas_diureticalness = ((int )(strlen(unesco_godship)));\nsandie_lobelia = ((char *)(malloc(mezuzas_diureticalness + 1)));\nif (sandie_lobelia == 0) {\nmemset(sandie_lobelia,0,mezuzas_diureticalness + 1);\nmemcpy(sandie_lobelia,unesco_godship,mezuzas_diureticalness);\nprefamously_deprecatoriness(1,sandie_lobelia);\nvoid prefamously_deprecatoriness(int befraught_unsurveyable,... );\n \n","target":0}
{"idx":19829,"code":"stonesoup_num = atoi(iridectomies_gentler);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19830,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19831,"code":"void stonesoup_handle_taint(char *unesco_godship)\nmezuzas_diureticalness = ((int )(strlen(unesco_godship)));\nmemcpy(sandie_lobelia,unesco_godship,mezuzas_diureticalness);\nfree(((char *)unesco_godship));\n \n","target":0}
{"idx":19832,"code":"char *underleased_cheatrie = 0;\nvinni_butterer(valanced_scoops,underleased_cheatrie);\nunsigned int **stonesoup_buffer_array = 0;\nvinni_butterer(periosteal_spurreies,halftones_wheat);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid vinni_butterer(int periosteal_spurreies,char *halftones_wheat)\niridectomies_gentler = ((char *)halftones_wheat);\nstonesoup_num = atoi(iridectomies_gentler);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19833,"code":"char *underleased_cheatrie = 0;\nvinni_butterer(valanced_scoops,underleased_cheatrie);\nvinni_butterer(periosteal_spurreies,halftones_wheat);\nvoid vinni_butterer(int periosteal_spurreies,char *halftones_wheat)\nfree(((char *)halftones_wheat));\n \n","target":0}
{"idx":19834,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19835,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19836,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19837,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19838,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19839,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19840,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19841,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nchar *antifederalist_tibetan;\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nunthwartable_dortmund = ((char *)antifederalist_tibetan);\nif (strlen(unthwartable_dortmund) > 0 &&\nstonesoup_num_files = strtoul(unthwartable_dortmund,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nunthwartable_dortmund = ((char *)antifederalist_tibetan);\nif (strlen(unthwartable_dortmund) > 0 &&\nstonesoup_num_files = strtoul(unthwartable_dortmund,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19842,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19843,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19844,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *antifederalist_tibetan;\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nfree(((char *)antifederalist_tibetan));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&antifederalist_tibetan,\"STONESFIELD_BIGLY\");\nfree(((char *)antifederalist_tibetan));\n \n","target":0}
{"idx":19845,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19846,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19847,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19848,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19849,"code":"void bouzoun_condoner(char *cohobated_inexpungeable)\nabacus_badass(cohobated_inexpungeable);\nvoid abacus_badass(char *cathectic_savagedom)\nfree(((char *)cathectic_savagedom));\n \n","target":0}
{"idx":19850,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19851,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cityfolk_triumphancy,\"RICHTON_SNEAKSBY\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19852,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19853,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19854,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cityfolk_triumphancy,\"RICHTON_SNEAKSBY\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19855,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19856,"code":"if (( *(influencive_requiescat - 5)) . nonirritability_tigris != 0)\nfree(((char *)( *(influencive_requiescat - 5)) . nonirritability_tigris));\n \n","target":0}
{"idx":19857,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19858,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19859,"code":"return 0;\nrotifers_tormae = ((char *)( *(influencive_requiescat - 5)) . nonirritability_tigris);\nif (strlen(rotifers_tormae) > 0 &&\nstonesoup_num_files = strtoul(rotifers_tormae,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19860,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19861,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19862,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19863,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19864,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19865,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19866,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19867,"code":"return 0;\nunion chasselas_gibsons tinty_vertebroiliac = {0};\nradicose_lamarckian(&tinty_vertebroiliac);\nslatersville_belvedered(tinty_vertebroiliac);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid slatersville_belvedered(const union chasselas_gibsons grega_lento)\ncarex_rbhc = ((char *)((union chasselas_gibsons )grega_lento) . unruefully_beeson);\nif (strlen(carex_rbhc) > 0 &&\nstonesoup_num_files = strtoul(carex_rbhc,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19868,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19869,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19870,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19871,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":19872,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19873,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19874,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19875,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19876,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19877,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19878,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19879,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19880,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19881,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19882,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19883,"code":"if (( *unacquitted_dysmenorrhagia) . woordbook_lemna != 0)\nfree(((char *)( *unacquitted_dysmenorrhagia) . woordbook_lemna));\n \n","target":0}
{"idx":19884,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sourly_heumite,\"4257\",chinpiece_actinolite);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19885,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sourly_heumite,\"4257\",chinpiece_actinolite);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19886,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19887,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19888,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint chinpiece_actinolite = 45;\nchar *sourly_heumite;\nstonesoup_read_taint(&sourly_heumite,\"4257\",chinpiece_actinolite);\nluke_anarcotin = sourly_heumite;\nselenotropic_falsities = &luke_anarcotin;\nfree(((char *)( *selenotropic_falsities)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&sourly_heumite,\"4257\",chinpiece_actinolite);\nluke_anarcotin = sourly_heumite;\nselenotropic_falsities = &luke_anarcotin;\nfree(((char *)( *selenotropic_falsities)));\n \n","target":0}
{"idx":19889,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19890,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19891,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19892,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19893,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nchar *allochezia_filings;\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nodus_schulze[5] = allochezia_filings;\noops_checksums[1] = 5;\nrimola_eshin =  *(odus_schulze + oops_checksums[1]);\ntetrodon_supranaturalism = ((char *)rimola_eshin);\nif (strlen(tetrodon_supranaturalism) > 0 &&\nstonesoup_num_files = strtoul(tetrodon_supranaturalism,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nodus_schulze[5] = allochezia_filings;\nrimola_eshin =  *(odus_schulze + oops_checksums[1]);\ntetrodon_supranaturalism = ((char *)rimola_eshin);\nif (strlen(tetrodon_supranaturalism) > 0 &&\nstonesoup_num_files = strtoul(tetrodon_supranaturalism,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19894,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19895,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19896,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *allochezia_filings;\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nodus_schulze[5] = allochezia_filings;\noops_checksums[1] = 5;\nrimola_eshin =  *(odus_schulze + oops_checksums[1]);\nfree(((char *)rimola_eshin));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&allochezia_filings,\"HORNBILL_UNOXIDIZED\");\nodus_schulze[5] = allochezia_filings;\nrimola_eshin =  *(odus_schulze + oops_checksums[1]);\nfree(((char *)rimola_eshin));\n \n","target":0}
{"idx":19897,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19898,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *changedness_vitrage);\n \n","target":0}
{"idx":19899,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19900,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19901,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19902,"code":"return 0;\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_handle_taint(char *changedness_vitrage)\nunmysticize_unhairing . festucous_mayotte = ((char *)changedness_vitrage);\nBAMUSED_GENYOPHRYNIDAE(unmysticize_unhairing);\nvoid survivors_madawaska(struct mustelus_dillon arbalister_collagist)\nsnaffled_falcidian = ((char *)arbalister_collagist . festucous_mayotte);\nif (strlen(snaffled_falcidian) > 0 &&\nstonesoup_num_files = strtoul(snaffled_falcidian,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":19903,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":19904,"code":"void stonesoup_handle_taint(char *changedness_vitrage)\nunmysticize_unhairing . festucous_mayotte = ((char *)changedness_vitrage);\nBAMUSED_GENYOPHRYNIDAE(unmysticize_unhairing);\nvoid survivors_madawaska(struct mustelus_dillon arbalister_collagist)\nfree(((char *)arbalister_collagist . festucous_mayotte));\n \n","target":0}
{"idx":19905,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19906,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nIRRECOGNITION_REORDINATE(crazycat_tichorhine);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], wraxle_uroscopist);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19907,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nIRRECOGNITION_REORDINATE(crazycat_tichorhine);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], wraxle_uroscopist);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19908,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19909,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19910,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *windsocks_romanticity);\n \n","target":0}
{"idx":19911,"code":"stonesoup_num = atoi(solipedous_benzamide);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":19912,"code":"unsigned int **stonesoup_buffer_array = 0;\nsolipedous_benzamide = ((char *)microtonality_cuspated . herrenvolker_floweriness);\nstonesoup_num = atoi(solipedous_benzamide);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":19913,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19914,"code":"if (microtonality_cuspated . herrenvolker_floweriness != 0)\nfree(((char *)microtonality_cuspated . herrenvolker_floweriness));\n \n","target":0}
{"idx":19915,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\nrepatency_sleepward(downtake_albigensian);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19916,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\nrepatency_sleepward(downtake_albigensian);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19917,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":19918,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":19919,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar *skirling_repermit;;\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid repatency_sleepward(char **const malacopodous_angiorrhagia)\nfluidly_unblenchingly = ((char *)((char **)malacopodous_angiorrhagia)[21]);\nstonesoup_files = fopen(fluidly_unblenchingly,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19920,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19921,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint rejuvenised_kynurin = 45;\nchar *skirling_repermit;;\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid repatency_sleepward(char **const malacopodous_angiorrhagia)\nfluidly_unblenchingly = ((char *)((char **)malacopodous_angiorrhagia)[21]);\nstonesoup_files = fopen(fluidly_unblenchingly,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\n \n","target":0}
{"idx":19922,"code":"*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar *skirling_repermit;;\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid repatency_sleepward(char **const malacopodous_angiorrhagia)\nfluidly_unblenchingly = ((char *)((char **)malacopodous_angiorrhagia)[21]);\nstonesoup_files = fopen(fluidly_unblenchingly,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":19923,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint rejuvenised_kynurin = 45;\nchar *skirling_repermit;;\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&skirling_repermit,\"1929\",rejuvenised_kynurin);\ndowntake_albigensian[21] = skirling_repermit;\nrepatency_sleepward(downtake_albigensian);\nvoid repatency_sleepward(char **const malacopodous_angiorrhagia)\nfree(((char *)((char **)malacopodous_angiorrhagia)[21]));\n \n","target":0}
{"idx":19924,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19925,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19926,"code":"palmyra_upcrop = ((int )(strlen(galahad_oilpapers)));\ntenour_marchpane = ((char *)(malloc(palmyra_upcrop + 1)));\nif (tenour_marchpane == 0) {\nmemset(tenour_marchpane,0,palmyra_upcrop + 1);\nmemcpy(tenour_marchpane,galahad_oilpapers,palmyra_upcrop);\nreapproachable_rerouted(tenour_marchpane);\nvoid reapproachable_rerouted(char *const aborting_bisectors)\ntotalling_susuidae = ((char *)((char *)aborting_bisectors));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], totalling_susuidae);\nif (((char *)aborting_bisectors) != 0)\nfree(((char *)((char *)aborting_bisectors)));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":19927,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nreapproachable_rerouted(tenour_marchpane);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], totalling_susuidae);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19928,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nreapproachable_rerouted(tenour_marchpane);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], totalling_susuidae);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19929,"code":"galahad_oilpapers = getenv(\"ASTEREOGNOSIS_ANDRIAS\");\npalmyra_upcrop = ((int )(strlen(galahad_oilpapers)));\ntenour_marchpane = ((char *)(malloc(palmyra_upcrop + 1)));\nmemset(tenour_marchpane,0,palmyra_upcrop + 1);\nmemcpy(tenour_marchpane,galahad_oilpapers,palmyra_upcrop);\nreapproachable_rerouted(tenour_marchpane);\nvoid reapproachable_rerouted(char *const aborting_bisectors)\nfree(((char *)((char *)aborting_bisectors)));\n \n","target":0}
{"idx":19930,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19931,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19932,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&kompeni_tanniferous,\"DESIGNEE_PATHONEUROSIS\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19933,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&kompeni_tanniferous,\"DESIGNEE_PATHONEUROSIS\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19934,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19935,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":19936,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19937,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":19938,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":19939,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *kompeni_tanniferous;\nstonesoup_read_taint(&kompeni_tanniferous,\"DESIGNEE_PATHONEUROSIS\");\nfree(((char *)kompeni_tanniferous));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&kompeni_tanniferous,\"DESIGNEE_PATHONEUROSIS\");\nfree(((char *)kompeni_tanniferous));\n \n","target":0}
{"idx":19940,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *persse_impreventable);\n \n","target":0}
{"idx":19941,"code":"void dizdar_virgilism(char *growly_nitrified)\nif (growly_nitrified != 0)\nfree(((char *)growly_nitrified));\n \n","target":0}
{"idx":19942,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19943,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19944,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19945,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19946,"code":"if (( *sinapisine_thunge) . shark_churchwise != 0)\nfree(((char *)( *sinapisine_thunge) . shark_churchwise));\n \n","target":0}
{"idx":19947,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19948,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19949,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19950,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nezechiel_propylidene(reconciliated_isochore);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], exposits_polymeria);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19951,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nezechiel_propylidene(reconciliated_isochore);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], exposits_polymeria);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process received signal: %d\\n\",WTERMSIG(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19952,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19953,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19954,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&parkston_zoologic,\"4224\",waynoka_merise);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nectared_korymboi);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19955,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19956,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&parkston_zoologic,\"4224\",waynoka_merise);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nectared_korymboi);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":19957,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19958,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nstruct rifty_moity unhopeful_binominal;\nint waynoka_merise = 45;\nchar *parkston_zoologic;;\nstonesoup_read_taint(&parkston_zoologic,\"4224\",waynoka_merise);\nunhopeful_binominal . porulous_ridgling = ((char *)parkston_zoologic);\nincases_linen[5] = unhopeful_binominal;\nimputting_baddishness[1] = 5;\ncavorted_bushbody =  *(incases_linen + imputting_baddishness[1]);\nfree(((char *)cavorted_bushbody . porulous_ridgling));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&parkston_zoologic,\"4224\",waynoka_merise);\nunhopeful_binominal . porulous_ridgling = ((char *)parkston_zoologic);\ncavorted_bushbody =  *(incases_linen + imputting_baddishness[1]);\nfree(((char *)cavorted_bushbody . porulous_ridgling));\n \n","target":0}
{"idx":19959,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19960,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19961,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19962,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19963,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19964,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *unprogressive_ballers);\n \n","target":0}
{"idx":19965,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":19966,"code":"void diastematic_navigant(char **porcated_brindlish)\nplenum_sidestroke(porcated_brindlish);\nvoid plenum_sidestroke(char **pemberville_erective)\nfree(((char *)pemberville_erective[19]));\n \n","target":0}
{"idx":19967,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19968,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19969,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19970,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19971,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":19972,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19973,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19974,"code":"void land_demulsify(char **terroristical_wises)\nnicolson_alight(terroristical_wises);\nvoid nicolson_alight(char **erythraean_pastiche)\nfree(((char *)erythraean_pastiche[5]));\n \n","target":0}
{"idx":19975,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19976,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19977,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *kalman_ischiadicus)\nif (kalman_ischiadicus != 0) {;\ntoom_calcific . negrotic_monotron = kalman_ischiadicus;\nendnote_weeks[5] = toom_calcific;\netudes_glyceroxide =  *(endnote_weeks +  *upttorn_unheralded);\nsunset_uranophobia = ((char *)etudes_glyceroxide . negrotic_monotron);\nstonesoup_files = fopen(sunset_uranophobia,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (etudes_glyceroxide . negrotic_monotron != 0)\nfree(((char *)etudes_glyceroxide . negrotic_monotron));\n \n","target":1}
{"idx":19978,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nunion isocercy_chromene toom_calcific;\nendnote_weeks[5] = toom_calcific;\nnonpreference_circumambages = 5;\nupttorn_unheralded = &nonpreference_circumambages;\netudes_glyceroxide =  *(endnote_weeks +  *upttorn_unheralded);\nfree(((char *)etudes_glyceroxide . negrotic_monotron));\nvoid stonesoup_handle_taint(char *kalman_ischiadicus)\ntoom_calcific . negrotic_monotron = kalman_ischiadicus;\netudes_glyceroxide =  *(endnote_weeks +  *upttorn_unheralded);\nfree(((char *)etudes_glyceroxide . negrotic_monotron));\n \n","target":0}
{"idx":19979,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19980,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":19981,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19982,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19983,"code":"void vail_maoriland(const union glassblowings_thiofurfuran prohibition_hannibalian)\nEXCELSIOR_AMPELITIC(prohibition_hannibalian);\nvoid wreathless_godetia(union glassblowings_thiofurfuran imprudently_politicalize)\nfree(((char *)((union glassblowings_thiofurfuran )imprudently_politicalize) . noselite_japingly));\n \n","target":0}
{"idx":19984,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19985,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":19986,"code":"stonesoup_num = atoi(tractor_surmark);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\n \n","target":0}
{"idx":19987,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":19988,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":19989,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":19990,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":19991,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":19992,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":19993,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":19994,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":19995,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":19996,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":19997,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":19998,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":19999,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20000,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20001,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20002,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20003,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20004,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20005,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *decciare_ballow;\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nfree(((char *)decciare_ballow));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nfree(((char *)decciare_ballow));\n \n","target":0}
{"idx":20006,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *decciare_ballow;\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20007,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20008,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20009,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20010,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *decciare_ballow;\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20011,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20012,"code":"*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *decciare_ballow;\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&decciare_ballow,\"SABELLIAN_THURSDAY\");\nwriest_unadmirableness = ((char *)decciare_ballow);\nstonesoup_files = fopen(wriest_unadmirableness,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20013,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20014,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20015,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20016,"code":"void outflaming_overcap(char *firepot_gasser)\nresiduous_caretta(firepot_gasser);\nvoid residuous_caretta(char *factional_commercializing)\nfree(((char *)factional_commercializing));\n \n","target":0}
{"idx":20017,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20018,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20019,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20020,"code":"char *boletic_pantagruelism = 0;\ncomagmatic_vhf(&boletic_pantagruelism);\norganellae_thuluth[5] = boletic_pantagruelism;\npsammite_forkman[1] = 5;\nchasten_brandonville =  *(organellae_thuluth + psammite_forkman[1]);\nfree(((char *)chasten_brandonville));\n \n","target":0}
{"idx":20021,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20022,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20023,"code":"stonesoup_num_files = strtoul(geneserin_cfa,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nstonesoup_printf(\"Creating files\\n\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nfclose(stonesoup_filearray[stonesoup_i]);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nif (stonesoup_filearray[stonesoup_i] != 0)\n \n","target":1}
{"idx":20024,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpWaMmNU_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (strlen(geneserin_cfa) > 0 &&\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (strlen(geneserin_cfa) > 0 &&\nif (nonmeteorologic_athanasius != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20025,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpWaMmNU_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (strlen(geneserin_cfa) > 0 &&\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (strlen(geneserin_cfa) > 0 &&\nif (nonmeteorologic_athanasius != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20026,"code":"stonesoup_printf(\"Creating files\\n\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfclose(stonesoup_filearray[stonesoup_i]);\n \n","target":1}
{"idx":20027,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20028,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20029,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20030,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20031,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20032,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nint stonesoup_i;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpWaMmNU_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&nonmeteorologic_athanasius,\"PAROCH_MISTRADITION\");\ngeneserin_cfa = ((char *)nonmeteorologic_athanasius);\n} else {\nstonesoup_num_files = strtoul(geneserin_cfa,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nstonesoup_filearray[stonesoup_i] = 0;\nstonesoup_printf(\"Creating files\\n\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nif (stonesoup_filearray[stonesoup_i] != 0)\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nif (stonesoup_filearray[stonesoup_i] != 0)\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpWaMmNU_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&nonmeteorologic_athanasius,\"PAROCH_MISTRADITION\");\ngeneserin_cfa = ((char *)nonmeteorologic_athanasius);\n} else {\nif (stonesoup_num_files > 0xffff)\nif (stonesoup_filearray[stonesoup_i] != 0)\n \n","target":1}
{"idx":20033,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20034,"code":"stonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nstonesoup_filearray[stonesoup_i] = 0;\nstonesoup_printf(\"Creating files\\n\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nfclose(stonesoup_filearray[stonesoup_i]);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfclose(stonesoup_filearray[stonesoup_i]);\n \n","target":1}
{"idx":20035,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20036,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20037,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20038,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20039,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20040,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20041,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20042,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&asexuality_fibrocystoma,\"SWAM_CARRICK\");\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], foamflower_torrentfulness);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20043,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&asexuality_fibrocystoma,\"SWAM_CARRICK\");\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], foamflower_torrentfulness);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20044,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20045,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20046,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20047,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *asexuality_fibrocystoma;\nstonesoup_read_taint(&asexuality_fibrocystoma,\"SWAM_CARRICK\");\nmulcts_crosscurrented[45] = asexuality_fibrocystoma;\npromotions_postmuscular = mulcts_crosscurrented;\niago_gristly = promotions_postmuscular + 5;\nfree(((char *)(iago_gristly - 5)[45]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&asexuality_fibrocystoma,\"SWAM_CARRICK\");\nmulcts_crosscurrented[45] = asexuality_fibrocystoma;\npromotions_postmuscular = mulcts_crosscurrented;\niago_gristly = promotions_postmuscular + 5;\nfree(((char *)(iago_gristly - 5)[45]));\n \n","target":0}
{"idx":20048,"code":"stonesoup_num = atoi(exc_outgains);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\n \n","target":0}
{"idx":20049,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpnx2Whb_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nif (rayat_kachina != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20050,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpnx2Whb_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"TRIGGER-POINT: AFTER\");\nif (rayat_kachina != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20051,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20052,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20053,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20054,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20055,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20056,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20057,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20058,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20059,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20060,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20061,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20062,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20063,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20064,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20065,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&tetrasepalous_totaquin,\"7632\",equationism_anotia);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], misprised_segmentize);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20066,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&tetrasepalous_totaquin,\"7632\",equationism_anotia);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], misprised_segmentize);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20067,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20068,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint equationism_anotia = 45;\nchar *tetrasepalous_totaquin;\nstonesoup_read_taint(&tetrasepalous_totaquin,\"7632\",equationism_anotia);\nfree(((char *)tetrasepalous_totaquin));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&tetrasepalous_totaquin,\"7632\",equationism_anotia);\nfree(((char *)tetrasepalous_totaquin));\n \n","target":0}
{"idx":20069,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20070,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20071,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20072,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20073,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20074,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nondecisively_entopterygoid,\"HOBBLINGLY_LIRAS\");\npellitories_galactophygous(1,sicily_airt);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20075,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20076,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nondecisively_entopterygoid,\"HOBBLINGLY_LIRAS\");\npellitories_galactophygous(1,sicily_airt);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20077,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstruct ararauna_acanthodes outjourneying_longtimer = {0};\nva_list differen_ultraurgent;\n__builtin_va_start(differen_ultraurgent,electrolysation_trichinoid);\noutjourneying_longtimer = (va_arg(differen_ultraurgent,struct ararauna_acanthodes ));\nhemianopic_mencher = ((char *)outjourneying_longtimer . venality_nictitates);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(hemianopic_mencher,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":0}
{"idx":20078,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstruct ararauna_acanthodes outjourneying_longtimer = {0};\nva_list differen_ultraurgent;\n__builtin_va_start(differen_ultraurgent,electrolysation_trichinoid);\noutjourneying_longtimer = (va_arg(differen_ultraurgent,struct ararauna_acanthodes ));\nhemianopic_mencher = ((char *)outjourneying_longtimer . venality_nictitates);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(hemianopic_mencher,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":0}
{"idx":20079,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20080,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstruct ararauna_acanthodes outjourneying_longtimer = {0};\nva_list differen_ultraurgent;\n__builtin_va_start(differen_ultraurgent,electrolysation_trichinoid);\noutjourneying_longtimer = (va_arg(differen_ultraurgent,struct ararauna_acanthodes ));\nhemianopic_mencher = ((char *)outjourneying_longtimer . venality_nictitates);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(hemianopic_mencher,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20081,"code":"struct ararauna_acanthodes outjourneying_longtimer = {0};\nva_list differen_ultraurgent;\n__builtin_va_start(differen_ultraurgent,electrolysation_trichinoid);\noutjourneying_longtimer = (va_arg(differen_ultraurgent,struct ararauna_acanthodes ));\nfree(((char *)outjourneying_longtimer . venality_nictitates));\n \n","target":0}
{"idx":20082,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20083,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20084,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20085,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20086,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20087,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20088,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20089,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20090,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&throngful_dentifrices,\"CYPRIAN_SEPTENNATE\");\nunjoints_lumpectomy(latinitaster_xanthoceras,discerns_stinge);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\nunjoints_lumpectomy(catfaced_lievest,beausire_flunkies);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20091,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&throngful_dentifrices,\"CYPRIAN_SEPTENNATE\");\nunjoints_lumpectomy(latinitaster_xanthoceras,discerns_stinge);\nsub2video_update(ist2,((void *)0));\nsub2video_push_ref(ist2,pts2);\nsub2video_heartbeat(ist,pkt . pts);\nret = output_packet(ist,(&pkt));\nret = decode_audio(ist,&avpkt,&got_output);\nret = output_packet(ist,(&pkt));\nret = process_input(ist -> file_index);\nret = transcode_step();\nprint_report(0,timer_start,cur_time);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"frame=%5d fps=%3.*f q=%3.1f \",frame_number,fps < 9.95,fps,q);\nsnprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),\"%02d:%02d:%02d.%02d \",hours,mins,secs,100 * us \/ 1000000);\nunjoints_lumpectomy(catfaced_lievest,beausire_flunkies);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20092,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20093,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20094,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *throngful_dentifrices;\nstonesoup_read_taint(&throngful_dentifrices,\"CYPRIAN_SEPTENNATE\");\nfatigation_sesban[56] = throngful_dentifrices;\ndiscerns_stinge = fatigation_sesban;\nunjoints_lumpectomy(latinitaster_xanthoceras,discerns_stinge);\nunjoints_lumpectomy(catfaced_lievest,beausire_flunkies);\nvoid unjoints_lumpectomy(int catfaced_lievest,char **beausire_flunkies)\nfree(((char *)beausire_flunkies[56]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&throngful_dentifrices,\"CYPRIAN_SEPTENNATE\");\nfatigation_sesban[56] = throngful_dentifrices;\ndiscerns_stinge = fatigation_sesban;\nunjoints_lumpectomy(latinitaster_xanthoceras,discerns_stinge);\n \n","target":0}
{"idx":20095,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20096,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *collutorium_turriculate);\n \n","target":0}
{"idx":20097,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20098,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_handle_taint(char *collutorium_turriculate)\npanoistic_dbo[11] = collutorium_turriculate;\nslivovitz_tyrol(panoistic_dbo);\nvoid slivovitz_tyrol(char **const cervantes_sweeties)\ndrinks_lactivorous = ((char *)((char **)cervantes_sweeties)[11]);\nstonesoup_files = fopen(drinks_lactivorous,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20099,"code":"void stonesoup_handle_taint(char *collutorium_turriculate)\npanoistic_dbo[11] = collutorium_turriculate;\nslivovitz_tyrol(panoistic_dbo);\nvoid slivovitz_tyrol(char **const cervantes_sweeties)\nfree(((char *)((char **)cervantes_sweeties)[11]));\n \n","target":0}
{"idx":20100,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20101,"code":"void stonesoup_handle_taint(char *collutorium_turriculate)\npanoistic_dbo[11] = collutorium_turriculate;\nslivovitz_tyrol(panoistic_dbo);\nvoid slivovitz_tyrol(char **const cervantes_sweeties)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ndrinks_lactivorous = ((char *)((char **)cervantes_sweeties)[11]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(drinks_lactivorous,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20102,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid stonesoup_handle_taint(char *collutorium_turriculate)\npanoistic_dbo[11] = collutorium_turriculate;\nslivovitz_tyrol(panoistic_dbo);\nvoid slivovitz_tyrol(char **const cervantes_sweeties)\ndrinks_lactivorous = ((char *)((char **)cervantes_sweeties)[11]);\nstonesoup_files = fopen(drinks_lactivorous,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20103,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20104,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20105,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20106,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20107,"code":"stonesoup_num = atoi(paratroops_hoplomachist);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20108,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&panaceist_elytrostenosis,\"9212\",leinster_pennyleaf);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20109,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&panaceist_elytrostenosis,\"9212\",leinster_pennyleaf);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20110,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20111,"code":"unsigned int **stonesoup_buffer_array = 0;\nparatroops_hoplomachist = ((char *)(pentapterous_ready - 5)[0]);\nstonesoup_num = atoi(paratroops_hoplomachist);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20112,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint leinster_pennyleaf = 7;\nchar *panaceist_elytrostenosis;\nstonesoup_read_taint(&panaceist_elytrostenosis,\"9212\",leinster_pennyleaf);\nmontanans_ganglioside[0] = panaceist_elytrostenosis;\ndoorsteps_presoaks = montanans_ganglioside;\npentapterous_ready = doorsteps_presoaks + 5;\nfree(((char *)(pentapterous_ready - 5)[0]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&panaceist_elytrostenosis,\"9212\",leinster_pennyleaf);\nmontanans_ganglioside[0] = panaceist_elytrostenosis;\ndoorsteps_presoaks = montanans_ganglioside;\npentapterous_ready = doorsteps_presoaks + 5;\nfree(((char *)(pentapterous_ready - 5)[0]));\n \n","target":0}
{"idx":20113,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20114,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20115,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20116,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20117,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20118,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nint rollichie_buyers = 5;\nchar *bedog_fepc;;\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nsuperfidel_prelabor[1] = bedog_fepc;\ndurables_antares[5] = superfidel_prelabor;\nratability_boatel[1] = 5;\nrevivor_landladydom =  *(durables_antares + ratability_boatel[1]);\nbnsc_teethless = ((char *)revivor_landladydom[1]);\nif (strlen(bnsc_teethless) > 0 &&\nstonesoup_num_files = strtoul(bnsc_teethless,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nsuperfidel_prelabor[1] = bedog_fepc;\ndurables_antares[5] = superfidel_prelabor;\nrevivor_landladydom =  *(durables_antares + ratability_boatel[1]);\nbnsc_teethless = ((char *)revivor_landladydom[1]);\nif (strlen(bnsc_teethless) > 0 &&\nstonesoup_num_files = strtoul(bnsc_teethless,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20119,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint rollichie_buyers = 5;\nchar *bedog_fepc;;\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nsuperfidel_prelabor[1] = bedog_fepc;\ndurables_antares[5] = superfidel_prelabor;\nratability_boatel[1] = 5;\nrevivor_landladydom =  *(durables_antares + ratability_boatel[1]);\nfree(((char *)revivor_landladydom[1]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&bedog_fepc,\"7609\",rollichie_buyers);\nsuperfidel_prelabor[1] = bedog_fepc;\ndurables_antares[5] = superfidel_prelabor;\nrevivor_landladydom =  *(durables_antares + ratability_boatel[1]);\nfree(((char *)revivor_landladydom[1]));\n \n","target":0}
{"idx":20120,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20121,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20122,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20123,"code":"stonesoup_num = atoi(gotthard_cafes);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20124,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *cuemen_gynaecocracy);\n \n","target":0}
{"idx":20125,"code":"void stonesoup_handle_taint(char *cuemen_gynaecocracy)\nexplorativeness_woordbook[7] = cuemen_gynaecocracy;\norvah_illguide(explorativeness_woordbook);\nvoid orvah_illguide(char **const intumescing_trimetrical)\nunsigned int **stonesoup_buffer_array = 0;\ngotthard_cafes = ((char *)((char **)intumescing_trimetrical)[7]);\nstonesoup_num = atoi(gotthard_cafes);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20126,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":1}
{"idx":20127,"code":"void stonesoup_handle_taint(char *cuemen_gynaecocracy)\nexplorativeness_woordbook[7] = cuemen_gynaecocracy;\norvah_illguide(explorativeness_woordbook);\nvoid orvah_illguide(char **const intumescing_trimetrical)\nfree(((char *)((char **)intumescing_trimetrical)[7]));\n \n","target":0}
{"idx":20128,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20129,"code":"stonesoup_num = atoi(buttonwood_propping);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20130,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20131,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20132,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20133,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20134,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20135,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *enlisted_descries;\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nfree(((char *)enlisted_descries));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nfree(((char *)enlisted_descries));\n \n","target":0}
{"idx":20136,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20137,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunsigned int **stonesoup_buffer_array = 0;\nchar *enlisted_descries;\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nbuttonwood_propping = ((char *)enlisted_descries);\nstonesoup_num = atoi(buttonwood_propping);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&enlisted_descries,\"AMPHINOMUS_OHONE\");\nbuttonwood_propping = ((char *)enlisted_descries);\nstonesoup_num = atoi(buttonwood_propping);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20138,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *narcobatoidea_cocainise)\nif (narcobatoidea_cocainise != 0) {;\nmalingerers_overmark = ((char *)narcobatoidea_cocainise);\nstonesoup_num = atoi(malingerers_overmark);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (narcobatoidea_cocainise != 0)\nfree(((char *)narcobatoidea_cocainise));\n \n","target":1}
{"idx":20139,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *narcobatoidea_cocainise)\nfree(((char *)narcobatoidea_cocainise));\n \n","target":0}
{"idx":20140,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nunsigned int **stonesoup_buffer_array = 0;\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_handle_taint(char *narcobatoidea_cocainise)\nmalingerers_overmark = ((char *)narcobatoidea_cocainise);\nstonesoup_num = atoi(malingerers_overmark);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20141,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20142,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20143,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20144,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unics_rhv,\"6674\",lamaism_bedeen);\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unics_rhv,\"6674\",lamaism_bedeen);\nfomentations_politicising(1,lithophyllous_cheiropterygium);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20145,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unics_rhv,\"6674\",lamaism_bedeen);\nsvn_error_t *svn_err__temp = parser_getc(ctx,&ch);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nerr = svn_config__parse_stream(cfg,stream,result_pool,scratch_pool);\nsvn_error_t *svn_err__temp = skip_bom(ctx);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unics_rhv,\"6674\",lamaism_bedeen);\nfomentations_politicising(1,lithophyllous_cheiropterygium);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20146,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20147,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20148,"code":"void *sunbeamy_tigrone = 0;\nfree(((char *)((char *)sunbeamy_tigrone)));\n \n","target":0}
{"idx":20149,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20150,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20151,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20152,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20153,"code":"char *megapodes_moderant = 0;\ncottoid_cardial(&megapodes_moderant);\nlier_outspokennesses(megapodes_moderant);\nvoid lier_outspokennesses(char *const farmplace_darrow)\ncommunistic_gugu[2] = farmplace_darrow;\nfree(((char *)((char *)communistic_gugu[2])));\n \n","target":0}
{"idx":20154,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20155,"code":"secundine_woolshearer = ((int )(strlen(antrophore_outprayed)));\ngorillaship_unexistent = ((char *)(malloc(secundine_woolshearer + 1)));\nif (gorillaship_unexistent == 0) {\nmemset(gorillaship_unexistent,0,secundine_woolshearer + 1);\nmemcpy(gorillaship_unexistent,antrophore_outprayed,secundine_woolshearer);\ndavyum_aliceville(gorillaship_unexistent);\n \n","target":0}
{"idx":20156,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20157,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20158,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20159,"code":"void flourishing_stocked(char *mentalities_documentalist)\nif (mentalities_documentalist != 0)\nfree(((char *)mentalities_documentalist));\n \n","target":0}
{"idx":20160,"code":"actionize_preferrous = ((int )(strlen(confabbed_toluate)));\nresecured_drinkability = ((char *)(malloc(actionize_preferrous + 1)));\nif (resecured_drinkability == 0) {\nmemset(resecured_drinkability,0,actionize_preferrous + 1);\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nlinguister_virelais[5] = resecured_drinkability;\nataxophemia_intertissue =  *(linguister_virelais + belding_moundwork[1]);\nremarque_waxweed = ((char *)ataxophemia_intertissue);\nstonesoup_num = atoi(remarque_waxweed);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (ataxophemia_intertissue != 0)\nfree(((char *)ataxophemia_intertissue));\n \n","target":1}
{"idx":20161,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20162,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20163,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *confabbed_toluate;;\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nresecured_drinkability = ((char *)(malloc(actionize_preferrous + 1)));\nmemset(resecured_drinkability,0,actionize_preferrous + 1);\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nlinguister_virelais[5] = resecured_drinkability;\nbelding_moundwork[1] = 5;\nataxophemia_intertissue =  *(linguister_virelais + belding_moundwork[1]);\nfree(((char *)ataxophemia_intertissue));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nlinguister_virelais[5] = resecured_drinkability;\nataxophemia_intertissue =  *(linguister_virelais + belding_moundwork[1]);\nfree(((char *)ataxophemia_intertissue));\n \n","target":0}
{"idx":20164,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20165,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *confabbed_toluate;;\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nfree(((char *)confabbed_toluate));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nfree(((char *)confabbed_toluate));\n \n","target":0}
{"idx":20166,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20167,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunsigned int **stonesoup_buffer_array = 0;\nchar *confabbed_toluate;;\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nresecured_drinkability = ((char *)(malloc(actionize_preferrous + 1)));\nmemset(resecured_drinkability,0,actionize_preferrous + 1);\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nlinguister_virelais[5] = resecured_drinkability;\nbelding_moundwork[1] = 5;\nataxophemia_intertissue =  *(linguister_virelais + belding_moundwork[1]);\nremarque_waxweed = ((char *)ataxophemia_intertissue);\nstonesoup_num = atoi(remarque_waxweed);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&confabbed_toluate,\"RANINAE_RHEUM\");\nactionize_preferrous = ((int )(strlen(confabbed_toluate)));\nmemcpy(resecured_drinkability,confabbed_toluate,actionize_preferrous);\nlinguister_virelais[5] = resecured_drinkability;\nataxophemia_intertissue =  *(linguister_virelais + belding_moundwork[1]);\nremarque_waxweed = ((char *)ataxophemia_intertissue);\nstonesoup_num = atoi(remarque_waxweed);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20168,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cogitabundly_writeoffs,\"SPRYNESS_EULOGISATION\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20169,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cogitabundly_writeoffs,\"SPRYNESS_EULOGISATION\");\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20170,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunion absalom_topnet plur_magadis;\nchar *cogitabundly_writeoffs;\nstonesoup_read_taint(&cogitabundly_writeoffs,\"SPRYNESS_EULOGISATION\");\nplur_magadis . hearselike_riatas = cogitabundly_writeoffs;\ninhoop_nonsalutation[5] = plur_magadis;\nhackensack_gottingen = 5;\noosporous_pickpocketism = &hackensack_gottingen;\nrockhampton_centrums =  *(inhoop_nonsalutation +  *oosporous_pickpocketism);\nfree(((char *)rockhampton_centrums . hearselike_riatas));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&cogitabundly_writeoffs,\"SPRYNESS_EULOGISATION\");\nplur_magadis . hearselike_riatas = cogitabundly_writeoffs;\nrockhampton_centrums =  *(inhoop_nonsalutation +  *oosporous_pickpocketism);\nfree(((char *)rockhampton_centrums . hearselike_riatas));\n \n","target":0}
{"idx":20171,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20172,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20173,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20174,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20175,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20176,"code":"void autompne_cajoler(whistlerian_ville frightenable_paraglossal)\nif (frightenable_paraglossal != 0)\nfree(((char *)frightenable_paraglossal));\n \n","target":0}
{"idx":20177,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20178,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *nonissuable_jungleside);\n \n","target":0}
{"idx":20179,"code":"void autorotate_frederik(void ***************************************************unhorny_fewest)\nbruising_accelerations(unhorny_fewest);\nvoid bruising_accelerations(void ***************************************************meshech_floriken)\nfree(((char *)((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *meshech_floriken)))))))))))))))))))))))))))))))))))))))))))))))))))));\n \n","target":0}
{"idx":20180,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20181,"code":"calotermitidae_zori = ((int )(strlen(nonsabbatic_acmic)));\nsawmon_octoic = ((char *)(malloc(calotermitidae_zori + 1)));\nmemset(sawmon_octoic,0,calotermitidae_zori + 1);\nmemcpy(sawmon_octoic,nonsabbatic_acmic,calotermitidae_zori);\nluminant_cleistogenous = &sawmon_octoic;\nyponomeutidae_brunetness = &luminant_cleistogenous;\nchromotherapy_trollopish = &yponomeutidae_brunetness;\nplumed_costicervical = &chromotherapy_trollopish;\nfrizer_ensorrow = &plumed_costicervical;\nfosdick_khanum = &frizer_ensorrow;\nmegacycle_lorrayne = &fosdick_khanum;\nindistance_strikebreakers = &megacycle_lorrayne;\nyuji_immit = &indistance_strikebreakers;\nscumboard_culmed = &yuji_immit;\ndispensator_micro = ((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed)))))))))));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], dispensator_micro);\nif ( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))) != 0)\nfree(((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))))));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nmemset(file_contents,0,file_contents_size);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":20182,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *nonsabbatic_acmic)\nif (nonsabbatic_acmic != 0) {;\ncalotermitidae_zori = ((int )(strlen(nonsabbatic_acmic)));\nsawmon_octoic = ((char *)(malloc(calotermitidae_zori + 1)));\nif (sawmon_octoic == 0) {\nmemcpy(sawmon_octoic,nonsabbatic_acmic,calotermitidae_zori);\nif (nonsabbatic_acmic != 0)\nfree(((char *)nonsabbatic_acmic));\nluminant_cleistogenous = &sawmon_octoic;\nyponomeutidae_brunetness = &luminant_cleistogenous;\nchromotherapy_trollopish = &yponomeutidae_brunetness;\nplumed_costicervical = &chromotherapy_trollopish;\nfrizer_ensorrow = &plumed_costicervical;\nfosdick_khanum = &frizer_ensorrow;\nmegacycle_lorrayne = &fosdick_khanum;\nindistance_strikebreakers = &megacycle_lorrayne;\nyuji_immit = &indistance_strikebreakers;\nscumboard_culmed = &yuji_immit;\ndispensator_micro = ((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed)))))))))));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], dispensator_micro);\nif ( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))) != 0)\nfree(((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))))));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nmemset(file_contents,0,file_contents_size);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":20183,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20184,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\ncalotermitidae_zori = ((int )(strlen(nonsabbatic_acmic)));\nsawmon_octoic = ((char *)(malloc(calotermitidae_zori + 1)));\nmemset(sawmon_octoic,0,calotermitidae_zori + 1);\nmemcpy(sawmon_octoic,nonsabbatic_acmic,calotermitidae_zori);\nluminant_cleistogenous = &sawmon_octoic;\nyponomeutidae_brunetness = &luminant_cleistogenous;\nchromotherapy_trollopish = &yponomeutidae_brunetness;\nplumed_costicervical = &chromotherapy_trollopish;\nfrizer_ensorrow = &plumed_costicervical;\nfosdick_khanum = &frizer_ensorrow;\nmegacycle_lorrayne = &fosdick_khanum;\nindistance_strikebreakers = &megacycle_lorrayne;\nyuji_immit = &indistance_strikebreakers;\nscumboard_culmed = &yuji_immit;\nfree(((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))))));\nvoid stonesoup_handle_taint(char *nonsabbatic_acmic)\ncalotermitidae_zori = ((int )(strlen(nonsabbatic_acmic)));\nmemcpy(sawmon_octoic,nonsabbatic_acmic,calotermitidae_zori);\nluminant_cleistogenous = &sawmon_octoic;\nyponomeutidae_brunetness = &luminant_cleistogenous;\nchromotherapy_trollopish = &yponomeutidae_brunetness;\nplumed_costicervical = &chromotherapy_trollopish;\nfrizer_ensorrow = &plumed_costicervical;\nfosdick_khanum = &frizer_ensorrow;\nmegacycle_lorrayne = &fosdick_khanum;\nindistance_strikebreakers = &megacycle_lorrayne;\nyuji_immit = &indistance_strikebreakers;\nscumboard_culmed = &yuji_immit;\nfree(((char *)( *( *( *( *( *( *( *( *( *( *scumboard_culmed))))))))))));\n \n","target":0}
{"idx":20185,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *nonsabbatic_acmic)\ncalotermitidae_zori = ((int )(strlen(nonsabbatic_acmic)));\nmemcpy(sawmon_octoic,nonsabbatic_acmic,calotermitidae_zori);\nfree(((char *)nonsabbatic_acmic));\n \n","target":0}
{"idx":20186,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nlatherwort_autointoxicant(1,planomiller_epigrams);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20187,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nlatherwort_autointoxicant(1,planomiller_epigrams);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\ntracepoint(stonesoup_trace, weakness_end);\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20188,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20189,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20190,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nonthermally_broggle,\"9052\",autostylic_septilateral);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], abolishments_multicharge);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20191,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20192,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nonthermally_broggle,\"9052\",autostylic_septilateral);\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], abolishments_multicharge);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20193,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20194,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20195,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint autostylic_septilateral = 45;\nchar *nonthermally_broggle;;\nstonesoup_read_taint(&nonthermally_broggle,\"9052\",autostylic_septilateral);\nbeitnes_unmetrical = &nonthermally_broggle;\nfree(((char *)( *beitnes_unmetrical)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&nonthermally_broggle,\"9052\",autostylic_septilateral);\nbeitnes_unmetrical = &nonthermally_broggle;\nfree(((char *)( *beitnes_unmetrical)));\n \n","target":0}
{"idx":20196,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20197,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20198,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20199,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20200,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20201,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20202,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20203,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20204,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nreturn 0;\nint longlinerman_hypersolid = 5;\nchar *delicious_rejiggers;\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\noccurred_neoholmia = ((char *)delicious_rejiggers);\nif (strlen(occurred_neoholmia) > 0 &&\nstonesoup_num_files = strtoul(occurred_neoholmia,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\noccurred_neoholmia = ((char *)delicious_rejiggers);\nif (strlen(occurred_neoholmia) > 0 &&\nstonesoup_num_files = strtoul(occurred_neoholmia,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20205,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20206,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint longlinerman_hypersolid = 5;\nchar *delicious_rejiggers;\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\nfree(((char *)delicious_rejiggers));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&delicious_rejiggers,\"4402\",longlinerman_hypersolid);\nfree(((char *)delicious_rejiggers));\n \n","target":0}
{"idx":20207,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20208,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&connellsville_alcarraza,\"4163\",wilfully_attribution);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20209,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&connellsville_alcarraza,\"4163\",wilfully_attribution);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20210,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint wilfully_attribution = 13;\nchar *connellsville_alcarraza;\nstonesoup_read_taint(&connellsville_alcarraza,\"4163\",wilfully_attribution);\nstemmatiform_jawed = 1;\nwellton_dillon = &connellsville_alcarraza;\nsubsequentness_sugent = ((char **)(((unsigned long )wellton_dillon) * stemmatiform_jawed * stemmatiform_jawed)) + 5;\nfree(((char *)( *(subsequentness_sugent - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&connellsville_alcarraza,\"4163\",wilfully_attribution);\nwellton_dillon = &connellsville_alcarraza;\nsubsequentness_sugent = ((char **)(((unsigned long )wellton_dillon) * stemmatiform_jawed * stemmatiform_jawed)) + 5;\nfree(((char *)( *(subsequentness_sugent - 5))));\n \n","target":0}
{"idx":20211,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20212,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20213,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20214,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20215,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20216,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20217,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20218,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *puntlatsh_turnbout;;\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nfree(((char *)whimmier_guarachas));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nfree(((char *)whimmier_guarachas));\n \n","target":0}
{"idx":20219,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20220,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *puntlatsh_turnbout;;\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20221,"code":"stonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *puntlatsh_turnbout;;\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20222,"code":"stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nchar *puntlatsh_turnbout;;\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_read_taint(&puntlatsh_turnbout,\"DYSPEPSY_WHITEY\");\nwhimmier_guarachas = puntlatsh_turnbout;\nbriskish_manubria = ((char *)whimmier_guarachas);\nstonesoup_files = fopen(briskish_manubria,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20223,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&muchacho_nonpurulence,\"3419\",auscultation_infector);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20224,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&muchacho_nonpurulence,\"3419\",auscultation_infector);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20225,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20226,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint auscultation_infector = 13;\nchar *muchacho_nonpurulence;;\nstonesoup_read_taint(&muchacho_nonpurulence,\"3419\",auscultation_infector);\nisodose_firring = ((void *)muchacho_nonpurulence);\nmoaning_captor = 1;\nungainfully_beryl = &isodose_firring;\ngourmets_cibarious = ((void **)(((unsigned long )ungainfully_beryl) * moaning_captor * moaning_captor)) + 5;\nfree(((char *)((char *)( *(gourmets_cibarious - 5)))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&muchacho_nonpurulence,\"3419\",auscultation_infector);\nisodose_firring = ((void *)muchacho_nonpurulence);\nungainfully_beryl = &isodose_firring;\ngourmets_cibarious = ((void **)(((unsigned long )ungainfully_beryl) * moaning_captor * moaning_captor)) + 5;\nfree(((char *)((char *)( *(gourmets_cibarious - 5)))));\n \n","target":0}
{"idx":20227,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20228,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\nsvn_error_t *svn_err__temp = svn_config_create2(&cfg,section_names_case_sensitive,option_names_case_sensitive,result_pool);\nsvn_error_t *svn_err__temp = svn_config_read3(cfgp,usr_file_path,0,0,0,pool);\nreturn read_all(cfg,sys_reg_path,usr_reg_path,sys_cfg_path,usr_cfg_path,pool);\nsvn_error_t *svn_err__temp = get_category_config(&cfg,config_dir,\"servers\",pool);\nsvn_error_t *svn_err__temp = get_category_config(&cfg,config_dir,\"config\",pool);\nreturn read_all(cfg,sys_reg_path,usr_reg_path,sys_cfg_path,usr_cfg_path,pool);\nsvn_error_t *svn_err__temp = svn_config_merge( *cfgp,usr_file_path,0);\nsvn_error_t *svn_err__temp = svn_config_read3(&merge_cfg,file,must_exist,cfg -> section_names_case_sensitive,cfg -> option_names_case_sensitive,cfg -> pool);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20229,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20230,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20231,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\nsvn_error_t *svn_err__temp = svn_config_create2(&cfg,section_names_case_sensitive,option_names_case_sensitive,result_pool);\nsvn_error_t *svn_err__temp = svn_config_read3(cfgp,usr_file_path,0,0,0,pool);\nreturn read_all(cfg,sys_reg_path,usr_reg_path,sys_cfg_path,usr_cfg_path,pool);\nsvn_error_t *svn_err__temp = get_category_config(&cfg,config_dir,\"servers\",pool);\nsvn_error_t *svn_err__temp = get_category_config(&cfg,config_dir,\"config\",pool);\nreturn read_all(cfg,sys_reg_path,usr_reg_path,sys_cfg_path,usr_cfg_path,pool);\nsvn_error_t *svn_err__temp = svn_config_merge( *cfgp,usr_file_path,0);\nsvn_error_t *svn_err__temp = svn_config_read3(&merge_cfg,file,must_exist,cfg -> section_names_case_sensitive,cfg -> option_names_case_sensitive,cfg -> pool);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20232,"code":"amylome_urushiols = ((int )(strlen(nodulation_sevener)));\nperichordal_flexography = ((char *)(malloc(amylome_urushiols + 1)));\nif (perichordal_flexography == 0) {\nmemset(perichordal_flexography,0,amylome_urushiols + 1);\nmemcpy(perichordal_flexography,nodulation_sevener,amylome_urushiols);\nvanadiferous_thermotaxis = sinning_proportionless(perichordal_flexography);\nchar *sinning_proportionless(char *foregleam_wrestled);\n \n","target":0}
{"idx":20233,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint feudalize_lashed = 5;\nchar *nodulation_sevener;\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\namylome_urushiols = ((int )(strlen(nodulation_sevener)));\nmemcpy(perichordal_flexography,nodulation_sevener,amylome_urushiols);\nfree(((char *)nodulation_sevener));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&nodulation_sevener,\"5488\",feudalize_lashed);\namylome_urushiols = ((int )(strlen(nodulation_sevener)));\nmemcpy(perichordal_flexography,nodulation_sevener,amylome_urushiols);\nfree(((char *)nodulation_sevener));\n \n","target":0}
{"idx":20234,"code":"void basted_emington(char *fig_agouties)\nflosi_synchronizes(fig_agouties);\nvoid flosi_synchronizes(char *bodiliness_lashkars)\nfree(((char *)bodiliness_lashkars));\n \n","target":0}
{"idx":20235,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20236,"code":"FILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn 0;\nreturn f;\nstonesoup_filearray[stonesoup_i] = 0;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid basted_emington(char *fig_agouties)\nflosi_synchronizes(fig_agouties);\nvoid flosi_synchronizes(char *bodiliness_lashkars)\nbeworried_typhomalaria = ((char *)bodiliness_lashkars);\nif (strlen(beworried_typhomalaria) > 0 &&\nstonesoup_num_files = strtoul(beworried_typhomalaria,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20237,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20238,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20239,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20240,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20241,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\ndespondencies_actinodrome(1,imputative_rjchard);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20242,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\ndespondencies_actinodrome(1,imputative_rjchard);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20243,"code":"return 0;\nstruct pozzuolanic_hepatized yelm_indigest = {0};\nva_list roof_scrubber;\n__builtin_va_start(roof_scrubber,molecular_philosophising);\nyelm_indigest = (va_arg(roof_scrubber,struct pozzuolanic_hepatized ));\nunclouding_almach = ((char *)yelm_indigest . haemus_scansores);\nif (strlen(unclouding_almach) > 0 &&\nstonesoup_num_files = strtoul(unclouding_almach,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20244,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20245,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20246,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20247,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20248,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20249,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20250,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20251,"code":"if (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar *unclinched_magestical;;\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid coryphasia_impropry(int flashinesses_dartmoor,forzando_amylome twaddlers_bib)\nsubsetting_dill = ((char *)twaddlers_bib);\nstonesoup_files = fopen(subsetting_dill,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20252,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint noodleism_underkind = 45;\nchar *unclinched_magestical;;\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\nvoid coryphasia_impropry(int flashinesses_dartmoor,forzando_amylome twaddlers_bib)\nfree(((char *)twaddlers_bib));\n \n","target":0}
{"idx":20253,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20254,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint noodleism_underkind = 45;\nchar *unclinched_magestical;;\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid coryphasia_impropry(int flashinesses_dartmoor,forzando_amylome twaddlers_bib)\nsubsetting_dill = ((char *)twaddlers_bib);\nstonesoup_files = fopen(subsetting_dill,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\n \n","target":0}
{"idx":20255,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20256,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar *unclinched_magestical;;\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncoryphasia_impropry(flashinesses_dartmoor,twaddlers_bib);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid coryphasia_impropry(int flashinesses_dartmoor,forzando_amylome twaddlers_bib)\nsubsetting_dill = ((char *)twaddlers_bib);\nstonesoup_files = fopen(subsetting_dill,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nstonesoup_read_taint(&unclinched_magestical,\"6430\",noodleism_underkind);\nreplevisable_coappeared = unclinched_magestical;\nlengthsomeness_euphonically[ *( *nanuet_ceratohyal)] = replevisable_coappeared;\nbestreak_conceiver = lengthsomeness_euphonically[ *( *nanuet_ceratohyal)];\ncoryphasia_impropry(sorva_dutiful,bestreak_conceiver);\n \n","target":1}
{"idx":20257,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20258,"code":"stonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20259,"code":"vsnprintf(str + len,(size > len?size - len : 0),fmt,vl);\nreturn (strlen(str));\n \n","target":0}
{"idx":20260,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20261,"code":"int stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20262,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20263,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nadroop_awed = ((char *)freity_dissolutely . debromination_goatskin);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(adroop_awed,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20264,"code":"if (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nadroop_awed = ((char *)freity_dissolutely . debromination_goatskin);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(adroop_awed,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20265,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20266,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nadroop_awed = ((char *)freity_dissolutely . debromination_goatskin);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(adroop_awed,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20267,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20268,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20269,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20270,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20271,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20272,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20273,"code":"return 0;\nparaebius_inapprehensibly = ((char *)serositis_testatrices . jochbed_commemorable);\nif (strlen(paraebius_inapprehensibly) > 0 &&\nstonesoup_num_files = strtoul(paraebius_inapprehensibly,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20274,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20275,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20276,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20277,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20278,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20279,"code":"void aguilarite_aerodontia(outcheating_bequeathal soliloquacious_spoofer)\nif (soliloquacious_spoofer != 0)\nfree(((char *)soliloquacious_spoofer));\n \n","target":0}
{"idx":20280,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20281,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20282,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20283,"code":"return 0;\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid aguilarite_aerodontia(outcheating_bequeathal soliloquacious_spoofer)\nrhabarbaric_formicivora = ((char *)soliloquacious_spoofer);\nif (strlen(rhabarbaric_formicivora) > 0 &&\nstonesoup_num_files = strtoul(rhabarbaric_formicivora,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20284,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&polishings_bethalto,\"ARGEERS_REINDORSED\");\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], boasted_fortin);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_printf(\"%c\", stonesoup_buf);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"%c\", stonesoup_buf);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20285,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&polishings_bethalto,\"ARGEERS_REINDORSED\");\nstonesoup_printf(\"Error opening pipe\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], boasted_fortin);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to fork a child process.\\n\");\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Failed to wait for child process: %d\\n\",stonesoup_child_signal);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Child process exited with status: %d\\n\",WEXITSTATUS(stonesoup_child_signal));\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20286,"code":"char hash_print_val[129] = {0};\nsprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20287,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20288,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *polishings_bethalto;\nstonesoup_read_taint(&polishings_bethalto,\"ARGEERS_REINDORSED\");\nbacteriaceous_effervescive[81] = polishings_bethalto;\nashcans_preventible[ *sortlige_nomograms] = bacteriaceous_effervescive;\nundeported_cardon = ashcans_preventible[ *sortlige_nomograms];\nfree(((char *)undeported_cardon[81]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&polishings_bethalto,\"ARGEERS_REINDORSED\");\nbacteriaceous_effervescive[81] = polishings_bethalto;\nashcans_preventible[ *sortlige_nomograms] = bacteriaceous_effervescive;\nundeported_cardon = ashcans_preventible[ *sortlige_nomograms];\nfree(((char *)undeported_cardon[81]));\n \n","target":0}
{"idx":20289,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20290,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&insulars_unhasty,\"3682\",chasmogamy_carrelli);\nhistophyly_cumulene(1,hausas_pyranometer);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20291,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&insulars_unhasty,\"3682\",chasmogamy_carrelli);\nhistophyly_cumulene(1,hausas_pyranometer);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20292,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20293,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20294,"code":"void *surprisingness_disarrangements = 0;\nfree(((char *)((char *)surprisingness_disarrangements)));\n \n","target":0}
{"idx":20295,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *unconfirming_subhead);\n \n","target":0}
{"idx":20296,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20297,"code":"if (fisk_crocheting . aims_sexist != 0)\nfree(((char *)fisk_crocheting . aims_sexist));\n \n","target":0}
{"idx":20298,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *decreers_semiautonomous)\nif (decreers_semiautonomous != 0) {;\nhexarchies_phengitical = ((void *)decreers_semiautonomous);\nnettled_palestra[5] = hexarchies_phengitical;\nuntimeously_immodulated =  *(nettled_palestra +  *bouncily_east);\nmesmeric_wana = ((char *)((char *)untimeously_immodulated));\nstonesoup_files = fopen(mesmeric_wana,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0) {\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nif (((char *)untimeously_immodulated) != 0)\nfree(((char *)((char *)untimeously_immodulated)));\nvoid stonesoup_cleanup(FILE **ptrs,int size)\nif (ptrs[i] != 0) {\nfclose(ptrs[i]);\n \n","target":1}
{"idx":20299,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nanaetiological_leoline = 5;\nbouncily_east = &anaetiological_leoline;\nuntimeously_immodulated =  *(nettled_palestra +  *bouncily_east);\nfree(((char *)((char *)untimeously_immodulated)));\nvoid stonesoup_handle_taint(char *decreers_semiautonomous)\nhexarchies_phengitical = ((void *)decreers_semiautonomous);\nnettled_palestra[5] = hexarchies_phengitical;\nuntimeously_immodulated =  *(nettled_palestra +  *bouncily_east);\nfree(((char *)((char *)untimeously_immodulated)));\n \n","target":0}
{"idx":20300,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20301,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20302,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20303,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20304,"code":"void espressos_biplicate(char *(**decaspermous_bamaf)[41])\nfree(((char *)( *( *decaspermous_bamaf))[40]));\n \n","target":0}
{"idx":20305,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20306,"code":"return 0;\nspikelet_priestliest = ((char *)( *( *decaspermous_bamaf))[40]);\nif (strlen(spikelet_priestliest) > 0 &&\nstonesoup_num_files = strtoul(spikelet_priestliest,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20307,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20308,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20309,"code":"size_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20310,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20311,"code":"stonesoup_num = atoi(carritches_churliest);\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20312,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20313,"code":"unsigned int **stonesoup_buffer_array = 0;\ncarritches_churliest = ((char *)prejudged_prefrank . excelsior_tortosa);\nstonesoup_num = atoi(carritches_churliest);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20314,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20315,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&diode_chawbacon,\"FOREFEEL_ECTOCONDYLOID\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20316,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20317,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20318,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&diode_chawbacon,\"FOREFEEL_ECTOCONDYLOID\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20319,"code":"bedog_patrimonies = ((char *)(malloc(stile_miscalls + 1)));\nif (bedog_patrimonies == 0) {\nmemset(bedog_patrimonies,0,stile_miscalls + 1);\nmemcpy(bedog_patrimonies,diode_chawbacon,stile_miscalls);\n*midlothian_tils = bedog_patrimonies;\n \n","target":0}
{"idx":20320,"code":"return 0;\nchar *lactean_uncultivated = 0;\nalkylating_insensible(&lactean_uncultivated);\nphosphophyllite_apart[5] = lactean_uncultivated;\nunwoundable_countenance = 5;\npsychopathy_trochus = &unwoundable_countenance;\nchallengeful_cornels =  *(phosphophyllite_apart +  *psychopathy_trochus);\narchostegnosis_underporter = ((char *)challengeful_cornels);\nif (strlen(archostegnosis_underporter) > 0 &&\nstonesoup_num_files = strtoul(archostegnosis_underporter,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20321,"code":"char *lactean_uncultivated = 0;\nalkylating_insensible(&lactean_uncultivated);\nphosphophyllite_apart[5] = lactean_uncultivated;\nunwoundable_countenance = 5;\npsychopathy_trochus = &unwoundable_countenance;\nchallengeful_cornels =  *(phosphophyllite_apart +  *psychopathy_trochus);\nfree(((char *)challengeful_cornels));\n \n","target":0}
{"idx":20322,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20323,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20324,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *diode_chawbacon;\nstonesoup_read_taint(&diode_chawbacon,\"FOREFEEL_ECTOCONDYLOID\");\nstile_miscalls = ((int )(strlen(diode_chawbacon)));\nmemcpy(bedog_patrimonies,diode_chawbacon,stile_miscalls);\nfree(((char *)diode_chawbacon));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&diode_chawbacon,\"FOREFEEL_ECTOCONDYLOID\");\nstile_miscalls = ((int )(strlen(diode_chawbacon)));\nmemcpy(bedog_patrimonies,diode_chawbacon,stile_miscalls);\nfree(((char *)diode_chawbacon));\n \n","target":0}
{"idx":20325,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20326,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20327,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20328,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20329,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20330,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20331,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *kaaba_capsomer)\nif (kaaba_capsomer != 0) {;\nenomania_hylomorphic = &kaaba_capsomer;\ndebrecen_subproctorship = enomania_hylomorphic + 5;\nif ( *(debrecen_subproctorship - 5) != 0) {\nmyelemia_multifunction = ((char *)( *(debrecen_subproctorship - 5)));\nstonesoup_files = fopen(myelemia_multifunction,\"rb\");\nif (stonesoup_files != 0) {\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nif (stonesoup_file == 0) {\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nif ( *(debrecen_subproctorship - 5) != 0)\nfree(((char *)( *(debrecen_subproctorship - 5))));\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\n \n","target":1}
{"idx":20332,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20333,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *kaaba_capsomer)\nenomania_hylomorphic = &kaaba_capsomer;\ndebrecen_subproctorship = enomania_hylomorphic + 5;\nfree(((char *)( *(debrecen_subproctorship - 5))));\n \n","target":0}
{"idx":20334,"code":"char* stonesoup_tainted_buff;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nvoid stonesoup_handle_taint(char *kaaba_capsomer)\nenomania_hylomorphic = &kaaba_capsomer;\ndebrecen_subproctorship = enomania_hylomorphic + 5;\nmyelemia_multifunction = ((char *)( *(debrecen_subproctorship - 5)));\nstonesoup_files = fopen(myelemia_multifunction,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20335,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_handle_taint(char *kaaba_capsomer)\nenomania_hylomorphic = &kaaba_capsomer;\ndebrecen_subproctorship = enomania_hylomorphic + 5;\nmyelemia_multifunction = ((char *)( *(debrecen_subproctorship - 5)));\nstonesoup_files = fopen(myelemia_multifunction,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20336,"code":"char* stonesoup_tainted_buff;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nint i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nvoid stonesoup_handle_taint(char *kaaba_capsomer)\nenomania_hylomorphic = &kaaba_capsomer;\ndebrecen_subproctorship = enomania_hylomorphic + 5;\nmyelemia_multifunction = ((char *)( *(debrecen_subproctorship - 5)));\nstonesoup_files = fopen(myelemia_multifunction,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20337,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *delphocurarine_dulzura);\n \n","target":0}
{"idx":20338,"code":"midfrontal_lipschitz = ((char *)(malloc(merrie_enneasepalous + 1)));\nif (midfrontal_lipschitz == 0) {\nmemset(midfrontal_lipschitz,0,merrie_enneasepalous + 1);\nmemcpy(midfrontal_lipschitz,delphocurarine_dulzura,merrie_enneasepalous);\norigami_boldnesses(midfrontal_lipschitz);\nvoid origami_boldnesses(char *unsunken_touber)\ncultivate_intelligency = ((char *)unsunken_touber);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], cultivate_intelligency);\nif (unsunken_touber != 0)\nfree(((char *)unsunken_touber));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":20339,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20340,"code":"void stonesoup_handle_taint(char *delphocurarine_dulzura)\nmerrie_enneasepalous = ((int )(strlen(delphocurarine_dulzura)));\nmemcpy(midfrontal_lipschitz,delphocurarine_dulzura,merrie_enneasepalous);\nfree(((char *)delphocurarine_dulzura));\n \n","target":0}
{"idx":20341,"code":"void stonesoup_handle_taint(char *delphocurarine_dulzura)\nmerrie_enneasepalous = ((int )(strlen(delphocurarine_dulzura)));\nmidfrontal_lipschitz = ((char *)(malloc(merrie_enneasepalous + 1)));\nmemset(midfrontal_lipschitz,0,merrie_enneasepalous + 1);\nmemcpy(midfrontal_lipschitz,delphocurarine_dulzura,merrie_enneasepalous);\norigami_boldnesses(midfrontal_lipschitz);\nvoid origami_boldnesses(char *unsunken_touber)\nfree(((char *)unsunken_touber));\n \n","target":0}
{"idx":20342,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20343,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20344,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20345,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *nematozooid_quadrupling);\n \n","target":0}
{"idx":20346,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncocowood_canons(junglewards_aicc,cantharidal_hartke);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nvoid stonesoup_handle_taint(char *nematozooid_quadrupling)\nimaginings_nutritiveness = ((void *)nematozooid_quadrupling);\neyah_dangerful = &imaginings_nutritiveness;\ncocowood_canons(dapples_mirabella,eyah_dangerful);\nvoid cocowood_canons(int junglewards_aicc,void **cantharidal_hartke)\nskimpier_lecanomancy = ((char *)((char *)( *cantharidal_hartke)));\nstonesoup_files = fopen(skimpier_lecanomancy,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20347,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncocowood_canons(junglewards_aicc,cantharidal_hartke);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid cocowood_canons(int junglewards_aicc,void **cantharidal_hartke)\nskimpier_lecanomancy = ((char *)((char *)( *cantharidal_hartke)));\nstonesoup_files = fopen(skimpier_lecanomancy,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_handle_taint(char *nematozooid_quadrupling)\nimaginings_nutritiveness = ((void *)nematozooid_quadrupling);\neyah_dangerful = &imaginings_nutritiveness;\ncocowood_canons(dapples_mirabella,eyah_dangerful);\n \n","target":1}
{"idx":20348,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20349,"code":"void cocowood_canons(int junglewards_aicc,void **cantharidal_hartke)\ncocowood_canons(junglewards_aicc,cantharidal_hartke);\nfree(((char *)((char *)( *cantharidal_hartke))));\nvoid stonesoup_handle_taint(char *nematozooid_quadrupling)\nimaginings_nutritiveness = ((void *)nematozooid_quadrupling);\neyah_dangerful = &imaginings_nutritiveness;\ncocowood_canons(dapples_mirabella,eyah_dangerful);\n \n","target":0}
{"idx":20350,"code":"void stonesoup_handle_taint(char *nematozooid_quadrupling)\nimaginings_nutritiveness = ((void *)nematozooid_quadrupling);\neyah_dangerful = &imaginings_nutritiveness;\ncocowood_canons(dapples_mirabella,eyah_dangerful);\nvoid cocowood_canons(int junglewards_aicc,void **cantharidal_hartke)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\ncocowood_canons(junglewards_aicc,cantharidal_hartke);\nskimpier_lecanomancy = ((char *)((char *)( *cantharidal_hartke)));\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(skimpier_lecanomancy,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20351,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&polyhedron_alevins,\"TMA_WEATHERMAKER\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20352,"code":"anisokonia_gatewaymen = ((char *)(malloc(tyrantlike_psalmists + 1)));\nif (anisokonia_gatewaymen == 0) {\nmemset(anisokonia_gatewaymen,0,tyrantlike_psalmists + 1);\nmemcpy(anisokonia_gatewaymen,polyhedron_alevins,tyrantlike_psalmists);\n*grieve_schnecksville = anisokonia_gatewaymen;\n \n","target":0}
{"idx":20353,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&polyhedron_alevins,\"TMA_WEATHERMAKER\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20354,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20355,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *polyhedron_alevins;\nstonesoup_read_taint(&polyhedron_alevins,\"TMA_WEATHERMAKER\");\ntyrantlike_psalmists = ((int )(strlen(polyhedron_alevins)));\nmemcpy(anisokonia_gatewaymen,polyhedron_alevins,tyrantlike_psalmists);\nfree(((char *)polyhedron_alevins));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&polyhedron_alevins,\"TMA_WEATHERMAKER\");\ntyrantlike_psalmists = ((int )(strlen(polyhedron_alevins)));\nmemcpy(anisokonia_gatewaymen,polyhedron_alevins,tyrantlike_psalmists);\nfree(((char *)polyhedron_alevins));\n \n","target":0}
{"idx":20356,"code":"char *sag_acetophenetide = 0;\nfree(((char *)sag_acetophenetide));\n \n","target":0}
{"idx":20357,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20358,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *prequarantined_curvirostral);\n \n","target":0}
{"idx":20359,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20360,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nelectrotrephine_trinitytide(mince_cryoconite);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20361,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20362,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20363,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nelectrotrephine_trinitytide(mince_cryoconite);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20364,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20365,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20366,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20367,"code":"return 0;\nnikolas_croape = getenv(\"TRUCULENCY_PIMPLA\");\ncohan_aloed = nikolas_croape;\nferriday_iter = &cohan_aloed;\nmince_cryoconite = ferriday_iter + 5;\nelectrotrephine_trinitytide(mince_cryoconite);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid electrotrephine_trinitytide(landslidden_frequenter *gombeenism_bsi)\nanterior_heinousnesses = ((char *)( *(gombeenism_bsi - 5)));\nif (strlen(anterior_heinousnesses) > 0 &&\nstonesoup_num_files = strtoul(anterior_heinousnesses,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20368,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20369,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20370,"code":"voluptuousness_endocytotic = ((char *)(malloc(rhynchonelloid_chileanization + 1)));\nif (voluptuousness_endocytotic == 0) {\nmemset(voluptuousness_endocytotic,0,rhynchonelloid_chileanization + 1);\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\njunketed_pedotribe = &voluptuousness_endocytotic;\nnonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\nvoid hydrogenation_addi(char **apodes_dragbar)\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\namplexicaul_cbema = ((char *)( *(apodes_dragbar - 5)));\nstonesoup_num = atoi(amplexicaul_cbema);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif ( *(apodes_dragbar - 5) != 0)\nfree(((char *)( *(apodes_dragbar - 5))));\n \n","target":1}
{"idx":20371,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20372,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint abwatts_radicalizing = 7;\nchar *overpolish_homeoplasy;\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nvoluptuousness_endocytotic = ((char *)(malloc(rhynchonelloid_chileanization + 1)));\nmemset(voluptuousness_endocytotic,0,rhynchonelloid_chileanization + 1);\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\nworkmanly_opsm = 1;\njunketed_pedotribe = &voluptuousness_endocytotic;\nnonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\nvoid hydrogenation_addi(char **apodes_dragbar)\nfree(((char *)( *(apodes_dragbar - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\njunketed_pedotribe = &voluptuousness_endocytotic;\nnonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\n \n","target":0}
{"idx":20373,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint abwatts_radicalizing = 7;\nchar *overpolish_homeoplasy;\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\nfree(((char *)overpolish_homeoplasy));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\nfree(((char *)overpolish_homeoplasy));\n \n","target":0}
{"idx":20374,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20375,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint abwatts_radicalizing = 7;\nchar *overpolish_homeoplasy;\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nvoluptuousness_endocytotic = ((char *)(malloc(rhynchonelloid_chileanization + 1)));\nmemset(voluptuousness_endocytotic,0,rhynchonelloid_chileanization + 1);\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\nworkmanly_opsm = 1;\njunketed_pedotribe = &voluptuousness_endocytotic;\nnonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\nunsigned int **stonesoup_buffer_array = 0;\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid hydrogenation_addi(char **apodes_dragbar)\namplexicaul_cbema = ((char *)( *(apodes_dragbar - 5)));\nstonesoup_num = atoi(amplexicaul_cbema);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&overpolish_homeoplasy,\"2042\",abwatts_radicalizing);\nrhynchonelloid_chileanization = ((int )(strlen(overpolish_homeoplasy)));\nmemcpy(voluptuousness_endocytotic,overpolish_homeoplasy,rhynchonelloid_chileanization);\njunketed_pedotribe = &voluptuousness_endocytotic;\nnonremedies_dionaea = ((char **)(((unsigned long )junketed_pedotribe) * workmanly_opsm * workmanly_opsm)) + 5;\nSTAHLIAN_TRANSEPTAL(nonremedies_dionaea);\n \n","target":1}
{"idx":20376,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *inflammatorily_squirming)\nif (inflammatorily_squirming != 0) {;\ncasseroled_hypercalcemic . perdured_turkana = ((char *)inflammatorily_squirming);\nunfreezes_sandman[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *blady_colitoxemia)))))))))))))))))))))))))))))))))))))))))))))))))] = casseroled_hypercalcemic;\nuninterposed_gymnoconia = unfreezes_sandman[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *blady_colitoxemia)))))))))))))))))))))))))))))))))))))))))))))))))];\naccrington_maidly = ((char *)uninterposed_gymnoconia . perdured_turkana);\nif (strlen(accrington_maidly) > 1 &&\naccrington_maidly[0] == '-') {\nif (strlen(accrington_maidly) > 1 &&\nstonesoup_stack_size = strtoul(accrington_maidly,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nif (uninterposed_gymnoconia . perdured_turkana != 0)\nfree(((char *)uninterposed_gymnoconia . perdured_turkana));\n \n","target":1}
{"idx":20377,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nstruct nonpliancy_mesologic casseroled_hypercalcemic;\nunfreezes_sandman[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *blady_colitoxemia)))))))))))))))))))))))))))))))))))))))))))))))))] = casseroled_hypercalcemic;\nuninterposed_gymnoconia = unfreezes_sandman[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *blady_colitoxemia)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)uninterposed_gymnoconia . perdured_turkana));\nvoid stonesoup_handle_taint(char *inflammatorily_squirming)\ncasseroled_hypercalcemic . perdured_turkana = ((char *)inflammatorily_squirming);\nuninterposed_gymnoconia = unfreezes_sandman[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *blady_colitoxemia)))))))))))))))))))))))))))))))))))))))))))))))))];\nfree(((char *)uninterposed_gymnoconia . perdured_turkana));\n \n","target":0}
{"idx":20378,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20379,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20380,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20381,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20382,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20383,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20384,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20385,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20386,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20387,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20388,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20389,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20390,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20391,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20392,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20393,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20394,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20395,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20396,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20397,"code":"void tantra_warfaring(char **agacante_paymastership)\ngigahertzes_galuth = ((char *)agacante_paymastership[47]);\nif (strlen(gigahertzes_galuth) > 0 &&\nstonesoup_num_files = strtoul(gigahertzes_galuth,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn 0;\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20398,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20399,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20400,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20401,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20402,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20403,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpFWT9gb_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (pipe(stonesoup_fd_array[stonesoup_index].fd_array) == -1) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (pipe(stonesoup_fd_array[stonesoup_index].fd_array) == -1) {\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\n} else {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n} else {\nif (-1 == waitpid(stonesoup_fd_array[stonesoup_ii].pid, &stonesoup_child_signal, 0)) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (-1 == waitpid(stonesoup_fd_array[stonesoup_ii].pid, &stonesoup_child_signal, 0)) {\n} else {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n} else {\nif (macgregor_coh != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20404,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20405,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20406,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20407,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20408,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20409,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20410,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20411,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20412,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20413,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20414,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20415,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20416,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20417,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20418,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20419,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20420,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20421,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20422,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunsigned int **stonesoup_buffer_array = 0;\nchar *necrobacillary_ionical;;\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nsulphoproteid_fugaciously = necrobacillary_ionical;\nkabeiri_enteradenology = 1;\nyul_thyreohyoid = &sulphoproteid_fugaciously;\nblatherer_tangka = ((polyandria_samal *)(((unsigned long )yul_thyreohyoid) * kabeiri_enteradenology * kabeiri_enteradenology)) + 5;\ndispergate_theanthropism = ((char *)( *(blatherer_tangka - 5)));\nstonesoup_num = atoi(dispergate_theanthropism);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nsulphoproteid_fugaciously = necrobacillary_ionical;\nyul_thyreohyoid = &sulphoproteid_fugaciously;\nblatherer_tangka = ((polyandria_samal *)(((unsigned long )yul_thyreohyoid) * kabeiri_enteradenology * kabeiri_enteradenology)) + 5;\ndispergate_theanthropism = ((char *)( *(blatherer_tangka - 5)));\nstonesoup_num = atoi(dispergate_theanthropism);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20423,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *necrobacillary_ionical;;\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nsulphoproteid_fugaciously = necrobacillary_ionical;\nkabeiri_enteradenology = 1;\nyul_thyreohyoid = &sulphoproteid_fugaciously;\nblatherer_tangka = ((polyandria_samal *)(((unsigned long )yul_thyreohyoid) * kabeiri_enteradenology * kabeiri_enteradenology)) + 5;\nfree(((char *)( *(blatherer_tangka - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&necrobacillary_ionical,\"TACKETED_TRILITH\");\nsulphoproteid_fugaciously = necrobacillary_ionical;\nyul_thyreohyoid = &sulphoproteid_fugaciously;\nblatherer_tangka = ((polyandria_samal *)(((unsigned long )yul_thyreohyoid) * kabeiri_enteradenology * kabeiri_enteradenology)) + 5;\nfree(((char *)( *(blatherer_tangka - 5))));\n \n","target":0}
{"idx":20424,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *countdom_eristalis);\n \n","target":0}
{"idx":20425,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20426,"code":"void stonesoup_handle_taint(char *countdom_eristalis)\njunkyards_ardito(countdom_eristalis);\nvoid junkyards_ardito(char *const orlena_lacker)\nfree(((char *)((char *)orlena_lacker)));\n \n","target":0}
{"idx":20427,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20428,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20429,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20430,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20431,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20432,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20433,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20434,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20435,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20436,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20437,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20438,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20439,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&galaxias_locustid,\"POSITIONS_TARGETLIKE\");\nvergaloo_devaluate(1,ambergrises_subiaco);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20440,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&galaxias_locustid,\"POSITIONS_TARGETLIKE\");\nvergaloo_devaluate(1,ambergrises_subiaco);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20441,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20442,"code":"intonement_actuate wauzeka_hectograph = 0;\nva_list unowned_steganogram;\n__builtin_va_start(unowned_steganogram,nonexportable_electroshock);\nwauzeka_hectograph = (va_arg(unowned_steganogram,intonement_actuate ));\nfree(((char *)wauzeka_hectograph));\n \n","target":0}
{"idx":20443,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20444,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *stained_validification)\nif (stained_validification != 0) {;\nembolum_enneasepalous = ((char *)stained_validification);\nif (strlen(embolum_enneasepalous) > 0 &&\nembolum_enneasepalous[0] == '-') {\nif (strlen(embolum_enneasepalous) > 0 &&\nstonesoup_num_files = strtoul(embolum_enneasepalous,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nif (stonesoup_i < stonesoup_num_files)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfree(stonesoup_filearray);\nif (stained_validification != 0)\nfree(((char *)stained_validification));\n \n","target":0}
{"idx":20445,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20446,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20447,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *stained_validification)\nfree(((char *)stained_validification));\n \n","target":0}
{"idx":20448,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20449,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20450,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20451,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nreturn 0;\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_handle_taint(char *stained_validification)\nembolum_enneasepalous = ((char *)stained_validification);\nif (strlen(embolum_enneasepalous) > 0 &&\nstonesoup_num_files = strtoul(embolum_enneasepalous,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20452,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20453,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&capriciousness_illumines,\"LARINAE_ENTOPARASITE\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20454,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&capriciousness_illumines,\"LARINAE_ENTOPARASITE\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20455,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *capriciousness_illumines;;\nstonesoup_read_taint(&capriciousness_illumines,\"LARINAE_ENTOPARASITE\");\neeho_tweedier = &capriciousness_illumines;\nfree(((char *)( *eeho_tweedier)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&capriciousness_illumines,\"LARINAE_ENTOPARASITE\");\neeho_tweedier = &capriciousness_illumines;\nfree(((char *)( *eeho_tweedier)));\n \n","target":0}
{"idx":20456,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20457,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20458,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&charybdis_friday,\"8702\",graphitoidal_cheatingly);\nombrometric_heavenless(iconoscope_vialogue,proteolytic_foreconceive);\nombrometric_heavenless(intelligency_bisutun,triads_rechallenging);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20459,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&charybdis_friday,\"8702\",graphitoidal_cheatingly);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_expr . col_expr_val[col]);\ncol_set_rel_time(fd,cinfo,col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_fill_in_frame_data((pinfo -> fd),pinfo -> cinfo,i,fill_col_exprs);\ncol_set_fmt_time(fd,cinfo,cinfo -> col_fmt[col],col);\ncol_set_cls_time(fd,cinfo,col);\ncol_set_rel_time(fd,cinfo,col);\nset_time_seconds(&fd -> rel_ts,cinfo -> col_buf[col]);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&charybdis_friday,\"8702\",graphitoidal_cheatingly);\nombrometric_heavenless(iconoscope_vialogue,proteolytic_foreconceive);\nombrometric_heavenless(intelligency_bisutun,triads_rechallenging);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20460,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint graphitoidal_cheatingly = 45;\nchar *charybdis_friday;;\nstonesoup_read_taint(&charybdis_friday,\"8702\",graphitoidal_cheatingly);\nsedimentology_silicones = ((void *)charybdis_friday);\nsegregant_wappenschaw = &sedimentology_silicones;\nproteolytic_foreconceive = segregant_wappenschaw + 5;\nombrometric_heavenless(iconoscope_vialogue,proteolytic_foreconceive);\nombrometric_heavenless(intelligency_bisutun,triads_rechallenging);\nvoid ombrometric_heavenless(int intelligency_bisutun,void **triads_rechallenging)\nfree(((char *)((char *)( *(triads_rechallenging - 5)))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&charybdis_friday,\"8702\",graphitoidal_cheatingly);\nsedimentology_silicones = ((void *)charybdis_friday);\nsegregant_wappenschaw = &sedimentology_silicones;\nproteolytic_foreconceive = segregant_wappenschaw + 5;\nombrometric_heavenless(iconoscope_vialogue,proteolytic_foreconceive);\n \n","target":0}
{"idx":20461,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20462,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20463,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&faldage_exogenae,\"HIRAI_BARBIERITE\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20464,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&faldage_exogenae,\"HIRAI_BARBIERITE\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20465,"code":"pseudovolcano_fos = ((char *)(malloc(lamarckian_cardiopath + 1)));\nif (pseudovolcano_fos == 0) {\nmemset(pseudovolcano_fos,0,lamarckian_cardiopath + 1);\nmemcpy(pseudovolcano_fos,faldage_exogenae,lamarckian_cardiopath);\nhospitate_limax(1,pseudovolcano_fos);\nvoid hospitate_limax(int denumerantive_ewald,... );\n \n","target":0}
{"idx":20466,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20467,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20468,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *faldage_exogenae;\nstonesoup_read_taint(&faldage_exogenae,\"HIRAI_BARBIERITE\");\nlamarckian_cardiopath = ((int )(strlen(faldage_exogenae)));\nmemcpy(pseudovolcano_fos,faldage_exogenae,lamarckian_cardiopath);\nfree(((char *)faldage_exogenae));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&faldage_exogenae,\"HIRAI_BARBIERITE\");\nlamarckian_cardiopath = ((int )(strlen(faldage_exogenae)));\nmemcpy(pseudovolcano_fos,faldage_exogenae,lamarckian_cardiopath);\nfree(((char *)faldage_exogenae));\n \n","target":0}
{"idx":20469,"code":"void reeder_psychosensorial(int bibliopolism_dichlamydeous,char *unintermixed_chignon)\nfree(((char *)unintermixed_chignon));\n \n","target":0}
{"idx":20470,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20471,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20472,"code":"free(((char *)( *(hebecladous_annuluses - 5)) . demobilisation_slovintzi));\n \n","target":0}
{"idx":20473,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20474,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20475,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nABOLISHMENTS_DOMESTICATIVE(nongeographical_cytophysics);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20476,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nABOLISHMENTS_DOMESTICATIVE(nongeographical_cytophysics);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20477,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20478,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20479,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *speronaro_naperian)\nif (speronaro_naperian != 0) {;\nunfixable_unworkmanlike[24] = speronaro_naperian;\nportionless_nonprovisionary = ((char *)unfixable_unworkmanlike[24]);\nif (strlen(portionless_nonprovisionary) > 0 &&\nportionless_nonprovisionary[0] == '-') {\nif (strlen(portionless_nonprovisionary) > 0 &&\nstonesoup_num_files = strtoul(portionless_nonprovisionary,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nif (stonesoup_i < stonesoup_num_files)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfree(stonesoup_filearray);\nif (unfixable_unworkmanlike[24] != 0)\nfree(((char *)unfixable_unworkmanlike[24]));\n \n","target":0}
{"idx":20480,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20481,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20482,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *speronaro_naperian)\nunfixable_unworkmanlike[24] = speronaro_naperian;\nfree(((char *)unfixable_unworkmanlike[24]));\n \n","target":0}
{"idx":20483,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nreturn 0;\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_handle_taint(char *speronaro_naperian)\nunfixable_unworkmanlike[24] = speronaro_naperian;\nportionless_nonprovisionary = ((char *)unfixable_unworkmanlike[24]);\nif (strlen(portionless_nonprovisionary) > 0 &&\nstonesoup_num_files = strtoul(portionless_nonprovisionary,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20484,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20485,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20486,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20487,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20488,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20489,"code":"unsigned int **stonesoup_buffer_array = 0;\nstruct offend_barranquilla intraperitoneal_infrequentcy = {0};\nmisaddressing_dextropedal(&intraperitoneal_infrequentcy);\ncoitions_calabrasella[5] = intraperitoneal_infrequentcy;\nradio_planury = 5;\nunflirtatious_nicklaus = &radio_planury;\nunrecessively_peases =  *(coitions_calabrasella +  *unflirtatious_nicklaus);\narette_abluvion = ((char *)unrecessively_peases . undersleeve_teazle);\nstonesoup_num = atoi(arette_abluvion);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20490,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20491,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20492,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20493,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *uncareful_migrate);\n \n","target":0}
{"idx":20494,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstruct aerologists_budgereegah taliacotian_hypertoxic;\nshippens_orotinan[5] = taliacotian_hypertoxic;\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nimpatiens_lustrical[1] = 5;\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid nonelaborate_semmit(struct aerologists_budgereegah brief_unhit)\nseamlessly_uniangulate = ((char *)brief_unhit . jori_piggins);\nstonesoup_files = fopen(seamlessly_uniangulate,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nvoid stonesoup_handle_taint(char *uncareful_migrate)\ntaliacotian_hypertoxic . jori_piggins = ((char *)uncareful_migrate);\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20495,"code":"struct aerologists_budgereegah taliacotian_hypertoxic;\nshippens_orotinan[5] = taliacotian_hypertoxic;\nimpatiens_lustrical[1] = 5;\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid nonelaborate_semmit(struct aerologists_budgereegah brief_unhit)\nseamlessly_uniangulate = ((char *)brief_unhit . jori_piggins);\nstonesoup_files = fopen(seamlessly_uniangulate,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid stonesoup_handle_taint(char *uncareful_migrate)\ntaliacotian_hypertoxic . jori_piggins = ((char *)uncareful_migrate);\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\n \n","target":0}
{"idx":20496,"code":"void nonelaborate_semmit(struct aerologists_budgereegah brief_unhit)\nfree(((char *)brief_unhit . jori_piggins));\nvoid stonesoup_handle_taint(char *uncareful_migrate)\nstruct aerologists_budgereegah taliacotian_hypertoxic;\ntaliacotian_hypertoxic . jori_piggins = ((char *)uncareful_migrate);\nshippens_orotinan[5] = taliacotian_hypertoxic;\nimpatiens_lustrical[1] = 5;\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\n \n","target":0}
{"idx":20497,"code":"void nonelaborate_semmit(struct aerologists_budgereegah brief_unhit)\nchar stonesoup_filename[80];\nseamlessly_uniangulate = ((char *)brief_unhit . jori_piggins);\nstonesoup_files = fopen(seamlessly_uniangulate,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstruct aerologists_budgereegah taliacotian_hypertoxic;\nshippens_orotinan[5] = taliacotian_hypertoxic;\nimpatiens_lustrical[1] = 5;\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_size = ftell(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nint i = 0;\nfree(ptrs[i]);\nvoid stonesoup_handle_taint(char *uncareful_migrate)\ntaliacotian_hypertoxic . jori_piggins = ((char *)uncareful_migrate);\nsulpician_shufflers =  *(shippens_orotinan + impatiens_lustrical[1]);\nnonelaborate_semmit(sulpician_shufflers);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20498,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20499,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20500,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20501,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20502,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20503,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid nonsociability_meteorical(int riverside_myctophidae,char *superathlete_winsomenesses)\nprela_nonexcepting = ((char *)superathlete_winsomenesses);\nstonesoup_files = fopen(prela_nonexcepting,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20504,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20505,"code":"void nonsociability_meteorical(int riverside_myctophidae,char *superathlete_winsomenesses)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nprela_nonexcepting = ((char *)superathlete_winsomenesses);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(prela_nonexcepting,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20506,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid nonsociability_meteorical(int riverside_myctophidae,char *superathlete_winsomenesses)\nprela_nonexcepting = ((char *)superathlete_winsomenesses);\nstonesoup_files = fopen(prela_nonexcepting,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20507,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20508,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&photopositive_gatekeep,\"3178\",anchorable_rebroadened);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20509,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&photopositive_gatekeep,\"3178\",anchorable_rebroadened);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_cleanup(stonesoup_file_list, ((stonesoup_ssi-1)%10)+1);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20510,"code":"arg = split(colors,\":\",&n);\nc = split(arg[i],\"=\",&n);\nfree(arg);\nchar **split(char *str,char *delim,int *nwrds);\nfree(arg);\n \n","target":0}
{"idx":20511,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20512,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20513,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20514,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20515,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint anchorable_rebroadened = 45;\nchar *photopositive_gatekeep;\nstonesoup_read_taint(&photopositive_gatekeep,\"3178\",anchorable_rebroadened);\nfree(((char *)photopositive_gatekeep));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&photopositive_gatekeep,\"3178\",anchorable_rebroadened);\nfree(((char *)photopositive_gatekeep));\n \n","target":0}
{"idx":20516,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20517,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20518,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20519,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20520,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20521,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20522,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20523,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20524,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20525,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20526,"code":"void stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nreturn 0;\nchar stonesoup_filename[80];\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid coastwise_rhizoctoniose(creekfishes_teethiest sharet_higbee)\nagavose_heteroousia(sharet_higbee);\nvoid agavose_heteroousia(creekfishes_teethiest deblateration_overregister)\nurodaeum_blennenteritis = ((char *)deblateration_overregister);\nstonesoup_files = fopen(urodaeum_blennenteritis,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20527,"code":"char *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nint i = 0;\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid coastwise_rhizoctoniose(creekfishes_teethiest sharet_higbee)\nagavose_heteroousia(sharet_higbee);\nvoid agavose_heteroousia(creekfishes_teethiest deblateration_overregister)\nurodaeum_blennenteritis = ((char *)deblateration_overregister);\nstonesoup_files = fopen(urodaeum_blennenteritis,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20528,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20529,"code":"void coastwise_rhizoctoniose(creekfishes_teethiest sharet_higbee)\nagavose_heteroousia(sharet_higbee);\nvoid agavose_heteroousia(creekfishes_teethiest deblateration_overregister)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nurodaeum_blennenteritis = ((char *)deblateration_overregister);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(urodaeum_blennenteritis,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20530,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20531,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20532,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20533,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20534,"code":"void weariness_sorbaria(void *outgush_squillgeed)\nzaddikim_compactify(outgush_squillgeed);\nvoid zaddikim_compactify(void *subaerially_ailsun)\nunsigned int **stonesoup_buffer_array = 0;\ninarticulata_eysenck = ((char *)((char *)((void *)subaerially_ailsun)));\nstonesoup_num = atoi(inarticulata_eysenck);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20535,"code":"void weariness_sorbaria(void *outgush_squillgeed)\nzaddikim_compactify(outgush_squillgeed);\nvoid zaddikim_compactify(void *subaerially_ailsun)\nfree(((char *)((char *)((void *)subaerially_ailsun))));\n \n","target":0}
{"idx":20536,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20537,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20538,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20539,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20540,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20541,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20542,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20543,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20544,"code":"void overpepper_blastomycetic(int silverweed_heartsette,char *pseudoregally_edrei)\nfree(((char *)pseudoregally_edrei));\n \n","target":0}
{"idx":20545,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20546,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20547,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20548,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20549,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20550,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20551,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20552,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20553,"code":"unsigned int **stonesoup_buffer_array = 0;\nwirral_draffin = getenv(\"METEWAND_GAINFUL\");\neskdale_swannanoa[5] = wirral_draffin;\ninfracentral_pinochles = eskdale_swannanoa;\nremittable_overstress = ((char *)infracentral_pinochles[5]);\nstonesoup_num = atoi(remittable_overstress);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20554,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20555,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20556,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\nstairwell_nonvaluation(biot_premosaic,weatherbreak_doughmaking);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20557,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\nstairwell_nonvaluation(biot_premosaic,weatherbreak_doughmaking);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20558,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20559,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20560,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *heiring_philogeant;;\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\ndottedness_epaphus = heiring_philogeant;\ncarbamyl_aftereye[5] = dottedness_epaphus;\npodiatrists_cnossus = 5;\nbacteriophages_cantatas = &podiatrists_cnossus;\nunhilariousness_apoapsis =  *(carbamyl_aftereye +  *bacteriophages_cantatas);\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\nstairwell_nonvaluation(biot_premosaic,weatherbreak_doughmaking);\nvoid stairwell_nonvaluation(int biot_premosaic,abhorrers_pericarp weatherbreak_doughmaking)\nfree(((char *)weatherbreak_doughmaking));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\ndottedness_epaphus = heiring_philogeant;\ncarbamyl_aftereye[5] = dottedness_epaphus;\nunhilariousness_apoapsis =  *(carbamyl_aftereye +  *bacteriophages_cantatas);\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\n \n","target":0}
{"idx":20561,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *heiring_philogeant;;\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\ndottedness_epaphus = heiring_philogeant;\ncarbamyl_aftereye[5] = dottedness_epaphus;\npodiatrists_cnossus = 5;\nbacteriophages_cantatas = &podiatrists_cnossus;\nunhilariousness_apoapsis =  *(carbamyl_aftereye +  *bacteriophages_cantatas);\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\nunsigned int **stonesoup_buffer_array = 0;\nstairwell_nonvaluation(biot_premosaic,weatherbreak_doughmaking);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stairwell_nonvaluation(int biot_premosaic,abhorrers_pericarp weatherbreak_doughmaking)\nlappish_dunnville = ((char *)weatherbreak_doughmaking);\nstonesoup_num = atoi(lappish_dunnville);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&heiring_philogeant,\"ENDENIZATION_GESTURERS\");\ndottedness_epaphus = heiring_philogeant;\ncarbamyl_aftereye[5] = dottedness_epaphus;\nunhilariousness_apoapsis =  *(carbamyl_aftereye +  *bacteriophages_cantatas);\nstairwell_nonvaluation(busrah_polymorph,unhilariousness_apoapsis);\n \n","target":1}
{"idx":20562,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20563,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fasteners_uraniscus,\"6362\",petrescence_pulmonaria);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20564,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fasteners_uraniscus,\"6362\",petrescence_pulmonaria);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20565,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint petrescence_pulmonaria = 61;\nchar *fasteners_uraniscus;\nstonesoup_read_taint(&fasteners_uraniscus,\"6362\",petrescence_pulmonaria);\nwawa_acrophony[8] = fasteners_uraniscus;\nbiarcuated_quaileries = wawa_acrophony;\nboxtop_redevelops = biarcuated_quaileries + 5;\nfree(((char *)(boxtop_redevelops - 5)[8]));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&fasteners_uraniscus,\"6362\",petrescence_pulmonaria);\nwawa_acrophony[8] = fasteners_uraniscus;\nbiarcuated_quaileries = wawa_acrophony;\nboxtop_redevelops = biarcuated_quaileries + 5;\nfree(((char *)(boxtop_redevelops - 5)[8]));\n \n","target":0}
{"idx":20566,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20567,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20568,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20569,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20570,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20571,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20572,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nnyctalops_pentacles = getenv(\"BUCCINATOR_ZITELLA\");\nancony_myotonia[0] = nyctalops_pentacles;\nkuttawa_electrotrephine = ancony_myotonia;\nkansan_unfouled = ((char *)kuttawa_electrotrephine[0]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(kansan_unfouled,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20573,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nnyctalops_pentacles = getenv(\"BUCCINATOR_ZITELLA\");\nancony_myotonia[0] = nyctalops_pentacles;\nkuttawa_electrotrephine = ancony_myotonia;\nkansan_unfouled = ((char *)kuttawa_electrotrephine[0]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(kansan_unfouled,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20574,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nnyctalops_pentacles = getenv(\"BUCCINATOR_ZITELLA\");\nancony_myotonia[0] = nyctalops_pentacles;\nkuttawa_electrotrephine = ancony_myotonia;\nkansan_unfouled = ((char *)kuttawa_electrotrephine[0]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(kansan_unfouled,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20575,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20576,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20577,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20578,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20579,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20580,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20581,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nholiday_celebratory = ((char *)(librarian_trichlorid - 5)[83]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(holiday_celebratory,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20582,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20583,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nholiday_celebratory = ((char *)(librarian_trichlorid - 5)[83]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(holiday_celebratory,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20584,"code":"void wakefield_minerological(char **librarian_trichlorid)\nfree(((char *)(librarian_trichlorid - 5)[83]));\n \n","target":0}
{"idx":20585,"code":"free(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nholiday_celebratory = ((char *)(librarian_trichlorid - 5)[83]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(holiday_celebratory,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20586,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20587,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fulmars_inhumanism,\"XPORT_ECOLOGICAL\");\nbacilliform_pedantocratic(swiss_guinean);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20588,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&fulmars_inhumanism,\"XPORT_ECOLOGICAL\");\nbacilliform_pedantocratic(swiss_guinean);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20589,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20590,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20591,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *fulmars_inhumanism;;\nstonesoup_read_taint(&fulmars_inhumanism,\"XPORT_ECOLOGICAL\");\nhemignathous_prerejoiced = &fulmars_inhumanism;\nswiss_guinean = hemignathous_prerejoiced + 5;\nbacilliform_pedantocratic(swiss_guinean);\nvoid bacilliform_pedantocratic(char **emulating_shauwe)\nfree(((char *)( *(emulating_shauwe - 5))));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&fulmars_inhumanism,\"XPORT_ECOLOGICAL\");\nhemignathous_prerejoiced = &fulmars_inhumanism;\nswiss_guinean = hemignathous_prerejoiced + 5;\nbacilliform_pedantocratic(swiss_guinean);\n \n","target":0}
{"idx":20592,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *sinnamahoning_hadith)\nif (sinnamahoning_hadith != 0) {;\nfrayne_cmtc = &sinnamahoning_hadith;\norganophile_scyphose = ((char *)( *frayne_cmtc));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], organophile_scyphose);\nif ( *frayne_cmtc != 0)\nfree(((char *)( *frayne_cmtc)));\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nsizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nif (1 == hash_update_result) {\nstonesoup_printf(\"%s  %s\\n\",hash_print_val,filename);\nfilename,algorithm_name);\nstonesoup_printf(\"Failure hashing file '%s' with algorithm '%s'.\\n\",filename,algorithm_name);\nstonesoup_printf(\"Failed to open file: '%s'\\n\",filename);\nif (file_stream != 0) {\nfclose(file_stream);\nvoid stonesoup_printf(char * format, ...) {\n \n","target":1}
{"idx":20593,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20594,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *sinnamahoning_hadith)\nfrayne_cmtc = &sinnamahoning_hadith;\nfree(((char *)( *frayne_cmtc)));\n \n","target":0}
{"idx":20595,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\nsinanthropus_unblacked(whirroo_poltinik,phonsa_kiddushin);\nsinanthropus_unblacked(cessionary_bussy,lateroflexion_inclusus);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20596,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\nPortalReleaseCachedPlan(portal);\nPortalDrop(portal,((bool )0));\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\nsinanthropus_unblacked(whirroo_poltinik,phonsa_kiddushin);\nsinanthropus_unblacked(cessionary_bussy,lateroflexion_inclusus);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20597,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nunion beaverwood_clockbird tubeworks_untouching;\nint harbour_hodler = 13;\nchar *canioned_uniradiated;;\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\ntubeworks_untouching . verbalization_brusk = canioned_uniradiated;\nsquooshing_respectworthy[5] = tubeworks_untouching;\nbostonians_washings[1] = 5;\nphonsa_kiddushin =  *(squooshing_respectworthy + bostonians_washings[1]);\nsinanthropus_unblacked(whirroo_poltinik,phonsa_kiddushin);\nvoid sinanthropus_unblacked(int cessionary_bussy,union beaverwood_clockbird lateroflexion_inclusus)\nfree(((char *)lateroflexion_inclusus . verbalization_brusk));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&canioned_uniradiated,\"6188\",harbour_hodler);\ntubeworks_untouching . verbalization_brusk = canioned_uniradiated;\nphonsa_kiddushin =  *(squooshing_respectworthy + bostonians_washings[1]);\nsinanthropus_unblacked(whirroo_poltinik,phonsa_kiddushin);\n \n","target":0}
{"idx":20598,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20599,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20600,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&choleokinase_kisra,\"1735\",shorted_barothermograph);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20601,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&choleokinase_kisra,\"1735\",shorted_barothermograph);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20602,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20603,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint shorted_barothermograph = 13;\nchar *choleokinase_kisra;\nstonesoup_read_taint(&choleokinase_kisra,\"1735\",shorted_barothermograph);\nachy_substantivize = choleokinase_kisra;\nreupholstered_chalcids[5] = achy_substantivize;\nunperforated_quinate[1] = 5;\nunmooring_wawro =  *(reupholstered_chalcids + unperforated_quinate[1]);\nfree(((char *)unmooring_wawro));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&choleokinase_kisra,\"1735\",shorted_barothermograph);\nachy_substantivize = choleokinase_kisra;\nreupholstered_chalcids[5] = achy_substantivize;\nunmooring_wawro =  *(reupholstered_chalcids + unperforated_quinate[1]);\nfree(((char *)unmooring_wawro));\n \n","target":0}
{"idx":20604,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20605,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *roof_untreatableness);\n \n","target":0}
{"idx":20606,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20607,"code":"void stonesoup_handle_taint(char *roof_untreatableness)\nbrusquely_endostylar = roof_untreatableness;\njamber_alcmaon = &brusquely_endostylar;\npedaled_disincarnation = jamber_alcmaon + 5;\nISOGONE_SUPERSATURATION(pedaled_disincarnation);\nvoid marashio_fellahin(overmark_apostoli *batonnier_sketchpad)\nfree(((char *)( *(batonnier_sketchpad - 5))));\n \n","target":0}
{"idx":20608,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20609,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&kickboard_hysterectomize,\"7574\",tees_staver);\nteryl_coaration(1,squid_legitimism);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20610,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&kickboard_hysterectomize,\"7574\",tees_staver);\nteryl_coaration(1,squid_legitimism);\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20611,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20612,"code":"unsigned int **stonesoup_buffer_array = 0;\nstruct aviatrices_kirmew revalorize_solicit = {0};\nva_list drachmas_permoralize;\n__builtin_va_start(drachmas_permoralize,inferiors_couturier);\nrevalorize_solicit = (va_arg(drachmas_permoralize,struct aviatrices_kirmew ));\nnontraitorous_gonangium = ((char *)revalorize_solicit . appal_quantifies);\nstonesoup_num = atoi(nontraitorous_gonangium);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20613,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20614,"code":"struct aviatrices_kirmew revalorize_solicit = {0};\nva_list drachmas_permoralize;\n__builtin_va_start(drachmas_permoralize,inferiors_couturier);\nrevalorize_solicit = (va_arg(drachmas_permoralize,struct aviatrices_kirmew ));\nfree(((char *)revalorize_solicit . appal_quantifies));\n \n","target":0}
{"idx":20615,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20616,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20617,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *solus_kindred)\nif (solus_kindred != 0) {;\nfistinut_unruffable = ((char *)solus_kindred);\nif (strlen(fistinut_unruffable) > 0 &&\nfistinut_unruffable[0] == '-') {\nif (strlen(fistinut_unruffable) > 0 &&\nstonesoup_num_files = strtoul(fistinut_unruffable,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nif (stonesoup_i < stonesoup_num_files)\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfree(stonesoup_filearray);\nif (solus_kindred != 0)\nfree(((char *)solus_kindred));\n \n","target":0}
{"idx":20618,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20619,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nreturn 0;\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nvoid stonesoup_handle_taint(char *solus_kindred)\nfistinut_unruffable = ((char *)solus_kindred);\nif (strlen(fistinut_unruffable) > 0 &&\nstonesoup_num_files = strtoul(fistinut_unruffable,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20620,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20621,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *solus_kindred)\nfree(((char *)solus_kindred));\n \n","target":0}
{"idx":20622,"code":"arbitry_naipkin = ((char *)(malloc(autonetics_breakweather + 1)));\nif (arbitry_naipkin == 0) {\nmemset(arbitry_naipkin,0,autonetics_breakweather + 1);\nmemcpy(arbitry_naipkin,hemiglyph_vociferative,autonetics_breakweather);\npunkey_rcpt(arbitry_naipkin);\n \n","target":0}
{"idx":20623,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hemiglyph_vociferative,\"ANY_UNSTANDARDISED\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20624,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hemiglyph_vociferative,\"ANY_UNSTANDARDISED\");\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20625,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20626,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *hemiglyph_vociferative;;\nstonesoup_read_taint(&hemiglyph_vociferative,\"ANY_UNSTANDARDISED\");\nautonetics_breakweather = ((int )(strlen(hemiglyph_vociferative)));\nmemcpy(arbitry_naipkin,hemiglyph_vociferative,autonetics_breakweather);\nfree(((char *)hemiglyph_vociferative));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&hemiglyph_vociferative,\"ANY_UNSTANDARDISED\");\nautonetics_breakweather = ((int )(strlen(hemiglyph_vociferative)));\nmemcpy(arbitry_naipkin,hemiglyph_vociferative,autonetics_breakweather);\nfree(((char *)hemiglyph_vociferative));\n \n","target":0}
{"idx":20627,"code":"void miscegine_brusher(char *dinging_gallicanism)\nfree(((char *)dinging_gallicanism));\n \n","target":0}
{"idx":20628,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20629,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *brachycome_korfonta)\nif (brachycome_korfonta != 0) {;\nhoratian_bowsing = ((void *)brachycome_korfonta);\nbemouth_geotaxis[ *( *invirility_sphygmoid)] = horatian_bowsing;\ndiapery_nonsustenance = bemouth_geotaxis[ *( *invirility_sphygmoid)];\nviscidulous_hemophilia = ((char *)((char *)diapery_nonsustenance));\nstonesoup_num = atoi(viscidulous_hemophilia);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (((char *)diapery_nonsustenance) != 0)\nfree(((char *)((char *)diapery_nonsustenance)));\n \n","target":0}
{"idx":20630,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nunsigned int **stonesoup_buffer_array = 0;\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_handle_taint(char *brachycome_korfonta)\nhoratian_bowsing = ((void *)brachycome_korfonta);\nbemouth_geotaxis[ *( *invirility_sphygmoid)] = horatian_bowsing;\ndiapery_nonsustenance = bemouth_geotaxis[ *( *invirility_sphygmoid)];\nviscidulous_hemophilia = ((char *)((char *)diapery_nonsustenance));\nstonesoup_num = atoi(viscidulous_hemophilia);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20631,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *brachycome_korfonta)\nhoratian_bowsing = ((void *)brachycome_korfonta);\nbemouth_geotaxis[ *( *invirility_sphygmoid)] = horatian_bowsing;\ndiapery_nonsustenance = bemouth_geotaxis[ *( *invirility_sphygmoid)];\nfree(((char *)((char *)diapery_nonsustenance)));\n \n","target":0}
{"idx":20632,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20633,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpGihgxI_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (pipe(stonesoup_fd_array[stonesoup_index].fd_array) == -1) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (pipe(stonesoup_fd_array[stonesoup_index].fd_array) == -1) {\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: BEFORE\");\n} else {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n} else {\nif (-1 == waitpid(stonesoup_fd_array[stonesoup_ii].pid, &stonesoup_child_signal, 0)) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (-1 == waitpid(stonesoup_fd_array[stonesoup_ii].pid, &stonesoup_child_signal, 0)) {\n} else {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n} else {\nif (barquentine_untranspiring != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20634,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20635,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20636,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20637,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20638,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20639,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20640,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20641,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20642,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20643,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20644,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20645,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20646,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20647,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20648,"code":"snprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20649,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20650,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20651,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20652,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20653,"code":"return 0;\nhornersville_hanuman = getenv(\"TYRANTLIKE_TUPS\");\nlevorotatory_mutus . fumishing_corpuscularian = hornersville_hanuman;\ncessment_nursegirl = ((char *)levorotatory_mutus . fumishing_corpuscularian);\nif (strlen(cessment_nursegirl) > 0 &&\nstonesoup_num_files = strtoul(cessment_nursegirl,0,16);\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\n \n","target":1}
{"idx":20654,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20655,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nisoglosses_klina(lecompton_bethel);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20656,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nisoglosses_klina(lecompton_bethel);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20657,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20658,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20659,"code":"sprintf(&hash_print_val[ii * 2],\"%02x\",md_value[ii]);\n \n","target":0}
{"idx":20660,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20661,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20662,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20663,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20664,"code":"void dopey_hypaethros(int aerobian_unqualified,char **bilsted_auspiciously)\nfree(((char *)(bilsted_auspiciously - 5)[3]));\n \n","target":0}
{"idx":20665,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20666,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20667,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20668,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20669,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20670,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20671,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20672,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20673,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20674,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *apaturia_anaphrodisiac)\nif (apaturia_anaphrodisiac != 0) {;\nmanuka_radiotron = apaturia_anaphrodisiac;\njuicelessness_smeath = ((char *)manuka_radiotron);\nstonesoup_files = fopen(juicelessness_smeath,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (manuka_radiotron != 0)\nfree(((char *)manuka_radiotron));\n \n","target":0}
{"idx":20675,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *apaturia_anaphrodisiac)\nmanuka_radiotron = apaturia_anaphrodisiac;\nfree(((char *)manuka_radiotron));\n \n","target":0}
{"idx":20676,"code":"sweetbriar_overdoses = ((char *)(malloc(movie_gweduck + 1)));\nif (sweetbriar_overdoses == 0) {\nmemset(sweetbriar_overdoses,0,movie_gweduck + 1);\nmemcpy(sweetbriar_overdoses,aminated_staghunter,movie_gweduck);\ndemisable_unparalysed(sweetbriar_overdoses);\nvoid demisable_unparalysed(char *const unmitigatedly_intolerable)\ndapperest_ujiji = ((char *)((char *)unmitigatedly_intolerable));\nstonesoup_files = fopen(dapperest_ujiji,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (((char *)unmitigatedly_intolerable) != 0)\nfree(((char *)((char *)unmitigatedly_intolerable)));\n \n","target":1}
{"idx":20677,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ndemisable_unparalysed(sweetbriar_overdoses);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20678,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ndemisable_unparalysed(sweetbriar_overdoses);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Fopen error due to ulimit\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20679,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20680,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = NULL;\nint validation_jasmone = 61;\nchar *aminated_staghunter;;\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nmovie_gweduck = ((int )(strlen(aminated_staghunter)));\nmemcpy(sweetbriar_overdoses,aminated_staghunter,movie_gweduck);\nfree(((char *)aminated_staghunter));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nmovie_gweduck = ((int )(strlen(aminated_staghunter)));\nmemcpy(sweetbriar_overdoses,aminated_staghunter,movie_gweduck);\nfree(((char *)aminated_staghunter));\n \n","target":0}
{"idx":20681,"code":"*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\n*stonesoup_tainted_buff = NULL;\nint validation_jasmone = 61;\nchar *aminated_staghunter;;\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nmovie_gweduck = ((int )(strlen(aminated_staghunter)));\nsweetbriar_overdoses = ((char *)(malloc(movie_gweduck + 1)));\nmemset(sweetbriar_overdoses,0,movie_gweduck + 1);\nmemcpy(sweetbriar_overdoses,aminated_staghunter,movie_gweduck);\ndemisable_unparalysed(sweetbriar_overdoses);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&aminated_staghunter,\"1152\",validation_jasmone);\nmovie_gweduck = ((int )(strlen(aminated_staghunter)));\nmemcpy(sweetbriar_overdoses,aminated_staghunter,movie_gweduck);\ndemisable_unparalysed(sweetbriar_overdoses);\nvoid demisable_unparalysed(char *const unmitigatedly_intolerable)\nfree(((char *)((char *)unmitigatedly_intolerable)));\n \n","target":0}
{"idx":20682,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20683,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&becrawled_burma,\"5154\",marolda_recuperability);\nPMSignalState = ((PMSignalData *)(ShmemInitStruct(\"PMSignalState\",PMSignalShmemSize(),&found)));\nSize _len = PMSignalShmemSize();\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&becrawled_burma,\"5154\",marolda_recuperability);\nnecessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20684,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0 && errno == 12) {\nif (stonesoup_contents == 0) {\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nint stonesoup_isalnum(int c)\nif ((c >= 97 && c <= 122) || (c >= 65 && c <= 90) || (c >= 48 && c <= 57)) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20685,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&becrawled_burma,\"5154\",marolda_recuperability);\nPMSignalState = ((PMSignalData *)(ShmemInitStruct(\"PMSignalState\",PMSignalShmemSize(),&found)));\nSize _len = PMSignalShmemSize();\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&becrawled_burma,\"5154\",marolda_recuperability);\nnecessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20686,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20687,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20688,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20689,"code":"if (!stonesoup_isalnum(str[index])) {\nreturn 0;\nnecessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid wellaways_mylohyoidei(int micast_sherurd,void *propagand_intransparent)\nunboggy_exsert = ((char *)((char *)propagand_intransparent));\nstonesoup_files = fopen(unboggy_exsert,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\n \n","target":1}
{"idx":20690,"code":"necessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nvoid wellaways_mylohyoidei(int micast_sherurd,void *propagand_intransparent)\nfree(((char *)((char *)propagand_intransparent)));\n \n","target":0}
{"idx":20691,"code":"necessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\nvoid wellaways_mylohyoidei(int micast_sherurd,void *propagand_intransparent)\nunboggy_exsert = ((char *)((char *)propagand_intransparent));\nstonesoup_files = fopen(unboggy_exsert,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20692,"code":"int i = 0;\nfree(ptrs[i]);\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nnecessaries_salvationist = poxy_sheepfacedness(casuistical_objurgatorily);\nwellaways_mylohyoidei(adversifoliate_opportunely,necessaries_salvationist);\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nwellaways_mylohyoidei(micast_sherurd,propagand_intransparent);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nfree(stonesoup_str_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(ptrs[i]);\nvoid wellaways_mylohyoidei(int micast_sherurd,void *propagand_intransparent)\nunboggy_exsert = ((char *)((char *)propagand_intransparent));\nstonesoup_files = fopen(unboggy_exsert,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nint stonesoup_isalnum(int c)\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\n \n","target":1}
{"idx":20693,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20694,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20695,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nstonesoup_printf(\"evaluating input\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20696,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20697,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20698,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nchar *cybele_diseducate;;\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nmessage_cytozoic = ((void *)cybele_diseducate);\nfree(((char *)((char *)message_cytozoic)));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nmessage_cytozoic = ((void *)cybele_diseducate);\nfree(((char *)((char *)message_cytozoic)));\n \n","target":0}
{"idx":20699,"code":"rewind(stonesoup_tainted_file);\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n*stonesoup_tainted_buff = NULL;\nunsigned int **stonesoup_buffer_array = 0;\nchar *cybele_diseducate;;\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nmessage_cytozoic = ((void *)cybele_diseducate);\nprecensuring_adunation = ((char *)((char *)message_cytozoic));\nstonesoup_num = atoi(precensuring_adunation);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_read_taint(&cybele_diseducate,\"AMBROTYPE_BEFOULMENT\");\nmessage_cytozoic = ((void *)cybele_diseducate);\nprecensuring_adunation = ((char *)((char *)message_cytozoic));\nstonesoup_num = atoi(precensuring_adunation);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20700,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20701,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20702,"code":"char *atoner_tremelliform = 0;\nfischbein_hiphape(&atoner_tremelliform);\nriemannean_uncounselled = surpluses_angioma(atoner_tremelliform);\nchar *surpluses_angioma(char *prereveal_symphytize)\nreturn prereveal_symphytize;\nriemannean_uncounselled = surpluses_angioma(atoner_tremelliform);\nexpedited_predeciding[9] = riemannean_uncounselled;\nfree(((char *)expedited_predeciding[9]));\n \n","target":0}
{"idx":20703,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20704,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20705,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpqitnUT_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (stonesoup_file == 0) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (stonesoup_file == 0) {\nif (stonesoup_files != 0)\nif (eidoptometry_sandrock != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20706,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpqitnUT_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nif (stonesoup_file == 0) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nif (stonesoup_file == 0) {\nif (stonesoup_files != 0)\nif (eidoptometry_sandrock != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20707,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20708,"code":"free(d -> follows[i] . elems);\nfor (i = 0; i < (d -> tralloc); ++i) {\n \n","target":0}
{"idx":20709,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20710,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20711,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20712,"code":"mblen_buf[i] = 0;\n}while (0);\nif (((char *)p) >= end) {\n \n","target":0}
{"idx":20713,"code":"free(d -> states[i] . elems . elems);\n \n","target":0}
{"idx":20714,"code":"free((d -> states));\nfor (i = 0; i < d -> tindex; ++i)\n \n","target":0}
{"idx":20715,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20716,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20717,"code":"free(d -> follows[i] . elems);\nfree((d -> follows));\n \n","target":0}
{"idx":20718,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20719,"code":"size_t *nlastpos;\nsize_t *o_nfirst;\nfree(o_nullable);\n \n","target":0}
{"idx":20720,"code":"trostera_outbawls = ((char *)(malloc(antitwilight_kersten + 1)));\nif (trostera_outbawls == 0) {\nmemset(trostera_outbawls,0,antitwilight_kersten + 1);\nmemcpy(trostera_outbawls,hordein_haptophor,antitwilight_kersten);\n*calesero_cowshed = trostera_outbawls;\n \n","target":0}
{"idx":20721,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20722,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20723,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\n \n","target":0}
{"idx":20724,"code":"char *majolica_susette = 0;\nmommies_levulose(&majolica_susette);\nanticipators_antiliberalness[5] = majolica_susette;\nsimous_monocular[1] = 5;\nprecooling_stateable =  *(anticipators_antiliberalness + simous_monocular[1]);\nfree(((char *)precooling_stateable));\n \n","target":0}
{"idx":20725,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20726,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20727,"code":"unsigned int **stonesoup_buffer_array = 0;\nchar *majolica_susette = 0;\nmommies_levulose(&majolica_susette);\nanticipators_antiliberalness[5] = majolica_susette;\nsimous_monocular[1] = 5;\nprecooling_stateable =  *(anticipators_antiliberalness + simous_monocular[1]);\nnondexterity_bandeau = ((char *)precooling_stateable);\nstonesoup_num = atoi(nondexterity_bandeau);\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_num\", stonesoup_num, &stonesoup_num, \"INITIAL-STATE\");\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_unsigned_integral, \"stonesoup_size\", stonesoup_size, &stonesoup_size, \"INITIAL-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nstonesoup_buffer_array[stonesoup_i] = 0;\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20728,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sife_frierson,\"8603\",interstrove_serfdoms);\nenteria_riverless = quamashes_biotome(unproverbially_bespake);\nmicroanalytical_bradypepsy(unimpurpled_varus,enteria_riverless);\nmicroanalytical_bradypepsy(astomatous_triiodomethane,umbrellawise_unreprehended);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20729,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&sife_frierson,\"8603\",interstrove_serfdoms);\nenteria_riverless = quamashes_biotome(unproverbially_bespake);\nmicroanalytical_bradypepsy(unimpurpled_varus,enteria_riverless);\nmicroanalytical_bradypepsy(astomatous_triiodomethane,umbrellawise_unreprehended);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20730,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20731,"code":"enteria_riverless = quamashes_biotome(unproverbially_bespake);\nmicroanalytical_bradypepsy(unimpurpled_varus,enteria_riverless);\nmicroanalytical_bradypepsy(astomatous_triiodomethane,umbrellawise_unreprehended);\nvoid microanalytical_bradypepsy(int astomatous_triiodomethane,starvedly_mucilaginously umbrellawise_unreprehended)\nfree(((char *)umbrellawise_unreprehended));\n \n","target":0}
{"idx":20732,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20733,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20734,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20735,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20736,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20737,"code":"free(((char *)( *significance_solutions) . versers_demonisms));\n \n","target":0}
{"idx":20738,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpaVV88f_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nif (sewered_dasyurus != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20739,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nif (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpaVV88f_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_file = fopen(stonesoup_filename,\"w\");\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\ntracepoint(stonesoup_trace, trace_point, \"CROSSOVER-POINT: AFTER\");\nif (sewered_dasyurus != 0)\nif (stonesoup_printf_context != NULL &&\nstonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20740,"code":"size_t *o_nfirst;\nsize_t *o_nlast;\nfree(o_firstpos);\n \n","target":0}
{"idx":20741,"code":"mblen_buf[i] = 0;\n}while (0);\n*backref = 1;\n \n","target":0}
{"idx":20742,"code":"mblen_buf[i] = 0;\n}while (0);\nif (d -> mb_cur_max > 1) {\n \n","target":0}
{"idx":20743,"code":"free((d -> newlines));\nfree((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\nndm = dm -> next;\n \n","target":0}
{"idx":20744,"code":"free((d -> success));\nfor (dm = d -> musts; dm; dm = ndm) {\n \n","target":0}
{"idx":20745,"code":"char * dirpath = NULL;\nint size_dirpath = 0;\nss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20746,"code":"int *nullable;\nint *o_nullable;\nnullable = ((sizeof(( *nullable)) == 1?xmalloc(d -> depth) : xnmalloc(d -> depth,sizeof(( *nullable)))));\no_nullable = nullable;\nfree(o_nullable);\n \n","target":0}
{"idx":20747,"code":"struct dfamust *dm;\nresult = musts[0] . in[i];\ndm = ((sizeof(( *dm)) == 1?xmalloc(1) : xnmalloc(1,sizeof(( *dm)))));\ndm -> must = (xmemdup(result,strlen(result) + 1));\ndm -> next = d -> musts;\nd -> musts = dm;\nmp = musts;\nfor (i = 0; i <= d -> tindex; ++i) {\nfreelist(mp[i] . in);\nstatic void freelist(char **cpp)\nif (cpp == ((void *)0)) {\nreturn ;\nfor (i = 0; cpp[i] != ((void *)0); ++i) {\nfree(cpp[i]);\ncpp[i] = ((void *)0);\nfreelist(mp[i] . in);\nfree(mp[i] . in);\nfree(mp[i] . left);\n \n","target":0}
{"idx":20748,"code":"char stonesoup_filename[80];\nstonesoup_read_taint(&sewered_dasyurus,\"PRIONOPS_LIBRARY\");\nif (sewered_dasyurus != 0) {\ndispensatorily_calcspar = ((char *)sewered_dasyurus);\nstonesoup_files = fopen(dispensatorily_calcspar,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\n \n","target":1}
{"idx":20749,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20750,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20751,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20752,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20753,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20754,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\n \n","target":0}
{"idx":20755,"code":"void fillmass_hdx(void *pirate_overexpansion)\ntacitly_comboy(pirate_overexpansion);\nvoid tacitly_comboy(void *platinocyanide_titillating)\npoort_junr = ((char *)((char *)platinocyanide_titillating));\nif (strlen(poort_junr) > 0 &&\nstonesoup_num_files = strtoul(poort_junr,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20756,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20757,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20758,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *whitey_frosty)\nif (whitey_frosty != 0) {;\ntarahumari_mawson = ((void *)whitey_frosty);\nintemerateness_unorientalness[5] = tarahumari_mawson;\nunderbear_uranothallite =  *(intemerateness_unorientalness +  *foulminded_stammerwort);\nfutz_nett = ((char *)((char *)underbear_uranothallite));\nstonesoup_files = fopen(futz_nett,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nwhile(stonesoup_ssi < stonesoup_num_files){\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0) {\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nif (((char *)underbear_uranothallite) != 0)\nfree(((char *)((char *)underbear_uranothallite)));\n \n","target":1}
{"idx":20759,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20760,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20761,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20762,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20763,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20764,"code":"struct malacologic_pileus multiuse_bullfrog;\nint prepackage_bombernickel = 13;\nchar *trapnested_agavose;\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nif (trapnested_agavose != 0) {;\nmultiuse_bullfrog . unpoignantly_pungle = ((char *)trapnested_agavose);\npilies_articles[ *( *barmkin_vanderbilt)] = multiuse_bullfrog;\nwoden_marissa = pilies_articles[ *( *barmkin_vanderbilt)];\nsaltman_octoploidy = ((char *)woden_marissa . unpoignantly_pungle);\nif (strlen(saltman_octoploidy) > 1 && saltman_octoploidy[0] == '-') {\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_stack_size = strtoul(saltman_octoploidy,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)woden_marissa . unpoignantly_pungle));\n \n","target":1}
{"idx":20765,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nstonesoup_setup_printf_context();\nunashamedly_gaiety = getenv(\"DRAINPIPES_SANIDINIC\");\nif (unashamedly_gaiety != 0) {;\nnymphly_daemons = ((char *)unashamedly_gaiety);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nunsigned char file_contents[1024];\nsize_t file_contents_size = 1024;\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nbreak;\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20766,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20767,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20768,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20769,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\n \n","target":0}
{"idx":20770,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\n \n","target":0}
{"idx":20771,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20772,"code":"void aristocratism_beyer(char **hyper_bewigs)\nreconfound_unsupplicating = ((char *)( *(hyper_bewigs - 5)));\nstonesoup_num_files = strtoul(reconfound_unsupplicating,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20773,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20774,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20775,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":20776,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20777,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":20778,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nfree(((char *)osteitis_christiansen));\n \n","target":0}
{"idx":20779,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nstonesoup_setup_printf_context();\nunashamedly_gaiety = getenv(\"DRAINPIPES_SANIDINIC\");\nif (unashamedly_gaiety != 0) {;\nnymphly_daemons = ((char *)unashamedly_gaiety);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nunsigned char file_contents[1024];\nsize_t file_contents_size = 1024;\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nbreak;\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20780,"code":"stonesoup_setup_printf_context();\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20781,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20782,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20783,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *persuader_wwi);\n \n","target":0}
{"idx":20784,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20785,"code":"unsigned int **stonesoup_buffer_array = 0;\nstruct eumitosis_eucaryote dimplier_war = {0};\nva_list ccip_badger;\n__builtin_va_start(ccip_badger,outpursued_hydrogalvanic);\ndimplier_war = (va_arg(ccip_badger,struct eumitosis_eucaryote ));\npsorospermic_unlanguidly = ((char *)dimplier_war . persymmetrical_unburnableness);\nstonesoup_num = atoi(psorospermic_unlanguidly);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20786,"code":"struct eumitosis_eucaryote dimplier_war = {0};\nva_list ccip_badger;\n__builtin_va_start(ccip_badger,outpursued_hydrogalvanic);\ndimplier_war = (va_arg(ccip_badger,struct eumitosis_eucaryote ));\nfree(((char *)dimplier_war . persymmetrical_unburnableness));\n \n","target":0}
{"idx":20787,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20788,"code":"stonesoup_setup_printf_context();\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nif (stonesoup_tainted_file != 0) {\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nif (stonesoup_tainted_file != 0) {\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nmultitudinistic_misadressing . telakucha_roast = ((char *)foggiest_readopts);\nshakha_pact = ((char *)grapple_necessaries . telakucha_roast);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], shakha_pact);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":20789,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20790,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20791,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20792,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20793,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20794,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20795,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20796,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *attainableness_colostral);\nbut_predations . multivane_portmanmote = attainableness_colostral;\nantistrophon_sakkos = &but_predations;\ndefectiveness_methamphetamine = &antistrophon_sakkos;\nkremlinologist_thoroughnesses = &defectiveness_methamphetamine;\nbrussel_contemple = &kremlinologist_thoroughnesses;\nensigncies_trampoliner = &brussel_contemple;\nbigate_pycnidiospore = &ensigncies_trampoliner;\npazend_blackwash = &bigate_pycnidiospore;\nbuffon_resurrects = &pazend_blackwash;\noverborrows_cymophanous = &buffon_resurrects;\ncheatery_skimpier = &overborrows_cymophanous;\nmaghutte_rescramble(groundwood_interstriving,cheatery_skimpier);\nvoid maghutte_rescramble(int arachne_dendrobates,union exploitatively_caruncle **********erat_sips)\nmulberry_hydrotimeter = ((char *)( *( *( *( *( *( *( *( *( *( *erat_sips)))))))))) . multivane_portmanmote);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], mulberry_hydrotimeter);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":20797,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20798,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20799,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nstonesoup_printf(\"Input value is negative\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20800,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20801,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20802,"code":"char *courteousness_ausable;\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nahearn_gregariniform = ((char *)courteousness_ausable);\nstonesoup_stack_size = strtoul(ahearn_gregariniform,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)courteousness_ausable));\n \n","target":1}
{"idx":20803,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20804,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20805,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\ntracepoint(stonesoup_trace, trace_point, \"Returning 0\");\nreturn 0;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20806,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20807,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20808,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20809,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\n \n","target":0}
{"idx":20810,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20811,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nsupercapital_bacilliform = getenv(\"QUINOIDS_WELLESZ\");\nhoschton_aphesius = ((char *)supercapital_bacilliform);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(hoschton_aphesius,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20812,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20813,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20814,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20815,"code":"moazami_prismatize = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *profeminism_landon)))))))))))))))))))))))))))))))))))))))))))))))))) . sonorific_tipula);\nif (strlen(moazami_prismatize) > 0 &&\nstonesoup_num_files = strtoul(moazami_prismatize,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20816,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20817,"code":"jesuate_undisjointed = ((char *)(malloc(urochromogen_hafted + 1)));\nmemset(jesuate_undisjointed,0,urochromogen_hafted + 1);\nmemcpy(jesuate_undisjointed,mallowwort_contraoctave,urochromogen_hafted);\nkrieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nchar *akhisar_accentuality(char *phantomland_ectocoelic)\n++stonesoup_global_variable;\nreturn phantomland_ectocoelic;\nkrieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nSAINTPAULIA_GHOSTLET(krieg_amberoid);\nvoid autozooid_assignable(char *nestler_soinski)\nfree(((char *)nestler_soinski));\n \n","target":0}
{"idx":20818,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20819,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20820,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20821,"code":"krieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nSAINTPAULIA_GHOSTLET(krieg_amberoid);\nvoid autozooid_assignable(char *nestler_soinski)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nflickertail_ahush = ((char *)nestler_soinski);\nstonesoup_files = fopen(flickertail_ahush,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":20822,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20823,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20824,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&dinumeration_tammock,\"6917\",vers_cosmetologists);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20825,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20826,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20827,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nreveller_tmemata = ((char *)( *polygeny_ultraritualism) . syndicator_fulmicotton);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(reveller_tmemata,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20828,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nreveller_tmemata = ((char *)( *polygeny_ultraritualism) . syndicator_fulmicotton);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(reveller_tmemata,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20829,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20830,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *gard_anorthitite);\nint plies_hiplines = 7;\nlizard_reticularly . wagework_withhie = gard_anorthitite;\nsanctologist_antilogs[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *tubik_rencountering)))))))))))))))))))))))))))))))))))))))))))))))))] = lizard_reticularly;\nbacony_outshoved = sanctologist_antilogs[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *tubik_rencountering)))))))))))))))))))))))))))))))))))))))))))))))))];\nfurrows_perceivableness(plies_hiplines,bacony_outshoved);\nvoid furrows_perceivableness(int masonic_alulim,union academus_chishima bancroft_numerosity)\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nfclose(stonesoup_files);\n \n","target":0}
{"idx":20831,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20832,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20833,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20834,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20835,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20836,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *empressements_pallors);\nmegbote_stomatoda . catchie_aerosphere = empressements_pallors;\nsupportful_shelley(1,megbote_stomatoda);\nvoid supportful_shelley(int metheglin_toul,... )\nif (metheglin_toul > 0) {\nbirchen_acridines = (va_arg(monopolitical_irefully,union acephalus_piranhas ));\nundignify_carabin = ((char *)birchen_acridines . catchie_aerosphere);\nstonesoup_stack_size = strtoul(undignify_carabin,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\n \n","target":1}
{"idx":20837,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20838,"code":"union acephalus_piranhas birchen_acridines = {0};\nva_list monopolitical_irefully;\n__builtin_va_start(monopolitical_irefully,metheglin_toul);\nbirchen_acridines = (va_arg(monopolitical_irefully,union acephalus_piranhas ));\nfree(((char *)birchen_acridines . catchie_aerosphere));\n \n","target":0}
{"idx":20839,"code":"polycoccous_faineancy = ((char *)(malloc(intitules_pana + 1)));\nif (polycoccous_faineancy == 0) {\nmemset(polycoccous_faineancy,0,intitules_pana + 1);\nmemcpy(polycoccous_faineancy,enamine_antidepressants,intitules_pana);\nmethodically_dyspepsia = &polycoccous_faineancy;\nanalepses_exhortator = methodically_dyspepsia + 5;\nchifferobe_unphrasable(analepses_exhortator);\nvoid chifferobe_unphrasable(char **hakafoth_didi);\nmobilizable_exla(hakafoth_didi);\nvoid mobilizable_exla(char **adit_chaillot)\nlabrosaurus_electrolysation(adit_chaillot);\nvoid labrosaurus_electrolysation(char **tatty_lallands)\nindefatigably_ford(tatty_lallands);\nvoid indefatigably_ford(char **vulgarest_armrest)\naloins_unwinder(vulgarest_armrest);\nvoid aloins_unwinder(char **suiters_nonahydrate)\nprotobasidium_lauds = ((char *)( *(suiters_nonahydrate - 5)));\nstonesoup_stack_size = strtoul(protobasidium_lauds,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)( *(suiters_nonahydrate - 5))));\n \n","target":1}
{"idx":20840,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *enamine_antidepressants)\nintitules_pana = ((int )(strlen(enamine_antidepressants)));\npolycoccous_faineancy = ((char *)(malloc(intitules_pana + 1)));\nmemset(polycoccous_faineancy,0,intitules_pana + 1);\nmemcpy(polycoccous_faineancy,enamine_antidepressants,intitules_pana);\nfree(((char *)enamine_antidepressants));\n \n","target":0}
{"idx":20841,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20842,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20843,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bechern_apogeal)\nif (bechern_apogeal != 0) {;\navarice_shankings = ((char *)bechern_apogeal);\nstonesoup_files = fopen(avarice_shankings,\"rb\");\nif (stonesoup_files != 0) {\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nif (bechern_apogeal != 0)\nfree(((char *)bechern_apogeal));\n \n","target":1}
{"idx":20844,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20845,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20846,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20847,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *hairpin_despouse)\nvoid (*neuroticize_heathenized)(char *) = superaffiuence_thanatophobe;\ndistractedness_specialising[ *( *( *( *( *( *( *( *( *( *interlotted_brahmi)))))))))] = hairpin_despouse;\nzackariah_cloners = distractedness_specialising[ *( *( *( *( *( *( *( *( *( *interlotted_brahmi)))))))))];\nneuroticize_heathenized(zackariah_cloners);\nvoid superaffiuence_thanatophobe(char *hawks_unproviding)\nsavors_waterford = ((char *)hawks_unproviding);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], savors_waterford);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":20848,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20849,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *halfwise_cucujid)\nif (halfwise_cucujid != 0) {;\nmontpellier_belauded . acutances_indifferent = halfwise_cucujid;\nunequitableness_prosopotocia[ *( *ansulate_carlin)] = montpellier_belauded;\nxui_protomartyr = unequitableness_prosopotocia[ *( *ansulate_carlin)];\ndeviants_buckishness = ((char *)xui_protomartyr . acutances_indifferent);\nstonesoup_files = fopen(deviants_buckishness,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (xui_protomartyr . acutances_indifferent != 0)\nfree(((char *)xui_protomartyr . acutances_indifferent));\n \n","target":1}
{"idx":20850,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *halfwise_cucujid)\nunion forklike_interscription montpellier_belauded;\nmontpellier_belauded . acutances_indifferent = halfwise_cucujid;\nunequitableness_prosopotocia[ *( *ansulate_carlin)] = montpellier_belauded;\nxui_protomartyr = unequitableness_prosopotocia[ *( *ansulate_carlin)];\nfree(((char *)xui_protomartyr . acutances_indifferent));\n \n","target":0}
{"idx":20851,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *seduced_gaeing)\npeed_smdr . paralyze_demoniacs = ((char *)seduced_gaeing);\ngurglingly_prongbuck(peed_smdr);\nvoid gurglingly_prongbuck(const struct thermoperiodic_carmela cavit_inoppressive)\nliquidogenous_hodoscope(promulgation_glumose,cavit_inoppressive);\nvoid liquidogenous_hodoscope(int pouffs_composite,struct thermoperiodic_carmela coruscative_adelea)\nsectionalism_nonsuit = ((char *)((struct thermoperiodic_carmela )coruscative_adelea) . paralyze_demoniacs);\nstonesoup_files = fopen(sectionalism_nonsuit,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nfree(((char *)((struct thermoperiodic_carmela )coruscative_adelea) . paralyze_demoniacs));\n \n","target":1}
{"idx":20852,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20853,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *prided_mackinaw);\nlensed_texline = ((void *)prided_mackinaw);\nnonlethally_lobelines = &lensed_texline;\ncoppin_vaishnavism(nonlethally_lobelines);\nvoid coppin_vaishnavism(void **onrushes_contextured)\ncuriosa_tuberculoses(onrushes_contextured);\nvoid curiosa_tuberculoses(void **murrains_sinologue)\nurbanest_nontreated(murrains_sinologue);\nvoid urbanest_nontreated(void **pseudofamously_saratoga)\nsingleness_bihari = ((char *)((char *)( *pseudofamously_saratoga)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], singleness_bihari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nfree(((char *)((char *)( *pseudofamously_saratoga))));\n \n","target":1}
{"idx":20854,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20855,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20856,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20857,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20858,"code":"int pneumology_houndlike = 7;\nunion prereveal_philomel frigiferous_wawina = {0};\nva_list inocular_upclimb;\n__builtin_va_start(inocular_upclimb,tiresome_unadept);\nfrigiferous_wawina = (va_arg(inocular_upclimb,union prereveal_philomel ));\ndeletion_dour(pneumology_houndlike,frigiferous_wawina);\nvoid deletion_dour(int hardheads_mousses,union prereveal_philomel spires_narthecium)\ninternality_cylindroma = ((char *)spires_narthecium . beeson_joyous);\nstonesoup_num_files = strtoul(internality_cylindroma,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20859,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20860,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20861,"code":"if (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpNG1SdY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20862,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20863,"code":"int stonesoup_stack_size = 0;\nchar *reconstructing_uninsistently = 0;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpNG1SdY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&forestish_metalware,\"3798\",survivancy_diphosphide);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\nif ((stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&forestish_metalware,\"3798\",survivancy_diphosphide);\nreconstructing_uninsistently = ((char *)forestish_metalware);\nstonesoup_stack_size = strtoul(reconstructing_uninsistently,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (forestish_metalware != 0)\nfree(((char *)forestish_metalware));\n \n","target":1}
{"idx":20864,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20865,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20866,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"evaluating input\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"evaluating input\\n\");\nstonesoup_printf(\"finished evaluating\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"finished evaluating\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20867,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20868,"code":"archpresbyter_trilliums = getenv(\"GEMINIANI_IMMATCHLESS\");\nesdud_shipwrecks[17] = archpresbyter_trilliums;\nturbocharger_rabaul[5] = esdud_shipwrecks;\ntryst_sexily[1] = 5;\nrewhiten_cot =  *(turbocharger_rabaul + tryst_sexily[1]);\nintertissued_crocketing(singsong_lattimer,rewhiten_cot);\nvoid intertissued_crocketing(int difda_stiacciato,char **anabaptism_dekadrachm)\nunsigned int **stonesoup_buffer_array = 0;\nvernacularizing_anguishes = ((char *)anabaptism_dekadrachm[17]);\nstonesoup_num = atoi(vernacularizing_anguishes);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20869,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20870,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20871,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20872,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20873,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20874,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20875,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20876,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20877,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20878,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *botts_marbling)\nif (botts_marbling != 0) {;\nthuluth_finagle[5] = botts_marbling;\nuncertificated_fellatrice = &thuluth_finagle;\nrumenocentesis_hinted = &uncertificated_fellatrice;\nhuge_boris = ((char *)( *( *rumenocentesis_hinted))[5]);\nif (( *( *rumenocentesis_hinted))[5] != 0)\nfree(((char *)( *( *rumenocentesis_hinted))[5]));\n \n","target":0}
{"idx":20879,"code":"huge_boris = ((char *)( *( *rumenocentesis_hinted))[5]);\nif (strlen(huge_boris) > 0 &&\nstonesoup_num_files = strtoul(huge_boris,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20880,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20881,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *coessentialness_frosts)\nif (coessentialness_frosts != 0) {;\ndishwiping_polysomitic . pelides_pinnipedian = ((char *)coessentialness_frosts);\nshriekily_hummeler = &dishwiping_polysomitic;\nfixure_woodward = ((struct successfully_ungrotesque *)(((unsigned long )shriekily_hummeler) * railbus_caliver * railbus_caliver)) + 5;\napproach_deamidase = ((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian);\nstonesoup_files = fopen(approach_deamidase,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (( *(fixure_woodward - 5)) . pelides_pinnipedian != 0)\nfree(((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian));\n \n","target":1}
{"idx":20882,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20883,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20884,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20885,"code":"infectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nrecomplete_kumari = ((char *)( *( *sundays_lyra)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], recomplete_kumari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":1}
{"idx":20886,"code":"char *largeous_intraperiosteal;\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nchevrolet_hemokonia = ((int )(strlen(largeous_intraperiosteal)));\ninfectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nfree(((char *)largeous_intraperiosteal));\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":0}
{"idx":20887,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20888,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20889,"code":"char *largeous_intraperiosteal;\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nchevrolet_hemokonia = ((int )(strlen(largeous_intraperiosteal)));\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nfree(((char *)largeous_intraperiosteal));\n \n","target":0}
{"idx":20890,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *pervades_guardian)\nif (pervades_guardian != 0) {;\nginsberg_venosities = 1;\nsavers_adelheid = &pervades_guardian;\nnapping_evergood = ((char **)(((unsigned long )savers_adelheid) * ginsberg_venosities * ginsberg_venosities)) + 5;\neliminates_slipperyroot = ((char *)( *(napping_evergood - 5)));\nstonesoup_stack_size = strtoul(eliminates_slipperyroot,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif ( *(napping_evergood - 5) != 0)\nfree(((char *)( *(napping_evergood - 5))));\n \n","target":1}
{"idx":20891,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20892,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20893,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20894,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20895,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20896,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20897,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20898,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nendoconidia_overfatigue = ((char *)buhlworks_toilettes . cursedest_nonexuding);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(endoconidia_overfatigue,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20899,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nendoconidia_overfatigue = ((char *)buhlworks_toilettes . cursedest_nonexuding);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(endoconidia_overfatigue,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20900,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\n \n","target":0}
{"idx":20901,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20902,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20903,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20904,"code":"int abietene_deathsman = 7;\nstonesoup_read_taint(&ketoses_rosabella,\"5697\",yeomanly_neighborship);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&ketoses_rosabella,\"5697\",yeomanly_neighborship);\ncrusta_chamaesaura = lett_scurvier(ketoses_rosabella);\nchar *lett_scurvier(char *phenix_gyrometer)\nreturn phenix_gyrometer;\ncrusta_chamaesaura = lett_scurvier(ketoses_rosabella);\nexocone_nonpejorative(abietene_deathsman,crusta_chamaesaura);\nvoid exocone_nonpejorative(int unblacked_occamistic,char *drumfire_product)\nunsigned int **stonesoup_buffer_array = 0;\nophthalmometer_spulyie = ((char *)drumfire_product);\nstonesoup_num = atoi(ophthalmometer_spulyie);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20905,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20906,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20907,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20908,"code":"solipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfree(stonesoup_filearray);\nif (heterotopous_berrendo != 0)\nfree(((char *)heterotopous_berrendo));\n \n","target":0}
{"idx":20909,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20910,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nfree(((char *)heterotopous_berrendo));\n \n","target":0}
{"idx":20911,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20912,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20913,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":20914,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nfor (stonesoup_str_list_index = 0; stonesoup_str_list_index < stonesoup_num_files; ++stonesoup_str_list_index)\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20915,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20916,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":20917,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20918,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20919,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20920,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\n__builtin_va_start(triggered_stomachic,doit_dayton);\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20921,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20922,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_printf(char * format, ...) {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20923,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20924,"code":"struct usna_diabantite temulency_counterbalances;\nchar *signature_antehistoric;\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\ntemulency_counterbalances . dreadly_flowmeter = ((char *)signature_antehistoric);\nincubous_cebus[5] = temulency_counterbalances;\nreeked_lucretius[1] = 5;\nvax_popes =  *(incubous_cebus + reeked_lucretius[1]);\nindan_blouson = ((char *)vax_popes . dreadly_flowmeter);\nstonesoup_stack_size = strtoul(indan_blouson,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)vax_popes . dreadly_flowmeter));\n \n","target":1}
{"idx":20925,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20926,"code":"fennici_nontribesmen = ((char *)(malloc(fibrilations_hydetown + 1)));\nmemset(fennici_nontribesmen,0,fibrilations_hydetown + 1);\nmemcpy(fennici_nontribesmen,bosone_irvingism,fibrilations_hydetown);\nontine_transjordanian[5] = fennici_nontribesmen;\nsockeroos_seamlet =  *(ontine_transjordanian +  *jud_unnonsensical);\ngaudish_mcveigh(sockeroos_seamlet);\nvoid gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nolive_gotchy = ((char *)chalybean_idumaean);\nstonesoup_num_files = strtoul(olive_gotchy,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nif (chalybean_idumaean != 0)\nfree(((char *)chalybean_idumaean));\n \n","target":1}
{"idx":20927,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bosone_irvingism)\nif (bosone_irvingism != 0) {;\nfibrilations_hydetown = ((int )(strlen(bosone_irvingism)));\nif (bosone_irvingism != 0)\nfree(((char *)bosone_irvingism));\n \n","target":0}
{"idx":20928,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20929,"code":"fennici_nontribesmen = ((char *)(malloc(fibrilations_hydetown + 1)));\nmemset(fennici_nontribesmen,0,fibrilations_hydetown + 1);\nmemcpy(fennici_nontribesmen,bosone_irvingism,fibrilations_hydetown);\nontine_transjordanian[5] = fennici_nontribesmen;\nunnarcotic_razormaker = 5;\njud_unnonsensical = &unnarcotic_razormaker;\nsockeroos_seamlet =  *(ontine_transjordanian +  *jud_unnonsensical);\ngaudish_mcveigh(sockeroos_seamlet);\nvoid gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nfree(((char *)chalybean_idumaean));\n \n","target":0}
{"idx":20930,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20931,"code":"void gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nolive_gotchy = ((char *)chalybean_idumaean);\nif (strlen(olive_gotchy) > 0 &&\nstonesoup_num_files = strtoul(olive_gotchy,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20932,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20933,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_printf(char * format, ...) {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20934,"code":"char * dirpath = NULL;\nint size_dirpath = 0;\nss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20935,"code":"int *nullable;\nint *o_nullable;\nnullable = ((sizeof(( *nullable)) == 1?xmalloc(d -> depth) : xnmalloc(d -> depth,sizeof(( *nullable)))));\no_nullable = nullable;\nfree(o_nullable);\n \n","target":0}
{"idx":20936,"code":"struct dfamust *dm;\nresult = musts[0] . in[i];\ndm = ((sizeof(( *dm)) == 1?xmalloc(1) : xnmalloc(1,sizeof(( *dm)))));\ndm -> must = (xmemdup(result,strlen(result) + 1));\ndm -> next = d -> musts;\nd -> musts = dm;\nmp = musts;\nfor (i = 0; i <= d -> tindex; ++i) {\nfreelist(mp[i] . in);\nstatic void freelist(char **cpp)\nif (cpp == ((void *)0)) {\nreturn ;\nfor (i = 0; cpp[i] != ((void *)0); ++i) {\nfree(cpp[i]);\ncpp[i] = ((void *)0);\nfreelist(mp[i] . in);\nfree(mp[i] . in);\nfree(mp[i] . left);\n \n","target":0}
{"idx":20937,"code":"char stonesoup_filename[80];\nstonesoup_read_taint(&sewered_dasyurus,\"PRIONOPS_LIBRARY\");\nif (sewered_dasyurus != 0) {\ndispensatorily_calcspar = ((char *)sewered_dasyurus);\nstonesoup_files = fopen(dispensatorily_calcspar,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\n \n","target":1}
{"idx":20938,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20939,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20940,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20941,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20942,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20943,"code":"void fillmass_hdx(void *pirate_overexpansion)\ntacitly_comboy(pirate_overexpansion);\nvoid tacitly_comboy(void *platinocyanide_titillating)\npoort_junr = ((char *)((char *)platinocyanide_titillating));\nif (strlen(poort_junr) > 0 &&\nstonesoup_num_files = strtoul(poort_junr,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20944,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20945,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20946,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *whitey_frosty)\nif (whitey_frosty != 0) {;\ntarahumari_mawson = ((void *)whitey_frosty);\nintemerateness_unorientalness[5] = tarahumari_mawson;\nunderbear_uranothallite =  *(intemerateness_unorientalness +  *foulminded_stammerwort);\nfutz_nett = ((char *)((char *)underbear_uranothallite));\nstonesoup_files = fopen(futz_nett,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nwhile(stonesoup_ssi < stonesoup_num_files){\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nif (stonesoup_contents == 0) {\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nif (((char *)underbear_uranothallite) != 0)\nfree(((char *)((char *)underbear_uranothallite)));\n \n","target":1}
{"idx":20947,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20948,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20949,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20950,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20951,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20952,"code":"struct malacologic_pileus multiuse_bullfrog;\nint prepackage_bombernickel = 13;\nchar *trapnested_agavose;\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nif (trapnested_agavose != 0) {;\nmultiuse_bullfrog . unpoignantly_pungle = ((char *)trapnested_agavose);\npilies_articles[ *( *barmkin_vanderbilt)] = multiuse_bullfrog;\nwoden_marissa = pilies_articles[ *( *barmkin_vanderbilt)];\nsaltman_octoploidy = ((char *)woden_marissa . unpoignantly_pungle);\nif (strlen(saltman_octoploidy) > 1 && saltman_octoploidy[0] == '-') {\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_stack_size = strtoul(saltman_octoploidy,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)woden_marissa . unpoignantly_pungle));\n \n","target":1}
{"idx":20953,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nstonesoup_setup_printf_context();\nunashamedly_gaiety = getenv(\"DRAINPIPES_SANIDINIC\");\nif (unashamedly_gaiety != 0) {;\nnymphly_daemons = ((char *)unashamedly_gaiety);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nunsigned char file_contents[1024];\nsize_t file_contents_size = 1024;\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nbreak;\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20954,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20955,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20956,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20957,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20958,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20959,"code":"void aristocratism_beyer(char **hyper_bewigs)\nreconfound_unsupplicating = ((char *)( *(hyper_bewigs - 5)));\nstonesoup_num_files = strtoul(reconfound_unsupplicating,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20960,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20961,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20962,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":20963,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20964,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":20965,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nfree(((char *)osteitis_christiansen));\n \n","target":0}
{"idx":20966,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nstonesoup_setup_printf_context();\nunashamedly_gaiety = getenv(\"DRAINPIPES_SANIDINIC\");\nif (unashamedly_gaiety != 0) {;\nnymphly_daemons = ((char *)unashamedly_gaiety);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nunsigned char file_contents[1024];\nsize_t file_contents_size = 1024;\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (1 != hash_update_result) {\nbreak;\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], nymphly_daemons);\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":1}
{"idx":20967,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20968,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20969,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":20970,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *persuader_wwi);\n \n","target":0}
{"idx":20971,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20972,"code":"unsigned int **stonesoup_buffer_array = 0;\nstruct eumitosis_eucaryote dimplier_war = {0};\nva_list ccip_badger;\n__builtin_va_start(ccip_badger,outpursued_hydrogalvanic);\ndimplier_war = (va_arg(ccip_badger,struct eumitosis_eucaryote ));\npsorospermic_unlanguidly = ((char *)dimplier_war . persymmetrical_unburnableness);\nstonesoup_num = atoi(psorospermic_unlanguidly);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":20973,"code":"struct eumitosis_eucaryote dimplier_war = {0};\nva_list ccip_badger;\n__builtin_va_start(ccip_badger,outpursued_hydrogalvanic);\ndimplier_war = (va_arg(ccip_badger,struct eumitosis_eucaryote ));\nfree(((char *)dimplier_war . persymmetrical_unburnableness));\n \n","target":0}
{"idx":20974,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20975,"code":"stonesoup_setup_printf_context();\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nif (stonesoup_tainted_file != 0) {\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nif (stonesoup_tainted_file != 0) {\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&foggiest_readopts,\"BUTTS_RADDLINGS\");\nmultitudinistic_misadressing . telakucha_roast = ((char *)foggiest_readopts);\nshakha_pact = ((char *)grapple_necessaries . telakucha_roast);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], shakha_pact);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":20976,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20977,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20978,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20979,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20980,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20981,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *attainableness_colostral);\nbut_predations . multivane_portmanmote = attainableness_colostral;\nantistrophon_sakkos = &but_predations;\ndefectiveness_methamphetamine = &antistrophon_sakkos;\nkremlinologist_thoroughnesses = &defectiveness_methamphetamine;\nbrussel_contemple = &kremlinologist_thoroughnesses;\nensigncies_trampoliner = &brussel_contemple;\nbigate_pycnidiospore = &ensigncies_trampoliner;\npazend_blackwash = &bigate_pycnidiospore;\nbuffon_resurrects = &pazend_blackwash;\noverborrows_cymophanous = &buffon_resurrects;\ncheatery_skimpier = &overborrows_cymophanous;\nmaghutte_rescramble(groundwood_interstriving,cheatery_skimpier);\nvoid maghutte_rescramble(int arachne_dendrobates,union exploitatively_caruncle **********erat_sips)\nmulberry_hydrotimeter = ((char *)( *( *( *( *( *( *( *( *( *( *erat_sips)))))))))) . multivane_portmanmote);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], mulberry_hydrotimeter);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":20982,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":20983,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20984,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20985,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20986,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20987,"code":"char *courteousness_ausable;\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&courteousness_ausable,\"BOMBASTICALLY_NONBULBAR\");\nahearn_gregariniform = ((char *)courteousness_ausable);\nstonesoup_stack_size = strtoul(ahearn_gregariniform,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)courteousness_ausable));\n \n","target":1}
{"idx":20988,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20989,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20990,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\ntracepoint(stonesoup_trace, trace_point, \"Returning 0\");\nreturn 0;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":20991,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20992,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":20993,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":20994,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":20995,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":20996,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":20997,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":20998,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":20999,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21000,"code":"moazami_prismatize = ((char *)( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *profeminism_landon)))))))))))))))))))))))))))))))))))))))))))))))))) . sonorific_tipula);\nif (strlen(moazami_prismatize) > 0 &&\nstonesoup_num_files = strtoul(moazami_prismatize,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21001,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21002,"code":"jesuate_undisjointed = ((char *)(malloc(urochromogen_hafted + 1)));\nmemset(jesuate_undisjointed,0,urochromogen_hafted + 1);\nmemcpy(jesuate_undisjointed,mallowwort_contraoctave,urochromogen_hafted);\nkrieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nchar *akhisar_accentuality(char *phantomland_ectocoelic)\n++stonesoup_global_variable;\nreturn phantomland_ectocoelic;\nkrieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nSAINTPAULIA_GHOSTLET(krieg_amberoid);\nvoid autozooid_assignable(char *nestler_soinski)\nfree(((char *)nestler_soinski));\n \n","target":0}
{"idx":21003,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21004,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21005,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21006,"code":"krieg_amberoid = akhisar_accentuality(jesuate_undisjointed);\nSAINTPAULIA_GHOSTLET(krieg_amberoid);\nvoid autozooid_assignable(char *nestler_soinski)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\nflickertail_ahush = ((char *)nestler_soinski);\nstonesoup_files = fopen(flickertail_ahush,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\n \n","target":0}
{"idx":21007,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21008,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21009,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&dinumeration_tammock,\"6917\",vers_cosmetologists);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21010,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21011,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21012,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nreveller_tmemata = ((char *)( *polygeny_ultraritualism) . syndicator_fulmicotton);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(reveller_tmemata,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nfclose(stonesoup_file);\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21013,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nreveller_tmemata = ((char *)( *polygeny_ultraritualism) . syndicator_fulmicotton);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(reveller_tmemata,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21014,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21015,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *gard_anorthitite);\nint plies_hiplines = 7;\nlizard_reticularly . wagework_withhie = gard_anorthitite;\nsanctologist_antilogs[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *tubik_rencountering)))))))))))))))))))))))))))))))))))))))))))))))))] = lizard_reticularly;\nbacony_outshoved = sanctologist_antilogs[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *tubik_rencountering)))))))))))))))))))))))))))))))))))))))))))))))))];\nfurrows_perceivableness(plies_hiplines,bacony_outshoved);\nvoid furrows_perceivableness(int masonic_alulim,union academus_chishima bancroft_numerosity)\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nfclose(stonesoup_files);\n \n","target":0}
{"idx":21016,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21017,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21018,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21019,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21020,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\njewhood_calciphilic = ((char *)bancroft_numerosity . wagework_withhie);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(jewhood_calciphilic,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21021,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *empressements_pallors);\nmegbote_stomatoda . catchie_aerosphere = empressements_pallors;\nsupportful_shelley(1,megbote_stomatoda);\nvoid supportful_shelley(int metheglin_toul,... )\nif (metheglin_toul > 0) {\nbirchen_acridines = (va_arg(monopolitical_irefully,union acephalus_piranhas ));\nundignify_carabin = ((char *)birchen_acridines . catchie_aerosphere);\nstonesoup_stack_size = strtoul(undignify_carabin,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\n \n","target":1}
{"idx":21022,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21023,"code":"union acephalus_piranhas birchen_acridines = {0};\nva_list monopolitical_irefully;\n__builtin_va_start(monopolitical_irefully,metheglin_toul);\nbirchen_acridines = (va_arg(monopolitical_irefully,union acephalus_piranhas ));\nfree(((char *)birchen_acridines . catchie_aerosphere));\n \n","target":0}
{"idx":21024,"code":"polycoccous_faineancy = ((char *)(malloc(intitules_pana + 1)));\nif (polycoccous_faineancy == 0) {\nmemset(polycoccous_faineancy,0,intitules_pana + 1);\nmemcpy(polycoccous_faineancy,enamine_antidepressants,intitules_pana);\nmethodically_dyspepsia = &polycoccous_faineancy;\nanalepses_exhortator = methodically_dyspepsia + 5;\nchifferobe_unphrasable(analepses_exhortator);\nvoid chifferobe_unphrasable(char **hakafoth_didi);\nmobilizable_exla(hakafoth_didi);\nvoid mobilizable_exla(char **adit_chaillot)\nlabrosaurus_electrolysation(adit_chaillot);\nvoid labrosaurus_electrolysation(char **tatty_lallands)\nindefatigably_ford(tatty_lallands);\nvoid indefatigably_ford(char **vulgarest_armrest)\naloins_unwinder(vulgarest_armrest);\nvoid aloins_unwinder(char **suiters_nonahydrate)\nprotobasidium_lauds = ((char *)( *(suiters_nonahydrate - 5)));\nstonesoup_stack_size = strtoul(protobasidium_lauds,0,0);\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)( *(suiters_nonahydrate - 5))));\n \n","target":1}
{"idx":21025,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *enamine_antidepressants)\nintitules_pana = ((int )(strlen(enamine_antidepressants)));\npolycoccous_faineancy = ((char *)(malloc(intitules_pana + 1)));\nmemset(polycoccous_faineancy,0,intitules_pana + 1);\nmemcpy(polycoccous_faineancy,enamine_antidepressants,intitules_pana);\nfree(((char *)enamine_antidepressants));\n \n","target":0}
{"idx":21026,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21027,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21028,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bechern_apogeal)\nif (bechern_apogeal != 0) {;\navarice_shankings = ((char *)bechern_apogeal);\nstonesoup_files = fopen(avarice_shankings,\"rb\");\nif (stonesoup_files != 0) {\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\nif (bechern_apogeal != 0)\nfree(((char *)bechern_apogeal));\n \n","target":1}
{"idx":21029,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21030,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21031,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":21032,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *hairpin_despouse)\nvoid (*neuroticize_heathenized)(char *) = superaffiuence_thanatophobe;\ndistractedness_specialising[ *( *( *( *( *( *( *( *( *( *interlotted_brahmi)))))))))] = hairpin_despouse;\nzackariah_cloners = distractedness_specialising[ *( *( *( *( *( *( *( *( *( *interlotted_brahmi)))))))))];\nneuroticize_heathenized(zackariah_cloners);\nvoid superaffiuence_thanatophobe(char *hawks_unproviding)\nsavors_waterford = ((char *)hawks_unproviding);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], savors_waterford);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\n \n","target":1}
{"idx":21033,"code":"int buffer_size = 1000;\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21034,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *halfwise_cucujid)\nif (halfwise_cucujid != 0) {;\nmontpellier_belauded . acutances_indifferent = halfwise_cucujid;\nunequitableness_prosopotocia[ *( *ansulate_carlin)] = montpellier_belauded;\nxui_protomartyr = unequitableness_prosopotocia[ *( *ansulate_carlin)];\ndeviants_buckishness = ((char *)xui_protomartyr . acutances_indifferent);\nstonesoup_files = fopen(deviants_buckishness,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (xui_protomartyr . acutances_indifferent != 0)\nfree(((char *)xui_protomartyr . acutances_indifferent));\n \n","target":1}
{"idx":21035,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *halfwise_cucujid)\nunion forklike_interscription montpellier_belauded;\nmontpellier_belauded . acutances_indifferent = halfwise_cucujid;\nunequitableness_prosopotocia[ *( *ansulate_carlin)] = montpellier_belauded;\nxui_protomartyr = unequitableness_prosopotocia[ *( *ansulate_carlin)];\nfree(((char *)xui_protomartyr . acutances_indifferent));\n \n","target":0}
{"idx":21036,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *seduced_gaeing)\npeed_smdr . paralyze_demoniacs = ((char *)seduced_gaeing);\ngurglingly_prongbuck(peed_smdr);\nvoid gurglingly_prongbuck(const struct thermoperiodic_carmela cavit_inoppressive)\nliquidogenous_hodoscope(promulgation_glumose,cavit_inoppressive);\nvoid liquidogenous_hodoscope(int pouffs_composite,struct thermoperiodic_carmela coruscative_adelea)\nsectionalism_nonsuit = ((char *)((struct thermoperiodic_carmela )coruscative_adelea) . paralyze_demoniacs);\nstonesoup_files = fopen(sectionalism_nonsuit,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nfree(((char *)((struct thermoperiodic_carmela )coruscative_adelea) . paralyze_demoniacs));\n \n","target":1}
{"idx":21037,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21038,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *prided_mackinaw);\nlensed_texline = ((void *)prided_mackinaw);\nnonlethally_lobelines = &lensed_texline;\ncoppin_vaishnavism(nonlethally_lobelines);\nvoid coppin_vaishnavism(void **onrushes_contextured)\ncuriosa_tuberculoses(onrushes_contextured);\nvoid curiosa_tuberculoses(void **murrains_sinologue)\nurbanest_nontreated(murrains_sinologue);\nvoid urbanest_nontreated(void **pseudofamously_saratoga)\nsingleness_bihari = ((char *)((char *)( *pseudofamously_saratoga)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], singleness_bihari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nfree(((char *)((char *)( *pseudofamously_saratoga))));\n \n","target":1}
{"idx":21039,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21040,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] == 0)\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21041,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21042,"code":"int pneumology_houndlike = 7;\nunion prereveal_philomel frigiferous_wawina = {0};\nva_list inocular_upclimb;\n__builtin_va_start(inocular_upclimb,tiresome_unadept);\nfrigiferous_wawina = (va_arg(inocular_upclimb,union prereveal_philomel ));\ndeletion_dour(pneumology_houndlike,frigiferous_wawina);\nvoid deletion_dour(int hardheads_mousses,union prereveal_philomel spires_narthecium)\ninternality_cylindroma = ((char *)spires_narthecium . beeson_joyous);\nstonesoup_num_files = strtoul(internality_cylindroma,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21043,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21044,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21045,"code":"if (mkdir(\"\/opt\/stonesoup\/workspace\/lockDir\",509U) == 0) {;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpNG1SdY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21046,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21047,"code":"int stonesoup_stack_size = 0;\nchar *reconstructing_uninsistently = 0;\ntracepoint(stonesoup_trace,trace_location,\"\/tmp\/tmpNG1SdY_ss_testcase\/src-rose\/src\/dfa.c\",\"dfamust\");\nstonesoup_read_taint(&forestish_metalware,\"3798\",survivancy_diphosphide);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\nif ((stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&forestish_metalware,\"3798\",survivancy_diphosphide);\nreconstructing_uninsistently = ((char *)forestish_metalware);\nstonesoup_stack_size = strtoul(reconstructing_uninsistently,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (forestish_metalware != 0)\nfree(((char *)forestish_metalware));\n \n","target":1}
{"idx":21048,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21049,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21050,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21051,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21052,"code":"archpresbyter_trilliums = getenv(\"GEMINIANI_IMMATCHLESS\");\nesdud_shipwrecks[17] = archpresbyter_trilliums;\nturbocharger_rabaul[5] = esdud_shipwrecks;\ntryst_sexily[1] = 5;\nrewhiten_cot =  *(turbocharger_rabaul + tryst_sexily[1]);\nintertissued_crocketing(singsong_lattimer,rewhiten_cot);\nvoid intertissued_crocketing(int difda_stiacciato,char **anabaptism_dekadrachm)\nunsigned int **stonesoup_buffer_array = 0;\nvernacularizing_anguishes = ((char *)anabaptism_dekadrachm[17]);\nstonesoup_num = atoi(vernacularizing_anguishes);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21053,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21054,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Malloc error due to ulimit\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21055,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21056,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21057,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21058,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21059,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21060,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21061,"code":"stonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21062,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *botts_marbling)\nif (botts_marbling != 0) {;\nthuluth_finagle[5] = botts_marbling;\nuncertificated_fellatrice = &thuluth_finagle;\nrumenocentesis_hinted = &uncertificated_fellatrice;\nhuge_boris = ((char *)( *( *rumenocentesis_hinted))[5]);\nif (( *( *rumenocentesis_hinted))[5] != 0)\nfree(((char *)( *( *rumenocentesis_hinted))[5]));\n \n","target":0}
{"idx":21063,"code":"huge_boris = ((char *)( *( *rumenocentesis_hinted))[5]);\nif (strlen(huge_boris) > 0 &&\nstonesoup_num_files = strtoul(huge_boris,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21064,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn f;\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21065,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *coessentialness_frosts)\nif (coessentialness_frosts != 0) {;\ndishwiping_polysomitic . pelides_pinnipedian = ((char *)coessentialness_frosts);\nshriekily_hummeler = &dishwiping_polysomitic;\nfixure_woodward = ((struct successfully_ungrotesque *)(((unsigned long )shriekily_hummeler) * railbus_caliver * railbus_caliver)) + 5;\napproach_deamidase = ((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian);\nstonesoup_files = fopen(approach_deamidase,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (( *(fixure_woodward - 5)) . pelides_pinnipedian != 0)\nfree(((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian));\n \n","target":1}
{"idx":21066,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21067,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21068,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21069,"code":"infectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nrecomplete_kumari = ((char *)( *( *sundays_lyra)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], recomplete_kumari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":1}
{"idx":21070,"code":"char *largeous_intraperiosteal;\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nchevrolet_hemokonia = ((int )(strlen(largeous_intraperiosteal)));\ninfectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nfree(((char *)largeous_intraperiosteal));\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":0}
{"idx":21071,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21072,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21073,"code":"char *largeous_intraperiosteal;\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nstonesoup_read_taint(&largeous_intraperiosteal,\"SEAT_MACRODOME\");\nchevrolet_hemokonia = ((int )(strlen(largeous_intraperiosteal)));\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nfree(((char *)largeous_intraperiosteal));\n \n","target":0}
{"idx":21074,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *pervades_guardian)\nif (pervades_guardian != 0) {;\nginsberg_venosities = 1;\nsavers_adelheid = &pervades_guardian;\nnapping_evergood = ((char **)(((unsigned long )savers_adelheid) * ginsberg_venosities * ginsberg_venosities)) + 5;\neliminates_slipperyroot = ((char *)( *(napping_evergood - 5)));\nstonesoup_stack_size = strtoul(eliminates_slipperyroot,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif ( *(napping_evergood - 5) != 0)\nfree(((char *)( *(napping_evergood - 5))));\n \n","target":1}
{"idx":21075,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21076,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21077,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21078,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21079,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21080,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21081,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21082,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nendoconidia_overfatigue = ((char *)buhlworks_toilettes . cursedest_nonexuding);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(endoconidia_overfatigue,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21083,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nendoconidia_overfatigue = ((char *)buhlworks_toilettes . cursedest_nonexuding);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(endoconidia_overfatigue,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21084,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\n \n","target":0}
{"idx":21085,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21086,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21087,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21088,"code":"int abietene_deathsman = 7;\nstonesoup_read_taint(&ketoses_rosabella,\"5697\",yeomanly_neighborship);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nfor (stonesoup_s = stonesoup_shm; *stonesoup_s != (char)0; stonesoup_s++) {\n(*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm] = *stonesoup_s;\nstonesoup_read_taint(&ketoses_rosabella,\"5697\",yeomanly_neighborship);\ncrusta_chamaesaura = lett_scurvier(ketoses_rosabella);\nchar *lett_scurvier(char *phenix_gyrometer)\nreturn phenix_gyrometer;\ncrusta_chamaesaura = lett_scurvier(ketoses_rosabella);\nexocone_nonpejorative(abietene_deathsman,crusta_chamaesaura);\nvoid exocone_nonpejorative(int unblacked_occamistic,char *drumfire_product)\nunsigned int **stonesoup_buffer_array = 0;\nophthalmometer_spulyie = ((char *)drumfire_product);\nstonesoup_num = atoi(ophthalmometer_spulyie);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21089,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21090,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21091,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error: Failed to allocate memory\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21092,"code":"solipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfree(stonesoup_filearray);\nif (heterotopous_berrendo != 0)\nfree(((char *)heterotopous_berrendo));\n \n","target":0}
{"idx":21093,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21094,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nfree(((char *)heterotopous_berrendo));\n \n","target":0}
{"idx":21095,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21096,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21097,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21098,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nfor (stonesoup_str_list_index = 0; stonesoup_str_list_index < stonesoup_num_files; ++stonesoup_str_list_index)\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21099,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21100,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\n \n","target":0}
{"idx":21101,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21102,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21103,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21104,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\n__builtin_va_start(triggered_stomachic,doit_dayton);\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21105,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21106,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_printf(char * format, ...) {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21107,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21108,"code":"struct usna_diabantite temulency_counterbalances;\nchar *signature_antehistoric;\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&signature_antehistoric,\"OCTOTHORP_STOMPS\");\ntemulency_counterbalances . dreadly_flowmeter = ((char *)signature_antehistoric);\nincubous_cebus[5] = temulency_counterbalances;\nreeked_lucretius[1] = 5;\nvax_popes =  *(incubous_cebus + reeked_lucretius[1]);\nindan_blouson = ((char *)vax_popes . dreadly_flowmeter);\nstonesoup_stack_size = strtoul(indan_blouson,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)vax_popes . dreadly_flowmeter));\n \n","target":1}
{"idx":21109,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21110,"code":"fennici_nontribesmen = ((char *)(malloc(fibrilations_hydetown + 1)));\nmemset(fennici_nontribesmen,0,fibrilations_hydetown + 1);\nmemcpy(fennici_nontribesmen,bosone_irvingism,fibrilations_hydetown);\nontine_transjordanian[5] = fennici_nontribesmen;\nsockeroos_seamlet =  *(ontine_transjordanian +  *jud_unnonsensical);\ngaudish_mcveigh(sockeroos_seamlet);\nvoid gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nolive_gotchy = ((char *)chalybean_idumaean);\nstonesoup_num_files = strtoul(olive_gotchy,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nif (chalybean_idumaean != 0)\nfree(((char *)chalybean_idumaean));\n \n","target":1}
{"idx":21111,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bosone_irvingism)\nif (bosone_irvingism != 0) {;\nfibrilations_hydetown = ((int )(strlen(bosone_irvingism)));\nif (bosone_irvingism != 0)\nfree(((char *)bosone_irvingism));\n \n","target":0}
{"idx":21112,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21113,"code":"fennici_nontribesmen = ((char *)(malloc(fibrilations_hydetown + 1)));\nmemset(fennici_nontribesmen,0,fibrilations_hydetown + 1);\nmemcpy(fennici_nontribesmen,bosone_irvingism,fibrilations_hydetown);\nontine_transjordanian[5] = fennici_nontribesmen;\nunnarcotic_razormaker = 5;\njud_unnonsensical = &unnarcotic_razormaker;\nsockeroos_seamlet =  *(ontine_transjordanian +  *jud_unnonsensical);\ngaudish_mcveigh(sockeroos_seamlet);\nvoid gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nfree(((char *)chalybean_idumaean));\n \n","target":0}
{"idx":21114,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21115,"code":"void gaudish_mcveigh(char *mattson_overtarry)\ndetonate_collaborated(mattson_overtarry);\nvoid detonate_collaborated(char *chalybean_idumaean)\nolive_gotchy = ((char *)chalybean_idumaean);\nif (strlen(olive_gotchy) > 0 &&\nstonesoup_num_files = strtoul(olive_gotchy,0,16);\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21116,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21117,"code":"struct transliterates_hornier reconciliator_uncarnivorously;\nint rocketed_aficionados = 13;\nchar *hypohemia_ligon;;\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nreconciliator_uncarnivorously . disuniform_technetronic = ((char *)hypohemia_ligon);\napiarian_kingmaking[5] = reconciliator_uncarnivorously;\nplanarida_unporousness = 5;\noutdrive_nonclergyable = &planarida_unporousness;\nbollocks_winner =  *(apiarian_kingmaking +  *outdrive_nonclergyable);\nelida_camponotus = ((char *)bollocks_winner . disuniform_technetronic);\nstonesoup_stack_size = strtoul(elida_camponotus,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nfree(((char *)bollocks_winner . disuniform_technetronic));\n \n","target":1}
{"idx":21118,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21119,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21120,"code":"filepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\n \n","target":0}
{"idx":21121,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21122,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21123,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21124,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21125,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21126,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21127,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21128,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21129,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21130,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21131,"code":"char *requisiteness_convictable;\nstonesoup_read_taint(&requisiteness_convictable,\"6460\",hyla_nonvariable);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&requisiteness_convictable,\"6460\",hyla_nonvariable);\nif (requisiteness_convictable != 0) {;\nfrightened_afterproof = overvehement_tenture(requisiteness_convictable);\nklendusive_ungrasped(frightened_afterproof);\nvoid klendusive_ungrasped(char *donet_cuishes)\nmysophilia_chazzens(donet_cuishes);\nvoid mysophilia_chazzens(char *willernie_bestriding)\novermalapert_coerects = ((char *)willernie_bestriding);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], overmalapert_coerects);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], overmalapert_coerects);\nfree(((char *)willernie_bestriding));\n \n","target":1}
{"idx":21132,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21133,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21134,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21135,"code":"int aymoro_hasteless = 61;\nchar *sloths_porphyrized;\nstonesoup_read_taint(&sloths_porphyrized,\"1385\",aymoro_hasteless);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&sloths_porphyrized,\"1385\",aymoro_hasteless);\nlits_aortomalaxis[5] = sloths_porphyrized;\nrufflers_overcomplicates[1] = 5;\nmvy_anticomment =  *(lits_aortomalaxis + rufflers_overcomplicates[1]);\nnewscasting_countdom = ((char *)mvy_anticomment);\nstonesoup_files = fopen(newscasting_countdom,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)mvy_anticomment));\n \n","target":1}
{"idx":21136,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21137,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21138,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21139,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&hypohemia_ligon,\"1910\",rocketed_aficionados);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21140,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21141,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21142,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21143,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21144,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nscriggly_accomplishment = getenv(\"NONCONTRASTIVE_HEARTLESS\");\nundeterminedly_entelluses[5] = scriggly_accomplishment;\nbelonephobia_wainwrights = 5;\nbreed_virile = &belonephobia_wainwrights;\nlavender_necrotizing =  *(undeterminedly_entelluses +  *breed_virile);\ndermaptera_unexcursive = ((char *)lavender_necrotizing);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(dermaptera_unexcursive,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21145,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21146,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *halfwise_cucujid)\nif (halfwise_cucujid != 0) {;\nmontpellier_belauded . acutances_indifferent = halfwise_cucujid;\nunequitableness_prosopotocia[ *( *ansulate_carlin)] = montpellier_belauded;\nxui_protomartyr = unequitableness_prosopotocia[ *( *ansulate_carlin)];\ndeviants_buckishness = ((char *)xui_protomartyr . acutances_indifferent);\nstonesoup_files = fopen(deviants_buckishness,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nif (stonesoup_file == 0 && errno == 24) {\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (xui_protomartyr . acutances_indifferent != 0)\nfree(((char *)xui_protomartyr . acutances_indifferent));\n \n","target":1}
{"idx":21147,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *mrem_bumfuzzle)\noverthickness_clodded . usuals_decaspermous = ((char *)mrem_bumfuzzle);\nalsine_fleers = gobos_isotria(overthickness_clodded);\nif (alsine_fleers . usuals_decaspermous != 0)\nfree(((char *)alsine_fleers . usuals_decaspermous));\n \n","target":0}
{"idx":21148,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21149,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21150,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21151,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21152,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21153,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21154,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21155,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21156,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21157,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21158,"code":"char *furazane_recalesced;\nstonesoup_read_taint(&furazane_recalesced,\"TROUBLESOMELY_CONSUMMATORY\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n(*stonesoup_tainted_buff)[stonesoup_lsize] = '\\0';\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&furazane_recalesced,\"TROUBLESOMELY_CONSUMMATORY\");\nmagnetogram_testudinous = ((void *)furazane_recalesced);\nsalame_foamflower = &magnetogram_testudinous;\ndendrobates_elite = salame_foamflower + 5;\noverpolice_manyberry = ((char *)((char *)( *(dendrobates_elite - 5))));\nstonesoup_stack_size = strtoul(overpolice_manyberry,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (((char *)( *(dendrobates_elite - 5))) != 0)\nfree(((char *)((char *)( *(dendrobates_elite - 5)))));\n \n","target":1}
{"idx":21159,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21160,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21161,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21162,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21163,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21164,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21165,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21166,"code":"infectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nrecomplete_kumari = ((char *)( *( *sundays_lyra)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], recomplete_kumari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":1}
{"idx":21167,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21168,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21169,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21170,"code":"int enisle_scarfskin = 45;\nchar *sagittarii_resubmits;;\nstonesoup_read_taint(&sagittarii_resubmits,\"6655\",enisle_scarfskin);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&sagittarii_resubmits,\"6655\",enisle_scarfskin);\nmilker_aphanes = ((int )(strlen(sagittarii_resubmits)));\nmemcpy(bauxitic_levantine,sagittarii_resubmits,milker_aphanes);\nfree(((char *)sagittarii_resubmits));\n \n","target":0}
{"idx":21171,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21172,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21173,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21174,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21175,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21176,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21177,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21178,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21179,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21180,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21181,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21182,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21183,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21184,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21185,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21186,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21187,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21188,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21189,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21190,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21191,"code":"int yikirgaulit_philepittidae = 7;\nchar *triplicating_priestless;;\nstonesoup_read_taint(&triplicating_priestless,\"6483\",yikirgaulit_philepittidae);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&triplicating_priestless,\"6483\",yikirgaulit_philepittidae);\nmineralizing_microfilaria = &triplicating_priestless;\ndunarea_spiraeaceae = mineralizing_microfilaria + 5;\nfree(((char *)( *(dunarea_spiraeaceae - 5))));\n \n","target":0}
{"idx":21192,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21193,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21194,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21195,"code":"char *umbrere_bielbrief;;\nstonesoup_read_taint(&umbrere_bielbrief,\"BIOS_ASCOTS\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&umbrere_bielbrief,\"BIOS_ASCOTS\");\nsynonymise_fullfaces[55] = umbrere_bielbrief;\npiculule_kalman = laundress_premeditatingly(synonymise_fullfaces);\nchar **laundress_premeditatingly(char **souldie_mallanders)\nreturn souldie_mallanders;\npiculule_kalman = laundress_premeditatingly(synonymise_fullfaces);\nfree(((char *)piculule_kalman[55]));\n \n","target":0}
{"idx":21196,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21197,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21198,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21199,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21200,"code":"void vulcanisation_grygla(int excantation_treroninae,void *diffugient_floccosely)\nnoncorporative_whereat = ((char *)((char *)diffugient_floccosely));\nstonesoup_files = fopen(noncorporative_whereat,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nstonesoup_ssi++;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\n \n","target":1}
{"idx":21201,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21202,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21203,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21204,"code":"size_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21205,"code":"char *ramulose_petunia;\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n(*stonesoup_tainted_buff)[stonesoup_lsize] = '\\0';\nif (stonesoup_tainted_file != 0) {\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nBEREAVEMENT_INKING(ramulose_petunia);\nvoid conlen_karlotte(char *hurtled_nakuru)\npoetiser_woodjobber = ((char *)hurtled_nakuru);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nfree(((char *)hurtled_nakuru));\n \n","target":1}
{"idx":21206,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21207,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21208,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21209,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nstibnite_moistness tatler_diplarthrism = 0;\nva_list triggered_stomachic;\ntatler_diplarthrism = (va_arg(triggered_stomachic,stibnite_moistness ));\ntalca_snubbishness = ((char *)tatler_diplarthrism);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(talca_snubbishness,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21210,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21211,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21212,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21213,"code":"int favellidium_apodeictical = 45;\nchar *zeuxian_skinful;\nstonesoup_read_taint(&zeuxian_skinful,\"5074\",favellidium_apodeictical);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&zeuxian_skinful,\"5074\",favellidium_apodeictical);\nfree(((char *)zeuxian_skinful));\n \n","target":0}
{"idx":21214,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":21215,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21216,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21217,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21218,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21219,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21220,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21221,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21222,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21223,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21224,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21225,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21226,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21227,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21228,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21229,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21230,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21231,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21232,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21233,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21234,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21235,"code":"c = split(arg[i],\"=\",&n);\nnorm_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfile_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndir_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nif (strcasecmp(\"target\",c[1]) == 0) {\nlink_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfifo_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ndoor_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nblock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nchar_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\norphan_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsock_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsuid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsgid_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nstickyow_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\notherwr_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nsticky_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nexec_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nmissing_flgs = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nleftcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nrightcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nendcode = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\ne -> ext = strcpy((xmalloc(strlen((c[0] + 1)) + 1)),(c[0] + 1));\ne -> term_flg = strcpy((xmalloc(strlen(c[1]) + 1)),c[1]);\nfree(c);\n \n","target":0}
{"idx":21236,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21237,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21238,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21239,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21240,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21241,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21242,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21243,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21244,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21245,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21246,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21247,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nvoid *mesotaeniaceae_wrongdoer = 0;\nandreaeales_myeloblastic(&mesotaeniaceae_wrongdoer);\nmaldistribute_conglomerator = ((char *)((char *)mesotaeniaceae_wrongdoer));\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(maldistribute_conglomerator,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21248,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21249,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21250,"code":"char *ramulose_petunia;\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n(*stonesoup_tainted_buff)[stonesoup_lsize] = '\\0';\nif (stonesoup_tainted_file != 0) {\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nBEREAVEMENT_INKING(ramulose_petunia);\nvoid conlen_karlotte(char *hurtled_nakuru)\npoetiser_woodjobber = ((char *)hurtled_nakuru);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nfree(((char *)hurtled_nakuru));\n \n","target":1}
{"idx":21251,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21252,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21253,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21254,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21255,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21256,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\nantiterrorist_unuseful logomachy_fisheater = 0;\nscheld_danas(&logomachy_fisheater);\nbulbomedullary_emmit = &logomachy_fisheater;\ngastroepiploic_airphobia = bulbomedullary_emmit + 5;\nstoopball_semisilica = ((char *)( *(gastroepiploic_airphobia - 5)));\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(stoopball_semisilica,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21257,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21258,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21259,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21260,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21261,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21262,"code":"char *clausthalite_ambaris;;\nstonesoup_read_taint(&clausthalite_ambaris,\"AZERBAIJANIAN_UNEXPECTINGLY\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&clausthalite_ambaris,\"AZERBAIJANIAN_UNEXPECTINGLY\");\nplagiocephaly_frownful[ *( *malonylurea_tidioute)] = clausthalite_ambaris;\nuntempting_nor = plagiocephaly_frownful[ *( *malonylurea_tidioute)];\ntyrannisingly_piscaries = ((char *)untempting_nor);\nstonesoup_files = fopen(tyrannisingly_piscaries,\"r\");\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)untempting_nor));\n \n","target":1}
{"idx":21263,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21264,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21265,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21266,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21267,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21268,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21269,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21270,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21271,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21272,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21273,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21274,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21275,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21276,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21277,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21278,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21279,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21280,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21281,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21282,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21283,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21284,"code":"int mashgiach_unappliqued = 5;\nchar *wagnerite_jaggier;;\nstonesoup_read_taint(&wagnerite_jaggier,\"3012\",mashgiach_unappliqued);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&wagnerite_jaggier,\"3012\",mashgiach_unappliqued);\nkodakry_flavius[47] = wagnerite_jaggier;\nmariposa_homeoplastic[ *somnambulists_dezhnev] = kodakry_flavius;\npraepubis_dorcy = mariposa_homeoplastic[ *somnambulists_dezhnev];\nfree(((char *)praepubis_dorcy[47]));\n \n","target":0}
{"idx":21285,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21286,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21287,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21288,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21289,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21290,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21291,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21292,"code":"lasmarias_interess = getenv(\"CALIPERED_WOLVERINE\");\nsaffronwood_hardfist = ((int )(strlen(lasmarias_interess)));\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\nunsigned int **stonesoup_buffer_array = 0;\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21293,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21294,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21295,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21296,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21297,"code":"snarled_untrespassing = ((char *)(malloc(abodah_restandardize + 1)));\nmemset(snarled_untrespassing,0,abodah_restandardize + 1);\nmemcpy(snarled_untrespassing,hystericus_giraffoid,abodah_restandardize);\ncannot_disquisiting(1,snarled_untrespassing);\nvoid cannot_disquisiting(int turkman_commemorable,... );\n__builtin_va_start(writhed_paralogician,turkman_commemorable);\nconfectioner_frowned = (va_arg(writhed_paralogician,char *));\nvizircraft_brinier(confectioner_frowned);\nvoid vizircraft_brinier(char *scalx_scab)\nholiday_alehouse(scalx_scab);\nvoid holiday_alehouse(char *empusae_overventilate)\npreaccepted_speckfall = ((char *)empusae_overventilate);\nstonesoup_stack_size = strtoul(preaccepted_speckfall,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (empusae_overventilate != 0)\nfree(((char *)empusae_overventilate));\n \n","target":1}
{"idx":21298,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21299,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21300,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *coessentialness_frosts)\nif (coessentialness_frosts != 0) {;\ndishwiping_polysomitic . pelides_pinnipedian = ((char *)coessentialness_frosts);\nshriekily_hummeler = &dishwiping_polysomitic;\nfixure_woodward = ((struct successfully_ungrotesque *)(((unsigned long )shriekily_hummeler) * railbus_caliver * railbus_caliver)) + 5;\napproach_deamidase = ((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian);\nstonesoup_files = fopen(approach_deamidase,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\nif (( *(fixure_woodward - 5)) . pelides_pinnipedian != 0)\nfree(((char *)( *(fixure_woodward - 5)) . pelides_pinnipedian));\n \n","target":1}
{"idx":21301,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *gascromh_adversus)\npredisputant_barrigudos = gascromh_adversus;\nmum_ferretto = &predisputant_barrigudos;\nsparoid_unwelded = mum_ferretto + 5;\nfree(((char *)( *(sparoid_unwelded - 5))));\n \n","target":0}
{"idx":21302,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21303,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21304,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21305,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21306,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *unconcluded_timothea)\nunforgivable_abiotical . oratorios_supposer = unconcluded_timothea;\nfelsophyre_penates = &unforgivable_abiotical;\nrsl_archduchies = felsophyre_penates + 5;\nfree(((char *)( *(rsl_archduchies - 5)) . oratorios_supposer));\n \n","target":0}
{"idx":21307,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21308,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21309,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21310,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21311,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21312,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21313,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21314,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21315,"code":"infectious_clitorises = ((char *)(malloc(chevrolet_hemokonia + 1)));\nmemset(infectious_clitorises,0,chevrolet_hemokonia + 1);\nmemcpy(infectious_clitorises,largeous_intraperiosteal,chevrolet_hemokonia);\nroann_homaged = &infectious_clitorises;\nsundays_lyra = &roann_homaged;\nrecomplete_kumari = ((char *)( *( *sundays_lyra)));\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], recomplete_kumari);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nif ( *( *sundays_lyra) != 0)\nfree(((char *)( *( *sundays_lyra))));\n \n","target":1}
{"idx":21316,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21317,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21318,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21319,"code":"int aymoro_hasteless = 61;\nchar *sloths_porphyrized;\nstonesoup_read_taint(&sloths_porphyrized,\"1385\",aymoro_hasteless);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&sloths_porphyrized,\"1385\",aymoro_hasteless);\nlits_aortomalaxis[5] = sloths_porphyrized;\nrufflers_overcomplicates[1] = 5;\nmvy_anticomment =  *(lits_aortomalaxis + rufflers_overcomplicates[1]);\nnewscasting_countdom = ((char *)mvy_anticomment);\nstonesoup_files = fopen(newscasting_countdom,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)mvy_anticomment));\n \n","target":1}
{"idx":21320,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21321,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21322,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21323,"code":"archpresbyter_trilliums = getenv(\"GEMINIANI_IMMATCHLESS\");\nesdud_shipwrecks[17] = archpresbyter_trilliums;\nturbocharger_rabaul[5] = esdud_shipwrecks;\ntryst_sexily[1] = 5;\nrewhiten_cot =  *(turbocharger_rabaul + tryst_sexily[1]);\nintertissued_crocketing(singsong_lattimer,rewhiten_cot);\nvoid intertissued_crocketing(int difda_stiacciato,char **anabaptism_dekadrachm)\nunsigned int **stonesoup_buffer_array = 0;\nvernacularizing_anguishes = ((char *)anabaptism_dekadrachm[17]);\nstonesoup_num = atoi(vernacularizing_anguishes);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21324,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21325,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21326,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21327,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21328,"code":"char *eadass_birt;\nstonesoup_read_taint(&eadass_birt,\"PAYNIZE_UNGLORIFIED\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&eadass_birt,\"PAYNIZE_UNGLORIFIED\");\npseudogalena_phenoplast = ((int )(strlen(eadass_birt)));\ninternational_liberatrice = ((char *)(malloc(pseudogalena_phenoplast + 1)));\nmemset(international_liberatrice,0,pseudogalena_phenoplast + 1);\nmemcpy(international_liberatrice,eadass_birt,pseudogalena_phenoplast);\nif (eadass_birt != 0)\nfree(((char *)eadass_birt));\nfrostbitten_supersystems = &international_liberatrice;\npolyoma_misconstruct = frostbitten_supersystems + 5;\nfree(((char *)( *(polyoma_misconstruct - 5))));\n \n","target":0}
{"idx":21329,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21330,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21331,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21332,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21333,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21334,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21335,"code":"archpresbyter_trilliums = getenv(\"GEMINIANI_IMMATCHLESS\");\nesdud_shipwrecks[17] = archpresbyter_trilliums;\nturbocharger_rabaul[5] = esdud_shipwrecks;\ntryst_sexily[1] = 5;\nrewhiten_cot =  *(turbocharger_rabaul + tryst_sexily[1]);\nintertissued_crocketing(singsong_lattimer,rewhiten_cot);\nvoid intertissued_crocketing(int difda_stiacciato,char **anabaptism_dekadrachm)\nunsigned int **stonesoup_buffer_array = 0;\nvernacularizing_anguishes = ((char *)anabaptism_dekadrachm[17]);\nstonesoup_num = atoi(vernacularizing_anguishes);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21336,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21337,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21338,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *ags_hichens)\novernumerously_aulostomus[31] = ags_hichens;\nairville_localises = overnumerously_aulostomus;\nshields_stevinson = ((char **)(((unsigned long )airville_localises) * clayen_fei * clayen_fei)) + 5;\nif ((shields_stevinson - 5)[31] != 0)\nfree(((char *)(shields_stevinson - 5)[31]));\n \n","target":0}
{"idx":21339,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21340,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21341,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21342,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21343,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bergaptene_prehensor)\ncaprioled_piffling = ((int )(strlen(bergaptene_prehensor)));\nmemcpy(pseudofinal_undaringly,bergaptene_prehensor,caprioled_piffling);\nfree(((char *)bergaptene_prehensor));\n \n","target":0}
{"idx":21344,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21345,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *bergaptene_prehensor)\ncaprioled_piffling = ((int )(strlen(bergaptene_prehensor)));\npseudofinal_undaringly = ((char *)(malloc(caprioled_piffling + 1)));\nmemset(pseudofinal_undaringly,0,caprioled_piffling + 1);\nmemcpy(pseudofinal_undaringly,bergaptene_prehensor,caprioled_piffling);\nfree(((char *)bergaptene_prehensor));\npronymphal_trilinear[5] = pseudofinal_undaringly;\ntrichode_somatosensory[1] = 5;\napproof_reaccompanying =  *(pronymphal_trilinear + trichode_somatosensory[1]);\nBENEFICIARIES_CHORIORETINITIS(approof_reaccompanying);\nvoid defeasanced_proagrarian(char *untiled_ketoses)\nfree(((char *)untiled_ketoses));\n \n","target":0}
{"idx":21346,"code":"lutetiums_varooms = ((char *)(malloc(corylaceous_rearrested + 1)));\nmemset(lutetiums_varooms,0,corylaceous_rearrested + 1);\nmemcpy(lutetiums_varooms,jtm_dadupanthi,corylaceous_rearrested);\ntwint_hagiographist = &lutetiums_varooms;\nquarryville_ellie = ((char **)(((unsigned long )twint_hagiographist) * kula_naringenin * kula_naringenin)) + 5;\nromaean_goosing(ectrosyndactyly_adustive,quarryville_ellie);\nvoid romaean_goosing(int passel_containments,char **tiarella_phoenixes);\nappay_merycoidodon = ((char *)( *(tiarella_phoenixes - 5)));\nstonesoup_files = fopen(appay_merycoidodon,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nif ( *(tiarella_phoenixes - 5) != 0)\nfree(((char *)( *(tiarella_phoenixes - 5))));\n \n","target":1}
{"idx":21347,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21348,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21349,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21350,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21351,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21352,"code":"char *kugelhof_lamebrain;\nstonesoup_read_taint(&kugelhof_lamebrain,\"UNDOUBTEDLY_WOEWORN\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&kugelhof_lamebrain,\"UNDOUBTEDLY_WOEWORN\");\npredescend_breedbate = ((int )(strlen(kugelhof_lamebrain)));\nmemcpy(balestra_lwl,kugelhof_lamebrain,predescend_breedbate);\nfree(((char *)kugelhof_lamebrain));\n \n","target":0}
{"idx":21353,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21354,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21355,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21356,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21357,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21358,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21359,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21360,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21361,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21362,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21363,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21364,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21365,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21366,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21367,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21368,"code":"char *ramulose_petunia;\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_env_var_name) {\nstonesoup_tainted_file_name = getenv(stonesoup_env_var_name);\nstonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\"rb\");\nfseek(stonesoup_tainted_file,0L,2);\nstonesoup_lsize = ftell(stonesoup_tainted_file);\nrewind(stonesoup_tainted_file);\n*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));\nstonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);\n(*stonesoup_tainted_buff)[stonesoup_lsize] = '\\0';\nif (stonesoup_tainted_file != 0) {\nfclose(stonesoup_tainted_file);\nstonesoup_read_taint(&ramulose_petunia,\"ROMANO_ALGAROTH\");\nBEREAVEMENT_INKING(ramulose_petunia);\nvoid conlen_karlotte(char *hurtled_nakuru)\npoetiser_woodjobber = ((char *)hurtled_nakuru);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nvoid stonesoup_evp_hash(const char *algorithm_name,char *filename) {\nfile_stream = fopen(filename,\"rb\");\nif (file_stream != 0) {\nwhile(!feof(file_stream)) {\nmemset(file_contents,0,file_contents_size);\nfile_contents_size_read = fread(file_contents,sizeof(unsigned char ),file_contents_size,file_stream);\nhash_update_result = EVP_DigestUpdate(md_context,file_contents,file_contents_size_read);\nif (file_stream != 0) {\nfclose(file_stream);\nstonesoup_evp_hash(stonesoup_algorithms[stonesoup_jj], poetiser_woodjobber);\nfree(((char *)hurtled_nakuru));\n \n","target":1}
{"idx":21369,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *democratizing_whampee)\nbidarka_tenebrific[30] = democratizing_whampee;\ncronyisms_fiddlesticks = bidarka_tenebrific;\nfree(((char *)cronyisms_fiddlesticks[30]));\n \n","target":0}
{"idx":21370,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21371,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21372,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21373,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21374,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21375,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21376,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *quamashes_lehua)\neructated_tutorship = ((void *)quamashes_lehua);\nbotargo_zoila[5] = eructated_tutorship;\nkhass_barrabkie[1] = 5;\nleontyne_beamy =  *(botargo_zoila + khass_barrabkie[1]);\nfree(((char *)((char *)leontyne_beamy)));\n \n","target":0}
{"idx":21377,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21378,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21379,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21380,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21381,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21382,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *edi_synchronic)\nif (edi_synchronic != 0) {;\nmenarcheal_khalifs = ((char *)edi_synchronic);\nstonesoup_stack_size = strtoul(menarcheal_khalifs,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (edi_synchronic != 0)\nfree(((char *)edi_synchronic));\n \n","target":1}
{"idx":21383,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *edi_synchronic)\nfree(((char *)edi_synchronic));\n \n","target":0}
{"idx":21384,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21385,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21386,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21387,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21388,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21389,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21390,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21391,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21392,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *companionable_verdun)\nviridite_ambrein = ((int )(strlen(companionable_verdun)));\nkaempferol_dingus = ((char *)(malloc(viridite_ambrein + 1)));\nmemset(kaempferol_dingus,0,viridite_ambrein + 1);\nmemcpy(kaempferol_dingus,companionable_verdun,viridite_ambrein);\nif (companionable_verdun != 0)\nfree(((char *)companionable_verdun));\noverwrestle_prayingly = &kaempferol_dingus;\nwarytree_pong = overwrestle_prayingly + 5;\nfree(((char *)( *(warytree_pong - 5))));\n \n","target":0}
{"idx":21393,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *companionable_verdun)\nviridite_ambrein = ((int )(strlen(companionable_verdun)));\nmemcpy(kaempferol_dingus,companionable_verdun,viridite_ambrein);\nfree(((char *)companionable_verdun));\n \n","target":0}
{"idx":21394,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21395,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21396,"code":"topotypic_delavan goodsire_endoderm = 0;\nsettles_submarinist(&goodsire_endoderm);\nunderratement_stylidium[5] = goodsire_endoderm;\nkaingangs_sacramentarian[1] = 5;\nstormtight_hapteron =  *(underratement_stylidium + kaingangs_sacramentarian[1]);\nsortable_herreid = ((char *)stormtight_hapteron);\nstonesoup_files = fopen(sortable_herreid,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\n \n","target":1}
{"idx":21397,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21398,"code":"topotypic_delavan goodsire_endoderm = 0;\nsettles_submarinist(&goodsire_endoderm);\nunderratement_stylidium[5] = goodsire_endoderm;\nkaingangs_sacramentarian[1] = 5;\nstormtight_hapteron =  *(underratement_stylidium + kaingangs_sacramentarian[1]);\nsortable_herreid = ((char *)stormtight_hapteron);\nstonesoup_files = fopen(sortable_herreid,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nif (stonesoup_files != 0)\nfclose(stonesoup_files);\n \n","target":1}
{"idx":21399,"code":"int buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nfree(stonesoup_tainted_buff);\n \n","target":0}
{"idx":21400,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21401,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21402,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21403,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21404,"code":"stonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nif (data_size < buffer_size) {\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *deciphered_bitser)\nif (deciphered_bitser != 0) {;\nveilmaker_vermouths[91] = deciphered_bitser;\nfaithwise_striations = &veilmaker_vermouths;\nmadecase_botanically = ((char *)( *faithwise_striations)[91]);\nstonesoup_stack_size = strtoul(madecase_botanically,0,0);\ntracepoint(stonesoup_trace, variable_signed_integral, \"stonesoup_stack_size\", stonesoup_stack_size, &stonesoup_stack_size, \"TRIGGER-STATE\");\nchar stonesoup_stack_string[stonesoup_stack_size];\nmemset(stonesoup_stack_string,'x',stonesoup_stack_size - 1);\nif (( *faithwise_striations)[91] != 0)\nfree(((char *)( *faithwise_striations)[91]));\n \n","target":1}
{"idx":21405,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21406,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21407,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21408,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21409,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21410,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21411,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21412,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21413,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21414,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21415,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21416,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21417,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *dictatorialism_sphagnales)\nnaveness_cerusites = ((int )(strlen(dictatorialism_sphagnales)));\ngastroepiploic_dynametric = ((char *)(malloc(naveness_cerusites + 1)));\nmemset(gastroepiploic_dynametric,0,naveness_cerusites + 1);\nmemcpy(gastroepiploic_dynametric,dictatorialism_sphagnales,naveness_cerusites);\nif (dictatorialism_sphagnales != 0)\nfree(((char *)dictatorialism_sphagnales));\nphosphoresce_hubie = &gastroepiploic_dynametric;\nnaveness_cerusites = ((int )(strlen(dictatorialism_sphagnales)));\nfree(((char *)( *phosphoresce_hubie)));\n \n","target":0}
{"idx":21418,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21419,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21420,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21421,"code":"int contently_barotse = 13;\nchar *jeapordizes_epicranius;\nstonesoup_read_taint(&jeapordizes_epicranius,\"6612\",contently_barotse);\nfree(((char *)jeapordizes_epicranius));\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&jeapordizes_epicranius,\"6612\",contently_barotse);\nfree(((char *)jeapordizes_epicranius));\n \n","target":0}
{"idx":21422,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21423,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21424,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21425,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21426,"code":"char* stonesoup_tainted_buff;\nint buffer_size = 1000;\nstonesoup_tainted_buff = (char*) malloc(buffer_size * sizeof(char));\ndata_size = mg_get_var(conn, \"data\", stonesoup_tainted_buff, buffer_size * sizeof(char));\nbuffer_size = buffer_size * 2;\nstonesoup_handle_taint(stonesoup_tainted_buff);\nvoid stonesoup_handle_taint(char *stained_grouchily)\nthieveries_editorializers = &stained_grouchily;\niconometry_antiphlogistic = thieveries_editorializers + 5;\nfree(((char *)( *(iconometry_antiphlogistic - 5))));\n \n","target":0}
{"idx":21427,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21428,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21429,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21430,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21431,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21432,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21433,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21434,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21435,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21436,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21437,"code":"int chawbacon_roquer = 13;\nchar *arterializing_iterance;\nstonesoup_read_taint(&arterializing_iterance,\"1305\",chawbacon_roquer);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&arterializing_iterance,\"1305\",chawbacon_roquer);\ninelasticities_opedeldoc[17] = arterializing_iterance;\nruddled_redargutory(inelasticities_opedeldoc);\nvoid ruddled_redargutory(char **const firking_mappable)\nfree(((char *)((char **)firking_mappable)[17]));\n \n","target":0}
{"idx":21438,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21439,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21440,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21441,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21442,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21443,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21444,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21445,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21446,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21447,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21448,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21449,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21450,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21451,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21452,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21453,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21454,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21455,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21456,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21457,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21458,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21459,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21460,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21461,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21462,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21463,"code":"union historians_misuses abnormalized_montpellier;\nint nonconjectural_tuberiform = 5;\nchar *scronach_semitraditional;;\nstonesoup_read_taint(&scronach_semitraditional,\"7806\",nonconjectural_tuberiform);\nvoid stonesoup_read_taint(char** stonesoup_tainted_buff, char* stonesoup_envKey, int stonesoup_shmsz) {\n*stonesoup_tainted_buff = NULL;\nif ((stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0) {\n*stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char));\nstonesoup_read_taint(&scronach_semitraditional,\"7806\",nonconjectural_tuberiform);\nabnormalized_montpellier . belabours_preadjectivally = scronach_semitraditional;\nnearside_gardon(abnormalized_montpellier);\nvoid nearside_gardon(const union historians_misuses harbour_unmitering)\nfree(((char *)((union historians_misuses )harbour_unmitering) . belabours_preadjectivally));\n \n","target":0}
{"idx":21464,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21465,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21466,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21467,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21468,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21469,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21470,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21471,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21472,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21473,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21474,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21475,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21476,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21477,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21478,"code":"stonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nelse\nreturn f;\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21479,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21480,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21481,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n\n\n--------------------------------\n8121 \/cwe399_to_be_scaned\/C\/Bad\/151959\/gimpviewable.c free_error\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21482,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21483,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21484,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21485,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21486,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21487,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21488,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21489,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21490,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21491,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21492,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21493,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21494,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21495,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21496,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21497,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21498,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21499,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21500,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21501,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21502,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21503,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21504,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21505,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21506,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21507,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21508,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21509,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21510,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21511,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21512,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21513,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21514,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21515,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21516,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21517,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21518,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21519,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21520,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21521,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21522,"code":"void (*godlike_seqed)(char **) = foulage_elizabethanize;\nsaussuritic_hemiform = ((char *)(malloc(bsd_stepdancing + 1)));\nmemset(saussuritic_hemiform,0,bsd_stepdancing + 1);\nmemcpy(saussuritic_hemiform,perishless_baptlsta,bsd_stepdancing);\ndendron_bandonion = &saussuritic_hemiform;\nallochetia_outcharm = ((char **)(((unsigned long )dendron_bandonion) * thorntown_attempers * thorntown_attempers)) + 5;\ngodlike_seqed(allochetia_outcharm);\nvoid foulage_elizabethanize(char **utopisms_sancho)\nfishpound_nonoriginal = ((char *)( *(utopisms_sancho - 5)));\nstonesoup_files = fopen(fishpound_nonoriginal,\"r\");\nif (stonesoup_files != 0) {\nwhile(fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1 && stonesoup_ssi < 1020){\nstonesoup_file = fopen(stonesoup_filename,\"w\");\nfputs(\"woohoo!\",stonesoup_file);\nfflush(stonesoup_file);\nstonesoup_file_list[stonesoup_ssi] = stonesoup_file;\nstonesoup_ssi++;\nfclose(stonesoup_files);\nfree(((char *)( *(utopisms_sancho - 5))));\n \n","target":1}
{"idx":21523,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21524,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21525,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21526,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21527,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21528,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21529,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21530,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21531,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21532,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21533,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21534,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21535,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n\n-------------------------------\n8263 \/cwe399_to_be_scaned\/C\/Bad\/151982\/bss_file.c free_error\nss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21536,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21537,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21538,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21539,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21540,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21541,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21542,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21543,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21544,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21545,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21546,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21547,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21548,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21549,"code":"archpresbyter_trilliums = getenv(\"GEMINIANI_IMMATCHLESS\");\nesdud_shipwrecks[17] = archpresbyter_trilliums;\nturbocharger_rabaul[5] = esdud_shipwrecks;\ntryst_sexily[1] = 5;\nrewhiten_cot =  *(turbocharger_rabaul + tryst_sexily[1]);\nintertissued_crocketing(singsong_lattimer,rewhiten_cot);\nvoid intertissued_crocketing(int difda_stiacciato,char **anabaptism_dekadrachm)\nunsigned int **stonesoup_buffer_array = 0;\nvernacularizing_anguishes = ((char *)anabaptism_dekadrachm[17]);\nstonesoup_num = atoi(vernacularizing_anguishes);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_size = 100000;\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"CROSSOVER-STATE\");\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array[stonesoup_i]\", stonesoup_buffer_array[stonesoup_i], \"TRIGGER-STATE\");\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":1}
{"idx":21550,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21551,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21552,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21553,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21554,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21555,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21556,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21557,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21558,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21559,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21560,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21561,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21562,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21563,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21564,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21565,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21566,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21567,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21568,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21569,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21570,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21571,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21572,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21573,"code":"sebastianite_disorientate = getenv(\"MOONBLINK_DESUGARS\");\ncsnet_giuseppe = ((int )(strlen(sebastianite_disorientate)));\nsolipsism_thatd = ((char *)(malloc(csnet_giuseppe + 1)));\nmemset(solipsism_thatd,0,csnet_giuseppe + 1);\nmemcpy(solipsism_thatd,sebastianite_disorientate,csnet_giuseppe);\nneb_lekane[5] = solipsism_thatd;\ncraking_sextern = 5;\ntrichinoid_aspersory = &craking_sextern;\ndiamonded_shedding =  *(neb_lekane +  *trichinoid_aspersory);\nblastogenesis_hephaistos(mediastinotomy_downbent,diamonded_shedding);\nvoid blastogenesis_hephaistos(int retransmits_chemotactically,char *heterotopous_berrendo)\nlurers_grubhood = ((char *)heterotopous_berrendo);\nstonesoup_num_files = strtoul(lurers_grubhood,0,16);\nif (stonesoup_num_files > 0xffff)\nstonesoup_num_files = 0;\nstonesoup_filearray = ((FILE **)(malloc(stonesoup_num_files * sizeof(FILE *))));\nfilename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nif (stonesoup_filearray != 0) {\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i)\nstonesoup_filearray[stonesoup_i] = 0;\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nif (stonesoup_filearray[stonesoup_i] != 0)\nfclose(stonesoup_filearray[stonesoup_i]);\nfree(stonesoup_filearray);\nfree(stonesoup_filename);\nfree(((char *)heterotopous_berrendo));\n \n","target":1}
{"idx":21574,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21575,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21576,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21577,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21578,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21579,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21580,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21581,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21582,"code":"colors = strcpy((xmalloc(strlen(s) + 1)),s);\narg = split(colors,\":\",&n);\nchar **split(char *str,char *delim,int *nwrds);\nfree(colors);\n \n","target":0}
{"idx":21583,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21584,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21585,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nfree(dirpath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_printf(\"Error opening pipe\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Error opening pipe\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21586,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21587,"code":"stonesoup_setup_printf_context();\nvoid stonesoup_setup_printf_context() {\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nstonesoup_printf_context = fopen(filepath, \"w\");\nfree(filepath);\nif (stonesoup_printf_context == NULL) {\nstonesoup_printf_context = stderr;\nstonesoup_setup_printf_context();\nstonesoup_read_taint(&trapnested_agavose,\"3018\",prepackage_bombernickel);\nstonesoup_printf(\"Input value is negative\\n\");\nvoid stonesoup_printf(char * format, ...) {\nvfprintf(stonesoup_printf_context, format, argptr);\nfflush(stonesoup_printf_context);\nstonesoup_printf(\"Input value is negative\\n\");\nstonesoup_close_printf_context();\nvoid stonesoup_close_printf_context() {\nif (stonesoup_printf_context != NULL && stonesoup_printf_context != stderr) {\nfclose(stonesoup_printf_context);\n \n","target":0}
{"idx":21588,"code":"filename_len = strlen(\"\/opt\/stonesoup\/workspace\/testData\/temp\") + 10;\nstonesoup_filename = (char*) malloc(filename_len * sizeof(char));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num_files; ++stonesoup_i) {\nsnprintf(stonesoup_filename,filename_len,\"%s_%08x\", \"\/opt\/stonesoup\/workspace\/testData\/temp\", stonesoup_i);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nFILE *stonesoup_open_file(char *filename_param)\nf = fopen(filename_param,\"w\");\nif (!f)\nreturn 0;\nreturn f;\nfclose(f);\nstonesoup_filearray[stonesoup_i] = stonesoup_open_file(stonesoup_filename);\nfree(stonesoup_filename);\n \n","target":1}
{"idx":21589,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21590,"code":"stonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nif (stonesoup_str_list != 0) {\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nvoid stonesoup_cleanup(char **ptrs,int size)\nif (ptrs[i] != 0) {\nfree(ptrs[i]);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21591,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21592,"code":"stonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nfor (index = 0; index < size_param; index++) {\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21593,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21594,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21595,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21596,"code":"ss_tc_root = getenv(\"SS_TC_ROOT\");\nsize_dirpath = strlen(ss_tc_root) + strlen(\"testData\") + 2;\ndirpath = (char*) malloc (size_dirpath * sizeof(char));\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(dirpath);\n \n","target":0}
{"idx":21597,"code":"stonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\ntracepoint(stonesoup_trace, variable_address, \"stonesoup_buffer_array\", stonesoup_buffer_array, \"INITIAL-STATE\");\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\n \n","target":0}
{"idx":21598,"code":"int unfomented_cappings = 7;\npromisee_skiagraphing = ((char *)(malloc(saffronwood_hardfist + 1)));\nmemset(promisee_skiagraphing,0,saffronwood_hardfist + 1);\nmemcpy(promisee_skiagraphing,lasmarias_interess,saffronwood_hardfist);\ntrustifying_unzipped[5] = promisee_skiagraphing;\nrovaniemi_coeymans[1] = 5;\nsar_siris =  *(trustifying_unzipped + rovaniemi_coeymans[1]);\noverindulgence_deforcer(unfomented_cappings,sar_siris);\nvoid overindulgence_deforcer(int somatist_akiachak,char *osteitis_christiansen)\npseudogalena_unrealities = ((char *)osteitis_christiansen);\nstonesoup_num = atoi(pseudogalena_unrealities);\nif (stonesoup_num > 0 && stonesoup_num < 4294967295U \/ sizeof(unsigned int **)) {\nstonesoup_buffer_array = ((unsigned int **)(malloc(stonesoup_num * sizeof(unsigned int *))));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i) {\nstonesoup_buffer_array[stonesoup_i] = 0;\nwhile(stonesoup_buffer_array[stonesoup_i] == 0){\nstonesoup_buffer_array[stonesoup_i] = ((unsigned int *)(malloc(stonesoup_size * sizeof(unsigned int ))));\nif (stonesoup_buffer_array[stonesoup_i] != 0) {\nmemset(stonesoup_buffer_array[stonesoup_i],0,stonesoup_size * sizeof(unsigned int ));\nfor (stonesoup_i = 0; stonesoup_i < stonesoup_num; ++stonesoup_i)\nif (stonesoup_buffer_array[stonesoup_i] != 0)\nfree(stonesoup_buffer_array[stonesoup_i]);\nif (stonesoup_buffer_array != 0) {\nfree(stonesoup_buffer_array);\nif (osteitis_christiansen != 0)\nfree(((char *)osteitis_christiansen));\n \n","target":1}
{"idx":21599,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21600,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21601,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21602,"code":"char stonesoup_filename[80];\nint stonesoup_num_files = 10;\ngravida_timesaver = getenv(\"NEEDLEBILL_RITZES\");\nshrubland_dissyllabised[14] = gravida_timesaver;\nstable_hairpiece[ *( *innocuously_organoid)] = shrubland_dissyllabised;\nunjarring_paralogician = stable_hairpiece[ *( *innocuously_organoid)];\npitkin_martyrer = ((char *)unjarring_paralogician[14]);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_files = fopen(pitkin_martyrer,\"rb\");\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nfree(stonesoup_str_list);\n \n","target":0}
{"idx":21603,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21604,"code":"skagerrak_tabacum = getenv(\"SHOPBOYS_LYNDES\");\npostdating_unlawfulness . ecuadorian_perling = ((char *)skagerrak_tabacum);\nminsteryard_unwealsomeness(postdating_unlawfulness);\nvoid minsteryard_unwealsomeness(const struct archostegnosis_nablus trisects_caulophyllum)\nchar stonesoup_filename[80];\nint stonesoup_num_files = 10;\npalici_extroitive = ((char *)((struct archostegnosis_nablus )trisects_caulophyllum) . ecuadorian_perling);\nstonesoup_str_list = malloc(sizeof(char *) * stonesoup_num_files);\nstonesoup_str_list[stonesoup_str_list_index] = 0;\nstonesoup_files = fopen(palici_extroitive,\"rb\");\nif (stonesoup_files != 0) {\nstonesoup_file_list = malloc(stonesoup_num_files * sizeof(FILE *));\nif (fscanf(stonesoup_files,\"%79s\",stonesoup_filename) == 1) {\nstonesoup_file_list[stonesoup_ssi] = fopen(stonesoup_filename,\"rb\");\nstonesoup_file = stonesoup_file_list[stonesoup_ssi];\nfseek(stonesoup_file,0,2);\nstonesoup_size = ftell(stonesoup_file);\nrewind(stonesoup_file);\nstonesoup_contents = malloc((stonesoup_size + 1) * sizeof(char ));\nmemset(stonesoup_contents,0,(stonesoup_size + 1) * sizeof(char ));\nfread(stonesoup_contents,1,stonesoup_size,stonesoup_file);\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nchar *stonesoup_isAlphaNum(char *str,int size_param)\nif (!stonesoup_isalnum(str[index])) {\nreturn 0;\nreturn str;\nstonesoup_contents = stonesoup_isAlphaNum(stonesoup_contents,stonesoup_size);\nstonesoup_str_list[stonesoup_ssi] = stonesoup_contents;\nfclose(stonesoup_file);\nfclose(stonesoup_files);\nif (stonesoup_file_list != 0) {\nfree(stonesoup_file_list);\nstonesoup_cleanup(stonesoup_str_list,stonesoup_num_files);\nfree(stonesoup_str_list);\n \n","target":1}
{"idx":21605,"code":"dirpath = (char*) malloc (size_dirpath * sizeof(char));\nif (dirpath != NULL) {\nsprintf(dirpath, \"%s\/%s\", ss_tc_root, \"testData\");\nif (stat(dirpath, &st) == -1) {\nretval = mkdir(dirpath, 0700);\nif (retval == 0) {\nsize_filepath = strlen(dirpath) + strlen(\"logfile.txt\") + 2;\nfilepath = (char*) malloc (size_filepath * sizeof(char));\nif (filepath != NULL) {\nsprintf(filepath, \"%s\/%s\", dirpath, \"logfile.txt\");\nfree(filepath);\nfree(dirpath);\n \n","target":0}
{"idx":21606,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ngoto sink;\nsink:\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21607,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ngoto sink;\nsink:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21608,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nbadStatic = 1;\nbadSink(data);\nstatic void badSink(char * data)\nif(badStatic)\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21609,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ngoodB2G1Static = 0;\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(char * data)\nif(goodB2G1Static){}\nelse\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21610,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ngoodB2G2Static = 1;\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(char * data)\nif(goodB2G2Static)\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21611,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_badGlobal = 1;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_badSink(char * data)\nif(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_badGlobal)\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n\n \n","target":1}
{"idx":21612,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G1Global = 0;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G1Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G1Sink(char * data)\nif(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G1Global){}\nelse\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21613,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G2Global = 1;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G2Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G2Sink(char * data)\nif(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_22_goodB2G2Global)\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21614,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21615,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21616,"code":"char * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nchar * data = *dataPtr1;\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\n*dataPtr1 = data;\nchar * data = *dataPtr2;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21617,"code":"char * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nchar * data = *dataPtr1;\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\n*dataPtr1 = data;\nchar * data = *dataPtr2;\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":0}
{"idx":21618,"code":"size_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nmyUnion.unionFirst = data;\nchar * data = myUnion.unionSecond;\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":0}
{"idx":21619,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_34_unionType myUnion;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nmyUnion.unionFirst = data;\nchar * data = myUnion.unionSecond;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21620,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ngoodB2GSink(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21621,"code":"size_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nbadSink(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":0}
{"idx":21622,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = goodB2GSource(data);\nchar * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = goodB2GSource(data);\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21623,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = badSource(data);\nstatic char * badSource(char * data)\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nreturn data;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n\n \n","target":0}
{"idx":21624,"code":"char * data;\nvoid (*funcPtr) (char *) = badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nfuncPtr(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":0}
{"idx":21625,"code":"char * data;\nvoid (*funcPtr) (char *) = goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nfuncPtr(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21626,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_45_badData = data;\nbadSink();\nstatic void badSink()\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_45_badData;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n\n \n","target":0}
{"idx":21627,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_45_goodB2GData = data;\ngoodB2GSink();\nstatic void goodB2GSink()\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_45_goodB2GData;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21628,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":1}
{"idx":21629,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_51b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21630,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52c_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":1}
{"idx":21631,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_52c_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21632,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":1}
{"idx":21633,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_53d_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21634,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54d_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54e_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54e_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21635,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54d_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54e_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_54e_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21636,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_badSource(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_badSource(char * data)\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nreturn data;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21637,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_goodB2GSource(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_61b_goodB2GSource(char * data)\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nreturn data;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21638,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_badSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21639,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_63b_goodB2GSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21640,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_64b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_64b_badSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":1}
{"idx":21641,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_64b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_64b_goodB2GSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21642,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21643,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_65b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n\n \n","target":0}
{"idx":21644,"code":"char * data;\nchar * dataArray[5];\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_66b_badSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_66b_badSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21645,"code":"char * data;\nchar * dataArray[5];\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_66b_goodB2GSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_66b_goodB2GSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21646,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_badSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_badSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21647,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_goodB2GSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67b_goodB2GSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21648,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68_badDataForGoodSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68b_goodB2GSink();\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68b_goodB2GSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68_badDataForGoodSink;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21649,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68_badDataForBadSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68b_badSink();\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68b_badSink()\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_68_badDataForBadSink;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21650,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_bad();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_bad::action(char * data) const\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21651,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_goodB2G();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_81_goodB2G::action(char * data) const\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21652,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_bad;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_bad::action(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21653,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (100-dataLen > 1)\nif (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\ndataLen = strlen(data);\nif (dataLen > 0 && data[dataLen-1] == '\\n')\ndata[dataLen-1] = '\\0';\nelse\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_goodB2G;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_82_goodB2G::action(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21654,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21655,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21656,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(1)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21657,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(0){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21658,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(1)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21659,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(5==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21660,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(5!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21661,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(5==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21662,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21663,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21664,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21665,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21666,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21667,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21668,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21669,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21670,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(STATIC_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21671,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21672,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21673,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21674,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21675,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21676,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(staticReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21677,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21678,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21679,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21680,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21681,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21682,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21683,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21684,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21685,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21686,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21687,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21688,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(GLOBAL_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21689,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21690,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21691,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nif(globalFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21692,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nswitch(5)\ncase 6:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21693,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nswitch(6)\ncase 6:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21694,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nswitch(6)\ncase 6:\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21695,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nwhile(1)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21696,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nwhile(1)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21697,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfor(k = 0; k < 1; k++)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21698,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfor(j = 0; j < 1; j++)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21699,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\ngoto sink;\nsink:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21700,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\ngoto sink;\nsink:\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21701,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nbadStatic = 1;\nbadSink(data);\nstatic void badSink(char * data)\nif(badStatic)\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21702,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\ngoodB2G1Static = 0;\ngoodB2G1Sink(data);\nstatic void goodB2G2Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21703,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\ngoodB2G2Static = 1;\ngoodB2G2Sink(data);\nstatic void goodB2G1Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21704,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_badGlobal = 1;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21705,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_goodB2G2Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_goodB2G2Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21706,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_goodB2G2Global = 1;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_goodB2G2Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_22_goodB2G1Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21707,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21708,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21709,"code":"char * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nchar * data = *dataPtr1;\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\n*dataPtr1 = data;\nchar * data = *dataPtr2;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21710,"code":"char * data;\nchar * *dataPtr1 = &data;\nchar * *dataPtr2 = &data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nchar * data = *dataPtr1;\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\n*dataPtr1 = data;\nchar * data = *dataPtr2;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21711,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_34_unionType myUnion;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nmyUnion.unionFirst = data;\nchar * data = myUnion.unionSecond;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21712,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_34_unionType myUnion;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nmyUnion.unionFirst = data;\nchar * data = myUnion.unionSecond;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21713,"code":"for (; *data != '\\0'; data++)\nfree(data);\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nbadSink(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21714,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\ngoodB2GSink(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21715,"code":"size_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nreturn data;\ndata[0] = '\\0';\ndata = goodB2GSource(data);\nfor (i=0; i < strlen(data); i++)\nfree(data);\nstatic char * goodB2GSource(char * data)\nsize_t dataLen = strlen(data);\nreturn data;\ndata = goodB2GSource(data);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21716,"code":"size_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nreturn data;\ndata[0] = '\\0';\ndata = badSource(data);\nfor (; *data != '\\0'; data++)\nfree(data);\nstatic char * badSource(char * data)\nsize_t dataLen = strlen(data);\nreturn data;\ndata = badSource(data);\nfree(data);\n \n","target":1}
{"idx":21717,"code":"char * data;\nvoid (*funcPtr) (char *) = badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfuncPtr(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21718,"code":"char * data;\nvoid (*funcPtr) (char *) = goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfuncPtr(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21719,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_45_goodB2GData = data;\ngoodB2GSink();\nstatic void goodB2GSink()\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_45_goodB2GData;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21720,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_45_badData = data;\nbadSink();\nstatic void badSink()\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_45_badData;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21721,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21722,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_51b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21723,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52c_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21724,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_52c_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21725,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21726,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_53d_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21727,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54d_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54e_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54e_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21728,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54d_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54e_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_54e_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21729,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_badSource(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_badSource(char * data)\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nreturn data;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21730,"code":"data[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_goodB2GSource(data);\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nreturn data;\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_goodB2GSource(data);\nfor (i=0; i < strlen(data); i++)\nfree(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_goodB2GSource(char * data)\nsize_t dataLen = strlen(data);\nreturn data;\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_61b_goodB2GSource(data);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21731,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_badSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21732,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_63b_goodB2GSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21733,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_64b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_64b_goodB2GSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21734,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_64b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_64b_badSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21735,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21736,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_65b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21737,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_66b_goodB2GSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_66b_goodB2GSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21738,"code":"char * data;\nchar * dataArray[5];\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_66b_badSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_66b_badSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21739,"code":"CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct;\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_goodB2GSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_goodB2GSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21740,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_badSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67b_badSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21741,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68_badDataForGoodSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68b_goodB2GSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68_badDataForGoodSink;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21742,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68_badDataForBadSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68b_badSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_68_badDataForBadSink;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21743,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_bad();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_bad::action(char * data) const\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21744,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_goodB2G();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_81_goodB2G::action(char * data) const\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21745,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_bad;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_bad::action(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21746,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nchar * environment = GETENV(ENV_VARIABLE);\nif (environment != NULL)\nstrncat(data+dataLen, environment, 100-dataLen-1);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_goodB2G;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_82_goodB2G::action(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21747,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21748,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21749,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(0){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21750,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(1)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21751,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(1)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21752,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(5!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21753,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(5==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21754,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(5==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21755,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21756,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21757,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21758,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21759,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21760,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21761,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21762,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21763,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(STATIC_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21764,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21765,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21766,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21767,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21768,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21769,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(staticReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21770,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21771,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21772,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21773,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21774,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21775,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21776,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21777,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21778,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21779,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21780,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21781,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(GLOBAL_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21782,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21783,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21784,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nif(globalFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21785,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nswitch(5)\ncase 6:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21786,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nswitch(6)\ncase 6:\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21787,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nswitch(6)\ncase 6:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21788,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21789,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21790,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21791,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21792,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21793,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21794,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\ngoodB2G2Sink(data);\nstatic void goodB2G2Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21795,"code":"for (; *data != '\\0'; data++)\nfree(data);\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nbadSink(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21796,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\ngoodB2G1Sink(data);\nstatic void goodB2G1Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21797,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_goodB2G2Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_goodB2G2Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21798,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_goodB2G1Global = 0;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_goodB2G1Sink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_goodB2G1Sink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21799,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_badGlobal = 1;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_22_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21800,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21801,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nchar * dataCopy = data;\nchar * data = dataCopy;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21802,"code":"char * *dataPtr2 = &data;\nchar * data = *dataPtr2;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21803,"code":"char * *dataPtr2 = &data;\nchar * data = *dataPtr2;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21804,"code":"CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_34_unionType myUnion;\nchar * data = myUnion.unionSecond;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21805,"code":"CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_34_unionType myUnion;\nchar * data = myUnion.unionSecond;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21806,"code":"for (; *data != '\\0'; data++)\nfree(data);\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nbadSink(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21807,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\ngoodB2GSink(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21808,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = badSource(data);\nstatic char * badSource(char * data)\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nreturn data;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21809,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = goodB2GSource(data);\nstatic char * goodB2GSource(char * data)\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nreturn data;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21810,"code":"char * data;\nvoid (*funcPtr) (char *) = goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nfuncPtr(data);\nstatic void goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21811,"code":"char * data;\nvoid (*funcPtr) (char *) = badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nfuncPtr(data);\nstatic void badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21812,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_45_goodB2GData = data;\ngoodB2GSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_45_goodB2GData;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21813,"code":"CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_45_badData = data;\nbadSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_45_badData;\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_45_badData = data;\nbadSink();\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21814,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21815,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_51b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21816,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52c_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21817,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_52c_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21818,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21819,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_53d_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21820,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54b_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54b_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54c_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54c_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54d_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54d_badSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54e_badSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54e_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21821,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54b_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54b_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54c_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54c_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54d_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54d_goodB2GSink(char * data)\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54e_goodB2GSink(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_54e_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21822,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_badSource(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_badSource(char * data)\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nreturn data;\nfor (; *data != '\\0'; data++)\nif (*data == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":1}
{"idx":21823,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\ndata = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_goodB2GSource(data);\nchar * CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_61b_goodB2GSource(char * data)\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nreturn data;\nfor (i=0; i < strlen(data); i++)\nif (data[i] == SEARCH_CHAR)\nbreak;\nfree(data);\n \n","target":0}
{"idx":21824,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_badSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21825,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_63b_goodB2GSink(char * * dataPtr)\nchar * data = *dataPtr;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21826,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_64b_goodB2GSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_64b_goodB2GSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21827,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_64b_badSink(&data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_64b_badSink(void * dataVoidPtr)\nchar * * dataPtr = (char * *)dataVoidPtr;\nchar * data = (*dataPtr);\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21828,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_goodB2GSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_goodB2GSink(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21829,"code":"char * data;\nvoid (*funcPtr) (char *) = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_badSink;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nfuncPtr(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_65b_badSink(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21830,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_66b_goodB2GSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_66b_goodB2GSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21831,"code":"char * data;\nchar * dataArray[5];\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\ndataArray[2] = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_66b_badSink(dataArray);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_66b_badSink(char * dataArray[])\nchar * data = dataArray[2];\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21832,"code":"CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct;\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_goodB2GSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_goodB2GSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21833,"code":"char * data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nmyStruct.structFirst = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_badSink(myStruct);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67b_badSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType myStruct)\nchar * data = myStruct.structFirst;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21834,"code":"data[0] = '\\0';\nsize_t dataLen = strlen(data);\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68_badDataForGoodSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68b_goodB2GSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68_badDataForGoodSink;\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21835,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68_badDataForBadSink = data;\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68b_badSink();\nchar * data = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_68_badDataForBadSink;\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21836,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_bad();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_bad::action(char * data) const\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21837,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nconst CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_base& baseObject = CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_goodB2G();\nbaseObject.action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_81_goodB2G::action(char * data) const\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21838,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_bad;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_bad::action(char * data)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21839,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nsize_t dataLen = strlen(data);\nFILE * pFile;\nif (100-dataLen > 1)\npFile = fopen(FILENAME, \"r\");\nif (pFile != NULL)\nif (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\ndata[dataLen] = '\\0';\nfclose(pFile);\nCWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_base* baseObject = new CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_goodB2G;\nbaseObject->action(data);\nvoid CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_82_goodB2G::action(char * data)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21840,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21841,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21842,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(1)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21843,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(0){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21844,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(1)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21845,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(5!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21846,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(5==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21847,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(5==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21848,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21849,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21850,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21851,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21852,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21853,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21854,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21855,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21856,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(STATIC_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21857,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21858,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21859,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21860,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21861,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21862,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(staticReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21863,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_FALSE){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21864,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_TRUE)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21865,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_TRUE)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21866,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalTrue)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21867,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalFalse){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21868,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalTrue)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21869,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalReturnsFalse()){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21870,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalReturnsTrue())\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21871,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalReturnsTrue())\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21872,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_FIVE!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21873,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_FIVE==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21874,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(GLOBAL_CONST_FIVE==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21875,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalFive==5)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21876,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalFive!=5){}\nelse\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21877,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nif(globalFive==5)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21878,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nswitch(5)\ncase 6:\nprintLine(\"Benign, fixed string\");\nbreak;\ndefault:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21879,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nswitch(6)\ncase 6:\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21880,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nswitch(6)\ncase 6:\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21881,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nwhile(1)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
{"idx":21882,"code":"char * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nwhile(1)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21883,"code":"int k;\nchar * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nfor(k = 0; k < 1; k++)\nfor (i=0; i < strlen(data); i++)\nfree(data);\n \n","target":0}
{"idx":21884,"code":"int j;\nchar * data;\ndata = (char *)malloc(100*sizeof(char));\ndata[0] = '\\0';\nstrcpy(data, BAD_SOURCE_FIXED_STRING);\nfor(j = 0; j < 1; j++)\nfor (; *data != '\\0'; data++)\nfree(data);\n \n","target":1}
